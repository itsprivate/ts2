{
  "@type": "NewsArticle",
  "identifier": "2022--08--11--en--hackernews--HackerNews--NewsArticle--32422871",
  "url": "https://news.ycombinator.com/item?id=32422871",
  "headline": "Launch HN: AccessOwl (YC S22) – Automating SaaS Provisioning and Permissioning",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "Hey HN, we are Mathias and Philip, co-founders of AccessOwl (<a href=\"https://www.accessowl.io/\" rel=\"nofollow\">https://www.accessowl.io/</a>). AccessOwl automates your employees' access to SaaS products. We give you a simple way to provision and deprovision any SaaS tool, as well as to configure permission levels. See a demo here: <a href=\"https://www.accessowl.io/productdemo\" rel=\"nofollow\">https://www.accessowl.io/productdemo</a>.<p>Most of us use SaaS tools for work day-in and day-out. How do we get access to those tools? For the most part, through a colleague or IT admin who creates all accounts and sets permissions manually.<p>Here’s what it usually looks like for the unfortunate admin: (1) receive a request for a new tool via email, Slack, JIRA or face-to-face. Since you are busy with something else, you write a todo for later; (2) you log in to the tool and realize that the permission that was requested is way too high so you check in with the requestor’s manager; (3) you finally set up the account and document user, tool and permission in a Gsheet/Notion/Airtable.<p>This quickly becomes a 30m task for a simple access request! This is still the best practice for most people and it sadly also was for us. We were both founders before and experienced the same tedious process in different flavors at our own startups and other companies.<p>At some point we migrated to Okta and partially automated our provisioning and deprovisioning (permissioning, however, stayed painfully manual). Why only partially automated? Because Okta utilizes the SCIM API which was either not available in our tool stack or required an expensive upgrade to enterprise-subscription (thanks to the “sso tax”: <a href=\"https://news.ycombinator.com/item?id=31175300\" rel=\"nofollow\">https://news.ycombinator.com/item?id=31175300</a>). And yet, we still missed simple things such as approval steps, a straightforward way to request access, and access reviews.<p>We talked to hundreds of organizations and saw the same manual processes and self-built scripts everywhere. The pain often starts at growing companies with around 50 employees. At this stage the CTO usually gets fed up with manually (de)provisioning and documenting it in a Gsheet. Another widespread cause of headache are IT security certifications (e.g. SOC2, ISO27001,...), requiring to know which employee has access to what tool, regular access reviews, and timely offboardings.<p>It seemed crazy that in a world where SaaS has become the norm, there was no great way to manage something as seemingly “trivial”, but also as critical, as user accounts. The core issues are, as always, missing integrations. Despite SCIM being the standard for over a decade, not all applications are utilizing it. Worse, many vendors lock it up in their enterprise plan.<p>This brought us to our core design principle: AccessOwl has to work with every tool, no matter what integrations are available. We generalize all the available ways of integrations in a single, simple interface. We take care of all the grunt work needed to coax each SaaS tool into doing the right thing. Whether it’s calling public APIs or resorting to Plaid-style automations as a last resort. Our first iteration was a simple workflow in Slack (Request -&gt; Approve -&gt; Manual provision). It covered all access documentation and solved back-and-forth communication between stakeholders. Since then, we have been adding more and more integrations to SaaS tools to directly (de)provision without the use of SCIM APIs. Taking a similar approach to provisioning as “Plaid” did in banking. We’re already covering 100+ tools and counting.<p>So what does a typical workflow look like?!<p>Step 1: Request an access, onboarding or offboarding. For this we piggy-back on whatever messaging tool is used in your org (we are starting with Slack, Teams will follow). It’s as simple as clicking a button to get your request started (no more manual JIRA tickets!) and always gets forwarded to the right stakeholders.<p>Step 2: Provisioning and permissioning. In the most basic workflow the tool owner receives the approved request with all the information to manually provision the account. If and when you arrive at the point where manual provisioning becomes a pain, you can let us automate it for you. The requestor will automatically get process updates and the access will be audit-ready logged in the background.<p>Prices start at $2.5 per employee per month and we charge a fixed premium for the automation of (de)provisioning based on the total number of employees.<p>We are excited for the opportunity to share AccessOwl with you! We would be more than excited to hear your thoughts and feedback and your own experiences with SaaS access management!",
  "keywords": [],
  "author": {
    "@type": "Person",
    "name": "mathiasn",
    "url": "https://news.ycombinator.com/user?id=mathiasn"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=32422871",
  "sameAs": "https://news.ycombinator.com/item?id=32422871",
  "dateCreated": "2022-08-11T08:51:25.200Z",
  "datePublished": "2022-08-11T08:09:47.000Z",
  "dateModified": "2022-08-11T08:51:25.200Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 4
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 0
    }
  ],
  "headline_zh-Hans": "启动HN：AccessOwl（YC S22）--自动化SaaS配置和授权\n",
  "headline_zh-Hant": "啟動HN：AccessOwl（YC S22）--自動化SaaS配置和授權\n",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "Hey HN, we are Mathias and Philip, co-founders of AccessOwl (<a href=\"https://www.accessowl.io/\" rel=\"nofollow\">https://www.accessowl.io/</a>). AccessOwl automates your employees' access to SaaS products. We give you a simple way to provision and deprovision any SaaS tool, as well as to configure permission levels. See a demo here: <a href=\"https://www.accessowl.io/productdemo\" rel=\"nofollow\">https://www.accessowl.io/productdemo</a>.<p>Most of us use SaaS tools for work day-in and day-out. How do we get access to those tools? For the most part, through a colleague or IT admin who creates all accounts and sets permissions manually.<p>Here’s what it usually looks like for the unfortunate admin: (1) receive a request for a new tool via email, Slack, JIRA or face-to-face. Since you are busy with something else, you write a todo for later; (2) you log in to the tool and realize that the permission that was requested is way too high so you check in with the requestor’s manager; (3) you finally set up the account and document user, tool and permission in a Gsheet/Notion/Airtable.<p>This quickly becomes a 30m task for a simple access request! This is still the best practice for most people and it sadly also was for us. We were both founders before and experienced the same tedious process in different flavors at our own startups and other companies.<p>At some point we migrated to Okta and partially automated our provisioning and deprovisioning (permissioning, however, stayed painfully manual). Why only partially automated? Because Okta utilizes the SCIM API which was either not available in our tool stack or required an expensive upgrade to enterprise-subscription (thanks to the “sso tax”: <a href=\"https://news.ycombinator.com/item?id=31175300\" rel=\"nofollow\">https://news.ycombinator.com/item?id=31175300</a>). And yet, we still missed simple things such as approval steps, a straightforward way to request access, and access reviews.<p>We talked to hundreds of organizations and saw the same manual processes and self-built scripts everywhere. The pain often starts at growing companies with around 50 employees. At this stage the CTO usually gets fed up with manually (de)provisioning and documenting it in a Gsheet. Another widespread cause of headache are IT security certifications (e.g. SOC2, ISO27001,...), requiring to know which employee has access to what tool, regular access reviews, and timely offboardings.<p>It seemed crazy that in a world where SaaS has become the norm, there was no great way to manage something as seemingly “trivial”, but also as critical, as user accounts. The core issues are, as always, missing integrations. Despite SCIM being the standard for over a decade, not all applications are utilizing it. 更糟糕的是，许多供应商将其锁定在他们的企业计划中。<p>这让我们想到了我们的核心设计原则。AccessOwl必须与每个工具一起工作，无论有什么集成。我们在一个简单的界面中概括了所有可用的集成方式。我们负责所有需要哄骗每个SaaS工具来做正确事情的繁琐工作。无论是调用公共API，还是作为最后的手段诉诸于Plaid式的自动化。我们的第一次迭代是Slack中的一个简单的工作流程（请求-&gt；批准-&gt；手动提供）。它涵盖了所有的访问文件，解决了利益相关者之间的来回沟通。从那时起，我们一直在为SaaS工具添加越来越多的集成，以便在不使用SCIM APIs的情况下直接（取消）供应。采取类似于 \"Plaid \"在银行业所做的拨备方法。我们已经覆盖了100多个工具，而且还在不断增加。<p>那么，一个典型的工作流程是什么样的呢？<p>步骤1：请求访问、入职或离职。对于这一点，我们借助于你的组织中使用的任何消息传递工具（我们从Slack开始，Teams也会跟进）。这就像点击一个按钮来开始你的请求一样简单（没有更多的手动JIRA门票！），并且总是被转发给正确的利益相关者。在最基本的工作流程中，工具拥有者会收到经批准的请求，其中包含所有信息，以便手动配置账户。如果当你到了手动配置成为一种痛苦的时候，你可以让我们为你自动配置。请求者将自动获得流程更新，访问将在后台进行审计记录。<p>价格从每个雇员每月2.5美元开始，我们收取固定的预付款。\n",
  "description_zh-Hant": "Hey HN, we are Mathias and Philip, co-founders of AccessOwl (<a href=\"https://www.accessowl.io/\" rel=\"nofollow\">https://www.accessowl.io/</a>). AccessOwl automates your employees' access to SaaS products. We give you a simple way to provision and deprovision any SaaS tool, as well as to configure permission levels. See a demo here: <a href=\"https://www.accessowl.io/productdemo\" rel=\"nofollow\">https://www.accessowl.io/productdemo</a>.<p>Most of us use SaaS tools for work day-in and day-out. How do we get access to those tools? For the most part, through a colleague or IT admin who creates all accounts and sets permissions manually.<p>Here’s what it usually looks like for the unfortunate admin: (1) receive a request for a new tool via email, Slack, JIRA or face-to-face. Since you are busy with something else, you write a todo for later; (2) you log in to the tool and realize that the permission that was requested is way too high so you check in with the requestor’s manager; (3) you finally set up the account and document user, tool and permission in a Gsheet/Notion/Airtable.<p>This quickly becomes a 30m task for a simple access request! This is still the best practice for most people and it sadly also was for us. We were both founders before and experienced the same tedious process in different flavors at our own startups and other companies.<p>At some point we migrated to Okta and partially automated our provisioning and deprovisioning (permissioning, however, stayed painfully manual). Why only partially automated? Because Okta utilizes the SCIM API which was either not available in our tool stack or required an expensive upgrade to enterprise-subscription (thanks to the “sso tax”: <a href=\"https://news.ycombinator.com/item?id=31175300\" rel=\"nofollow\">https://news.ycombinator.com/item?id=31175300</a>). And yet, we still missed simple things such as approval steps, a straightforward way to request access, and access reviews.<p>We talked to hundreds of organizations and saw the same manual processes and self-built scripts everywhere. The pain often starts at growing companies with around 50 employees. At this stage the CTO usually gets fed up with manually (de)provisioning and documenting it in a Gsheet. Another widespread cause of headache are IT security certifications (e.g. SOC2, ISO27001,...), requiring to know which employee has access to what tool, regular access reviews, and timely offboardings.<p>It seemed crazy that in a world where SaaS has become the norm, there was no great way to manage something as seemingly “trivial”, but also as critical, as user accounts. The core issues are, as always, missing integrations. Despite SCIM being the standard for over a decade, not all applications are utilizing it. 更糟糕的是，許多供應商將其鎖定在他們的企業計劃中。<p>這讓我們想到了我們的核心設計原則。AccessOwl必須與每個工具一起工作，無論有什麼集成。我們在一個簡單的界面中概括了所有可用的集成方式。我們負責所有需要哄騙每個SaaS工具來做正確事情的繁瑣工作。無論是調用公共API，還是作為最後的手段訴諸於Plaid式的自動化。我們的第一次迭代是Slack中的一個簡單的工作流程（請求-&gt；批准-&gt；手動提供）。它涵蓋了所有的訪問文件，解決了利益相關者之間的來回溝通。從那時起，我們一直在為SaaS工具添加越來越多的集成，以便在不使用SCIM APIs的情況下直接（取消）供應。採取類似於 \"Plaid \"在銀行業所做的撥備方法。我們已經覆蓋了100多個工具，而且還在不斷增加。<p>那麼，一個典型的工作流程是什麼樣的呢？<p>步驟1：請求訪問、入職或離職。對於這一點，我們藉助於你的組織中使用的任何消息傳遞工具（我們從Slack開始，Teams也會跟進）。這就像點擊一個按鈕來開始你的請求一樣簡單（沒有更多的手動JIRA門票！），並且總是被轉發給正確的利益相關者。在最基本的工作流程中，工具擁有者會收到經批准的請求，其中包含所有信息，以便手動配置賬戶。如果當你到了手動配置成為一種痛苦的時候，你可以讓我們為你自動配置。請求者將自動獲得流程更新，訪問將在後臺進行審計記錄。<p>價格從每個僱員每月2.5美元開始，我們收取固定的預付款。\n"
}