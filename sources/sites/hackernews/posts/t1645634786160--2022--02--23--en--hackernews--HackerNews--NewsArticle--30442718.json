{
  "@type": "NewsArticle",
  "identifier": "2022--02--23--en--hackernews--HackerNews--NewsArticle--30442718",
  "url": "https://news.ycombinator.com/item?id=30442718",
  "headline": "Launch HN: Hydra (YC W22) – Query Any Database via Postgres",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "Hi HN, we’re Joe and JD from Hydra (<a href=\"https://hydras.io/\" rel=\"nofollow\">https://hydras.io/</a>).  Hydra is a Postgres extension that intelligently routes queries through Postgres to other databases. Engineers query regular Postgres, and Hydra extends a Postgres-compliant SQL layer to non-relational, columnar, and graph DBs. It currently works with Postgres and Snowflake, and we have a roadmap to support MongoDB, Google BigQuery, and ClickHouse.<p>Different databases are good at different things. For example, Postgres is good at low-latency transactional workloads, but slow when running analytical queries. For the latter, you're better off with a columnar database like Snowflake.  The problem is that for each new database added to a system, application complexity increases quickly.<p>Working at Microsoft Azure, I saw many companies juggle database trade-offs in complex architectures. When organizations adopted new databases, engineers were forced to re-write application code to support the new database or use multiple apps to offset database performance tradeoffs. All this is expensive busy work that frustrates engineers. Adopting new databases is hard and expensive.<p>Hydra automatically picks the right DB for the right task and pushes down computation, meaning each query will get routed to where it can be executed the fastest. We’ve seen results return 100X faster when executing to the right database.<p>We've chosen to integrate with Snowflake first so that developers can easily gain the analytical performance of Snowflake through a simple Postgres interface. To an application, Hydra looks like a single database that can handle both transactions and analytics.  As soon as transactions are committed in Postgres, they are accessible for analytics in real-time. Combining the strengths of Postgres and Snowflake in this way results in what is sometimes called HTAP: Hybrid Transactional-Analytical Processing (<a href=\"https://en.wikipedia.org/wiki/Hybrid_transactional/analytical_processing\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Hybrid_transactional/analytica...</a>), which is the convergence of OLTP and OLAP.<p>Existing solutions are manual and require communicating with each datastore separately. The common alternative is trying to combine all of your data together into a data warehouse via ETL. That works well for analysts and data scientists, but isn't transactional and can't be used to power responsive applications. With Hydra engineers can write unified applications to cover workloads that used to have to be separate.<p>Hydra runs as a Postgres extension, which gives it the ability to use Postgres internals and modify execution of queries. Hydra intercepts queries in real-time and routes queries based on query type, user settings, and Postgres' cost analysis. Writes and operational reads go to Postgres, analytical workloads go to Snowflake.<p>Recently committed transactions are moved from Postgres to Snowflake in near real-time using Hydra Bridge, our built-in data pipeline that links databases from within Postgres.  The bridge is an important part of what we do. Without Hydra, workloads are typically isolated between different databases, requiring engineers to implement slow and costly ETL processes. Complex analytics are often run on older data, updated monthly or weekly. The Hydra bridge allows for real-time data movement, enabling analytics to be run on fresh data.<p>We make money by charging for Hydra Postgres, which is a Postgres managed service, and Hydra Instance, which attaches Hydra to your existing Postgres database. Pricing is listed on the product pages: <a href=\"https://hydras.io/products/postgres\" rel=\"nofollow\">https://hydras.io/products/postgres</a> and <a href=\"https://hydras.io/products/instance\" rel=\"nofollow\">https://hydras.io/products/instance</a>.<p>A little about our backgrounds: Joseph Sciarrino - Former PM @ MSFT Azure Open-Source Databases team. Heroku (W08) and Citus Data (S11) alum. Jonathan Dance - Director @ Heroku (2011-2021)<p>Using Hydra you can create a database cluster of your own design. We’d love to know what Hydra clusters you’d be interested in creating. For example, Elasticsearch + Postgres, BigQuery + SingleStore + Postgres, etc. Remember - You can experiment different combinations without rewriting queries, since Hydra extends Postgres over these other databases. When you think about databases like interoperable parts you can get super creative!",
  "keywords": [],
  "author": {
    "@type": "Person",
    "name": "coatue",
    "url": "https://news.ycombinator.com/user?id=coatue"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=30442718",
  "sameAs": "https://hydras.io/",
  "dateCreated": "2022-02-23T16:46:26.160Z",
  "datePublished": "2022-02-23T16:18:51.000Z",
  "dateModified": "2022-02-23T16:46:26.160Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 20
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 5
    }
  ],
  "headline_zh-Hans": "启动HN：Hydra（YC W22）--通过Postgres查询任何数据库",
  "headline_zh-Hant": "啟動HN：Hydra（YC W22）--通過Postgres查詢任何數據庫",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "嗨，HN，我们是来自Hydra（<a href=\"https://hydras.io/\" rel=\"nofollow\">https://hydras.io/</a>）的Joe和JD。 Hydra是一个Postgres扩展，它可以通过Postgres智能地将查询路由到其他数据库。工程师查询常规的Postgres，而Hydra则将符合Postgres标准的SQL层扩展到非关系型、列式和图形数据库。目前，它与Postgres和Snowflake一起工作，我们有一个路线图，以支持MongoDB、Google BigQuery和ClickHouse。例如，Postgres擅长低延迟的事务性工作负载，但在运行分析性查询时却很慢。对于后者，你最好使用像 Snowflake 这样的列式数据库。 <p>在微软Azure工作时，我看到许多公司在复杂的架构中对数据库进行权衡。当企业采用新的数据库时，工程师们被迫重写应用程序代码以支持新的数据库，或者使用多个应用程序来抵消数据库的性能权衡。所有这些都是昂贵的忙碌工作，让工程师们感到沮丧。<p>Hydra为正确的任务自动选择正确的数据库，并推低计算量，这意味着每个查询将被路由到可以最快执行的地方。我们已经看到，当执行到正确的数据库时，结果的返回速度快了100倍。<p>我们选择首先与Snowflake整合，以便开发人员可以通过一个简单的Postgres接口轻松获得Snowflake的分析性能。对一个应用程序来说，Hydra看起来像一个单一的数据库，可以处理交易和分析。 一旦事务在 Postgres 中提交，它们就可以被实时地用于分析。Combining the strengths of Postgres and Snowflake in this way results in what is sometimes called HTAP: 混合交易分析处理（<a href=\"https://en.wikipedia.org/wiki/Hybrid_transactional/analytical_processing\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Hybrid_transactional/analytica...</a>），这是OLTP和OLAP的融合。<p>现有的解决方案是手动的，需要分别与每个数据存储进行通信。常见的替代方案是试图通过ETL将所有的数据合并到一个数据仓库中。这对分析师和数据科学家来说效果很好，但不是交易性的，也不能用来驱动响应性的应用。有了Hydra，工程师可以编写统一的应用程序，以涵盖过去必须分开的工作负载。<p>Hydra作为Postgres扩展运行，这使它能够使用Postgres内部结构并修改查询的执行。Hydra实时拦截查询，并根据查询类型、用户设置和Postgres的成本分析来路由查询。写入和操作读取到Postgres，分析工作负载到Snowflake。<p>最近提交的交易使用Hydra Bridge近乎实时地从Postgres转移到Snowflake，我们内置的数据管道，从Postgres内部连接数据库。 该桥是我们工作的一个重要部分。如果没有Hydra，工作负载通常在不同的数据库之间隔离，需要工程师实施缓慢和昂贵的ETL过程。复杂的分析通常是在较旧的数据上运行，每月或每周更新。The Hydra bridge allows for real-time data movement, enabling analytics to be run on fresh data.<p>We make money by charging for Hydra Postgres, which is a Postgres managed service, and Hydra Instance, which attaches Hydra to your existing Postgres database. Pricing is listed on the product pages: <a href=\"https://hydras.io/products/postgres\" rel=\"nofollow\">https://hydras.io/products/postgres</a>和<a href=\"https://hydras.io/products/instance\" rel=\"nofollow\">https://hydras.io/products/instance</a>。<p>关于我们的背景。Joseph Sciarrino - 前PM @ MSFT Azure 开源数据库团队。Heroku（W08）和Citus Data（S11）的校友。Jonathan Dance - Director @ Heroku (2011-2021)<p>使用Hydra你可以创建一个你自己设计的数据库集群。我们很想知道你对创建什么Hydra集群感兴趣。例如，Elasticsearch + Postgres，BigQuery + SingleStore + Postgres，等等。记住--你可以尝试不同的组合而不需要重写查询，因为Hydra在这些其他数据库上扩展了Postgres。当你把数据库想成是可互操作的部件时，你就可以有超强的创造力了!",
  "description_zh-Hant": "嗨，HN，我們是來自Hydra（<a href=\"https://hydras.io/\" rel=\"nofollow\">https://hydras.io/</a>）的Joe和JD。 Hydra是一個Postgres擴展，它可以通過Postgres智能地將查詢路由到其他數據庫。工程師查詢常規的Postgres，而Hydra則將符合Postgres標準的SQL層擴展到非關係型、列式和圖形數據庫。目前，它與Postgres和Snowflake一起工作，我們有一個路線圖，以支持MongoDB、Google BigQuery和ClickHouse。例如，Postgres擅長低延遲的事務性工作負載，但在運行分析性查詢時卻很慢。對於後者，你最好使用像 Snowflake 這樣的列式數據庫。 <p>在微軟Azure工作時，我看到許多公司在複雜的架構中對數據庫進行權衡。當企業採用新的數據庫時，工程師們被迫重寫應用程序代碼以支持新的數據庫，或者使用多個應用程序來抵消數據庫的性能權衡。所有這些都是昂貴的忙碌工作，讓工程師們感到沮喪。<p>Hydra為正確的任務自動選擇正確的數據庫，並推低計算量，這意味著每個查詢將被路由到可以最快執行的地方。我們已經看到，當執行到正確的數據庫時，結果的返回速度快了100倍。<p>我們選擇首先與Snowflake整合，以便開發人員可以通過一個簡單的Postgres接口輕鬆獲得Snowflake的分析性能。對一個應用程序來說，Hydra看起來像一個單一的數據庫，可以處理交易和分析。 一旦事務在 Postgres 中提交，它們就可以被實時地用於分析。Combining the strengths of Postgres and Snowflake in this way results in what is sometimes called HTAP: 混合交易分析處理（<a href=\"https://en.wikipedia.org/wiki/Hybrid_transactional/analytical_processing\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Hybrid_transactional/analytica...</a>），這是OLTP和OLAP的融合。<p>現有的解決方案是手動的，需要分別與每個數據存儲進行通信。常見的替代方案是試圖通過ETL將所有的數據合併到一個數據倉庫中。這對分析師和數據科學家來說效果很好，但不是交易性的，也不能用來驅動響應性的應用。有了Hydra，工程師可以編寫統一的應用程序，以涵蓋過去必須分開的工作負載。<p>Hydra作為Postgres擴展運行，這使它能夠使用Postgres內部結構並修改查詢的執行。Hydra實時攔截查詢，並根據查詢類型、用戶設置和Postgres的成本分析來路由查詢。寫入和操作讀取到Postgres，分析工作負載到Snowflake。<p>最近提交的交易使用Hydra Bridge近乎實時地從Postgres轉移到Snowflake，我們內置的數據管道，從Postgres內部連接數據庫。 該橋是我們工作的一個重要部分。如果沒有Hydra，工作負載通常在不同的數據庫之間隔離，需要工程師實施緩慢和昂貴的ETL過程。複雜的分析通常是在較舊的數據上運行，每月或每週更新。The Hydra bridge allows for real-time data movement, enabling analytics to be run on fresh data.<p>We make money by charging for Hydra Postgres, which is a Postgres managed service, and Hydra Instance, which attaches Hydra to your existing Postgres database. Pricing is listed on the product pages: <a href=\"https://hydras.io/products/postgres\" rel=\"nofollow\">https://hydras.io/products/postgres</a>和<a href=\"https://hydras.io/products/instance\" rel=\"nofollow\">https://hydras.io/products/instance</a>。<p>關於我們的背景。Joseph Sciarrino - 前PM @ MSFT Azure 開源數據庫團隊。Heroku（W08）和Citus Data（S11）的校友。Jonathan Dance - Director @ Heroku (2011-2021)<p>使用Hydra你可以創建一個你自己設計的數據庫集群。我們很想知道你對創建什麼Hydra集群感興趣。例如，Elasticsearch + Postgres，BigQuery + SingleStore + Postgres，等等。記住--你可以嘗試不同的組合而不需要重寫查詢，因為Hydra在這些其他數據庫上擴展了Postgres。當你把數據庫想成是可互操作的部件時，你就可以有超強的創造力了!"
}