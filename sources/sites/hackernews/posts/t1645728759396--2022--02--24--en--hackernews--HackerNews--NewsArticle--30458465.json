{
  "@type": "NewsArticle",
  "identifier": "2022--02--24--en--hackernews--HackerNews--NewsArticle--30458465",
  "url": "https://news.ycombinator.com/item?id=30458465",
  "headline": "Launch HN: MutableAI (YC W22) – Automatically Clean Jupyter Notebooks Using AI",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "Hi HN, I’m Omar the Founder and CEO of MutableAI (YC W22) (<a href=\"https://mutable.ai\" rel=\"nofollow\">https://mutable.ai</a>). We transform Jupyter notebook code into production-quality Python code using a combination of AI (OpenAI codex) and PL metaprogramming techniques.<p>I'm obsessed with clean code because I've written so much terrible code in the past. I went from being a theoretical physics PhD dropout -&gt; data scientist -&gt; software engineer at Google -&gt; research engineer at DeepMind -&gt; ML engineer at Apple. In that time I've grown to tremendously value code quality. Clean code is not only more maintainable but also more extensible as you can more readily add new features. It even enables you to think thoughts that you may have never considered before.<p>I want to reduce the cost of clean, production-quality code using AI, and am starting with a niche I'm intimately familiar with (Jupyter), because it's particularly prone to bad code. Jupyter notebooks are beloved by data scientists, but notorious for having spaghetti code that is low on readability, hard to maintain, and hard to move into a production codebase or even share with a colleague. That’s why a Kaggle Grandmaster shocked his audience and recommended that they do not use Jupyter notebooks [1].<p>MutableAI allows developers to get the best of both worlds: Jupyter’s easy prototyping and visualization, plus greatly improved quality with our AI product. We also offer a full featured AI autocomplete to help prototyping go faster. I think the quadrant of &quot;easy to develop in&quot; and &quot;easy to create high quality code&quot; has been almost empty, and AI can help fill this gap.<p>Right now there are two ways of manipulating programs: PL techniques for program analysis and transformation, and large scale transformers from OpenAI/DeepMind, which are trained on code treated as text (tokens) and don't look at the tree structure of code (ASTs).  MutableAI combines OpenAI Codex / Copilot with traditional PL analysis (variable lifetimes, scopes, etc.) and statistical filters to identify AST transformations that, when successively applied, produce cleaner code.<p>We use OpenAI's Codex to document and type the code, and for AI autocomplete. We use PL techniques to refactor the code (e.g. extract methods), remove zombie code, and normalize formatting (e.g. remove weird spacing). We use statistical filters to detect opportunities for refactoring, for example when a large grouping of variable lifetimes are suddenly created and destroyed, which can be an opportunity to extract a function.<p>Some of the PL techniques are similar to traditional refactoring tools, but those tools don’t help you decide when and how to refactor. We use AI and stats to do that, as well as to generate names when the new code needs them.<p>A tool that reduces the time to productionize code can be compared to having an extra engineer on staff. If you take this seriously, that’s a pretty big market. Stripe Research claims that developer inefficiency is a $300B problem [2].  Just about every tech company would become more efficient through increased velocity, fewer errors, and the ability to tackle more complex problems. It may even become unthinkable to write software without this sort of tool, the same way most people don't write assembly and use a compiler.<p>You can try the product by visiting our website, <a href=\"https://mutable.ai\" rel=\"nofollow\">https://mutable.ai</a> and creating an account on the setup page <a href=\"https://mutable.ai/setup.html\" rel=\"nofollow\">https://mutable.ai/setup.html</a>. License keys are on the setup page once you’ve signed up (check your mailbox for an email verification link). I’ve bumped up the budget for free accounts temporarily for the day, I hope you enjoy the product !<p>In addition to inviting the HN community to try out the product, I’d love it if you would share any tips for reducing code complexity you’ve come across and of course to hear your ideas about this problem and tools to address it.<p>[1] <a href=\"https://youtu.be/tsGGpe-onZI?t=1067\" rel=\"nofollow\">https://youtu.be/tsGGpe-onZI?t=1067</a><p>[2] <a href=\"https://stripe.com/files/reports/the-developer-coefficient.pdf\" rel=\"nofollow\">https://stripe.com/files/reports/the-developer-coefficient.p...</a>",
  "keywords": [],
  "author": {
    "@type": "Person",
    "name": "oshams",
    "url": "https://news.ycombinator.com/user?id=oshams"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=30458465",
  "sameAs": "https://mutable.ai/",
  "dateCreated": "2022-02-24T18:52:39.396Z",
  "datePublished": "2022-02-24T18:39:07.000Z",
  "dateModified": "2022-02-24T18:52:39.396Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 7
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 0
    }
  ],
  "headline_zh-Hans": "启动HN：MutableAI（YC W22）--使用AI自动清洁Jupyter笔记本",
  "headline_zh-Hant": "啟動HN：MutableAI（YC W22）--使用AI自動清潔Jupyter筆記本",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "嗨，HN，我是MutableAI（YC W22）（<a href=\"https://mutable.ai\" rel=\"nofollow\">https://mutable.ai</a>）的创始人兼CEO奥马尔。我们使用人工智能（OpenAI codex）和PL元编程技术的组合，将Jupyter笔记本代码转化为生产质量的Python代码。<p>我对干净的代码很着迷，因为我过去写了很多糟糕的代码。我从一个理论物理学博士辍学者-&gt；数据科学家-&gt；谷歌的软件工程师-&gt；DeepMind的研究工程师-&gt；苹果的ML工程师。在这段时间里，我越来越重视代码质量。干净的代码不仅更容易维护，而且更容易扩展，因为你可以更容易地添加新的功能。<p>我想用人工智能来降低干净的、生产质量高的代码的成本，并从我非常熟悉的利基市场（Jupyter）开始，因为它特别容易出现不良代码。Jupyter笔记本深受数据科学家的喜爱，但却因有可读性低、难以维护、难以转移到生产代码库或甚至与同事分享的面条状代码而闻名。这就是为什么一位Kaggle大师震惊了他的听众，并建议他们不要使用Jupyter笔记本[1]。<p>MutableAI允许开发人员获得两个世界的最好结果：Jupyter的简单原型设计和可视化，加上我们的AI产品大大提高了质量。我们还提供了一个全功能的AI自动完成功能，以帮助原型设计更快完成。我认为 \"易于开发 \"和 \"易于创建高质量的代码 \"这两个象限几乎是空的，而人工智能可以帮助填补这一空白。用于程序分析和转换的PL技术，以及来自OpenAI/DeepMind的大规模转换器，这些转换器在被视为文本（标记）的代码上进行训练，而不看代码的树状结构（ASTs）。 MutableAI将OpenAI Codex/Copilot与传统的PL分析（变量寿命、作用域等）和统计过滤器结合起来，以确定AST转换，当连续应用时，产生更清洁的代码。<p>我们使用OpenAI的Codex来记录和输入代码，并用于AI自动完成。我们使用PL技术对代码进行重构（例如提取方法），删除僵尸代码，并使格式正常化（例如删除奇怪的间距）。我们使用统计过滤器来检测重构的机会，例如，当一大组变量寿命突然被创建和销毁时，这可能是一个提取函数的机会。<p>一些PL技术类似于传统的重构工具，但那些工具并不能帮助你决定何时以及如何重构。我们使用人工智能和统计来做到这一点，以及在新代码需要时生成名称。<p>一个能够减少代码生产时间的工具，可以比作在员工中多了一个工程师。如果你认真对待这个问题，这就是一个相当大的市场。Stripe Research声称，开发人员的效率低下是一个3000亿美元的问题[2]。 几乎每个科技公司都会通过提高速度、减少错误和解决更复杂问题的能力而变得更有效率。<p>您可以通过访问我们的网站<a href=\"https://mutable.ai\" rel=\"nofollow\">https://mutable.ai</a>并在设置页面<a href=\"https://mutable.ai/setup.html\" rel=\"nofollow\">https://mutable.ai/setup.html</a>上创建一个帐户来试用本产品。一旦你注册了，许可证密钥就在设置页面上（查看你的邮箱是否有电子邮件验证链接）。I’ve bumped up the budget for free accounts temporarily for the day, I hope you enjoy the product !<p>In addition to inviting the HN community to try out the product, I’d love it if you would share any tips for reducing code complexity you’ve come across and of course to hear your ideas about this problem and tools to address it. <p>[1] <a href=\"https://youtu.be/tsGGpe-onZI?t=1067\" rel=\"nofollow\">https://youtu.be/tsGGpe-onZI?t=1067</a><p>[2] <a href=\"https://stripe.com/files/reports/the-developer-coefficient.pdf\" rel=\"nofollow\">https://stripe.com/files/reports/the-developer-coefficient.p...</a>",
  "description_zh-Hant": "嗨，HN，我是MutableAI（YC W22）（<a href=\"https://mutable.ai\" rel=\"nofollow\">https://mutable.ai</a>）的創始人兼CEO奧馬爾。我們使用人工智能（OpenAI codex）和PL元編程技術的組合，將Jupyter筆記本代碼轉化為生產質量的Python代碼。<p>我對乾淨的代碼很著迷，因為我過去寫了很多糟糕的代碼。我從一個理論物理學博士輟學者-&gt；數據科學家-&gt；谷歌的軟件工程師-&gt；DeepMind的研究工程師-&gt；蘋果的ML工程師。在這段時間裡，我越來越重視代碼質量。乾淨的代碼不僅更容易維護，而且更容易擴展，因為你可以更容易地添加新的功能。<p>我想用人工智能來降低乾淨的、生產質量高的代碼的成本，並從我非常熟悉的利基市場（Jupyter）開始，因為它特別容易出現不良代碼。Jupyter筆記本深受數據科學家的喜愛，但卻因有可讀性低、難以維護、難以轉移到生產代碼庫或甚至與同事分享的麵條狀代碼而聞名。這就是為什麼一位Kaggle大師震驚了他的聽眾，並建議他們不要使用Jupyter筆記本[1]。<p>MutableAI允許開發人員獲得兩個世界的最好結果：Jupyter的簡單原型設計和可視化，加上我們的AI產品大大提高了質量。我們還提供了一個全功能的AI自動完成功能，以幫助原型設計更快完成。我認為 \"易於開發 \"和 \"易於創建高質量的代碼 \"這兩個象限幾乎是空的，而人工智能可以幫助填補這一空白。用於程序分析和轉換的PL技術，以及來自OpenAI/DeepMind的大規模轉換器，這些轉換器在被視為文本（標記）的代碼上進行訓練，而不看代碼的樹狀結構（ASTs）。 MutableAI將OpenAI Codex/Copilot與傳統的PL分析（變量壽命、作用域等）和統計過濾器結合起來，以確定AST轉換，當連續應用時，產生更清潔的代碼。<p>我們使用OpenAI的Codex來記錄和輸入代碼，並用於AI自動完成。我們使用PL技術對代碼進行重構（例如提取方法），刪除殭屍代碼，並使格式正常化（例如刪除奇怪的間距）。我們使用統計過濾器來檢測重構的機會，例如，當一大組變量壽命突然被創建和銷燬時，這可能是一個提取函數的機會。<p>一些PL技術類似於傳統的重構工具，但那些工具並不能幫助你決定何時以及如何重構。我們使用人工智能和統計來做到這一點，以及在新代碼需要時生成名稱。<p>一個能夠減少代碼生產時間的工具，可以比作在員工中多了一個工程師。如果你認真對待這個問題，這就是一個相當大的市場。Stripe Research聲稱，開發人員的效率低下是一個3000億美元的問題[2]。 幾乎每個科技公司都會通過提高速度、減少錯誤和解決更復雜問題的能力而變得更有效率。<p>您可以通過訪問我們的網站<a href=\"https://mutable.ai\" rel=\"nofollow\">https://mutable.ai</a>並在設置頁面<a href=\"https://mutable.ai/setup.html\" rel=\"nofollow\">https://mutable.ai/setup.html</a>上創建一個帳戶來試用本產品。一旦你註冊了，許可證密鑰就在設置頁面上（查看你的郵箱是否有電子郵件驗證鏈接）。I’ve bumped up the budget for free accounts temporarily for the day, I hope you enjoy the product !<p>In addition to inviting the HN community to try out the product, I’d love it if you would share any tips for reducing code complexity you’ve come across and of course to hear your ideas about this problem and tools to address it. <p>[1] <a href=\"https://youtu.be/tsGGpe-onZI?t=1067\" rel=\"nofollow\">https://youtu.be/tsGGpe-onZI?t=1067</a><p>[2] <a href=\"https://stripe.com/files/reports/the-developer-coefficient.pdf\" rel=\"nofollow\">https://stripe.com/files/reports/the-developer-coefficient.p...</a>"
}