{
  "@type": "NewsArticle",
  "identifier": "2022--08--08--en--hackernews--HackerNews--NewsArticle--32384662",
  "url": "https://news.ycombinator.com/item?id=32384662",
  "headline": "Show HN: Build for any cloud with the same code",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "We have been working on Multy, an open-source[1] tool that enables developers to deploy and switch to any cloud - AWS, Azure and GCP for now.<p>We realized that, even when using Terraform, writing infrastructure code is very different for each cloud provider. This means changing clouds or deploying the same infrastructure in multiple clouds requires rewriting the same thing multiple times. And even though most core resources have the same functionality, developers need to learn a new provider and all its nuances when choosing a new cloud. This is why we built Multy.<p>Multy is currently available as a Terraform provider. You can write cloud-agnostic code and then just choose which cloud you want to deploy to. Multy will then call the cloud provider APIs on your behalf. For example, the following Terraform code deploys a virtual network in AWS and can be easily changed to deploy to Azure or GCP:<p>```\nresource &quot;multy_virtual_network&quot; &quot;vn&quot; {<p><pre><code>  cloud      = &quot;aws&quot; // or azure, or gcp\n\n  name       = &quot;multy_vn&quot;\n  cidr_block = &quot;10.0.0.0/16&quot;\n  location   = &quot;eu_west_1&quot;</code></pre>\n}  \n```<p>Our goal is to expose any configuration that is common across all clouds, but there’s always specific features that are not available in all of them. For example, if you want a very specific AWS CPU for your Virtual Machine or use a region that is only available in GCP. To enable this, we implemented overrides [2] - a way to configure the underlying infrastructure for cloud-specific purposes. You can also mix other Terraform code that uses the cloud-specific providers with Multy. While this makes you somewhat locked in, having your 80% or 90% of your infrastructure  cloud-agnostic is still very powerful.<p>You can see more complex examples in our documentation - <a href=\"https://docs.multy.dev/examples/\" rel=\"nofollow\">https://docs.multy.dev/examples/</a>.<p>We’re still in early days and looking for feedback from other developers on our approach. Let us know what you think!<p>[1] <a href=\"https://github.com/multycloud/multy\" rel=\"nofollow\">https://github.com/multycloud/multy</a><p>[2] <a href=\"https://docs.multy.dev/overrides\" rel=\"nofollow\">https://docs.multy.dev/overrides</a>",
  "keywords": [
    "Show HN"
  ],
  "genre": "Show HN",
  "author": {
    "@type": "Person",
    "name": "goncalo-r",
    "url": "https://news.ycombinator.com/user?id=goncalo-r"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=32384662",
  "sameAs": "https://github.com/multycloud/multy",
  "dateCreated": "2022-08-08T14:27:08.737Z",
  "datePublished": "2022-08-08T12:27:25.000Z",
  "dateModified": "2022-08-08T14:27:08.737Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 5
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 0
    }
  ],
  "headline_zh-Hans": "Show HN: 用相同的代码为任何云构建\n",
  "headline_zh-Hant": "Show HN: 用相同的代碼為任何雲構建\n",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "We have been working on Multy, an open-source[1] tool that enables developers to deploy and switch to any cloud - AWS, Azure and GCP for now.<p>We realized that, even when using Terraform, writing infrastructure code is very different for each cloud provider. This means changing clouds or deploying the same infrastructure in multiple clouds requires rewriting the same thing multiple times. And even though most core resources have the same functionality, developers need to learn a new provider and all its nuances when choosing a new cloud. This is why we built Multy.<p>Multy is currently available as a Terraform provider. You can write cloud-agnostic code and then just choose which cloud you want to deploy to. Multy will then call the cloud provider APIs on your behalf. For example, the following Terraform code deploys a virtual network in AWS and can be easily changed to deploy to Azure or GCP:<p>```\nresource &quot;multy_virtual_network&quot; &quot;vn&quot; {<p><pre><code> cloud = &quot;aws&quot; // or azure, or gcp\n\n  name = &quot;multy_vn&quot;\n  cidr_block = &quot;10.0.0.0/16&quot;\n  location = &quot;eu_west_1&quot;</code></pre>\n}  \n```<p>Our goal is to expose any configuration that is common across all clouds, but there’s always specific features that are not available in all of them. For example, if you want a very specific AWS CPU for your Virtual Machine or use a region that is only available in GCP. To enable this, we implemented overrides [2] - a way to configure the underlying infrastructure for cloud-specific purposes. You can also mix other Terraform code that uses the cloud-specific providers with Multy. While this makes you somewhat locked in, having your 80% or 90% of your infrastructure cloud-agnostic is still very powerful.<p>You can see more complex examples in our documentation - <a href=\"https://docs.multy.dev/examples/\" rel=\"nofollow\">https://docs.multy.dev/examples/</a>.<p>We’re still in early days and looking for feedback from other developers on our approach. Let us know what you think!<p>[1] <a href=\"https://github.com/multycloud/multy\" rel=\"nofollow\">https://github.com/multycloud/multy</a><p>[2] <a href=\"https://docs.multy.dev/overrides\" rel=\"nofollow\">https://docs.multy.dev/overrides</a>\n",
  "description_zh-Hant": "We have been working on Multy, an open-source[1] tool that enables developers to deploy and switch to any cloud - AWS, Azure and GCP for now.<p>We realized that, even when using Terraform, writing infrastructure code is very different for each cloud provider. This means changing clouds or deploying the same infrastructure in multiple clouds requires rewriting the same thing multiple times. And even though most core resources have the same functionality, developers need to learn a new provider and all its nuances when choosing a new cloud. This is why we built Multy.<p>Multy is currently available as a Terraform provider. You can write cloud-agnostic code and then just choose which cloud you want to deploy to. Multy will then call the cloud provider APIs on your behalf. For example, the following Terraform code deploys a virtual network in AWS and can be easily changed to deploy to Azure or GCP:<p>```\nresource &quot;multy_virtual_network&quot; &quot;vn&quot; {<p><pre><code> cloud = &quot;aws&quot; // or azure, or gcp\n\n  name = &quot;multy_vn&quot;\n  cidr_block = &quot;10.0.0.0/16&quot;\n  location = &quot;eu_west_1&quot;</code></pre>\n}  \n```<p>Our goal is to expose any configuration that is common across all clouds, but there’s always specific features that are not available in all of them. For example, if you want a very specific AWS CPU for your Virtual Machine or use a region that is only available in GCP. To enable this, we implemented overrides [2] - a way to configure the underlying infrastructure for cloud-specific purposes. You can also mix other Terraform code that uses the cloud-specific providers with Multy. While this makes you somewhat locked in, having your 80% or 90% of your infrastructure cloud-agnostic is still very powerful.<p>You can see more complex examples in our documentation - <a href=\"https://docs.multy.dev/examples/\" rel=\"nofollow\">https://docs.multy.dev/examples/</a>.<p>We’re still in early days and looking for feedback from other developers on our approach. Let us know what you think!<p>[1] <a href=\"https://github.com/multycloud/multy\" rel=\"nofollow\">https://github.com/multycloud/multy</a><p>[2] <a href=\"https://docs.multy.dev/overrides\" rel=\"nofollow\">https://docs.multy.dev/overrides</a>\n"
}