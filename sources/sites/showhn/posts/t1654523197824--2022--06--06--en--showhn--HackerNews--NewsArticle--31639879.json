{
  "@type": "NewsArticle",
  "identifier": "2022--06--06--en--showhn--HackerNews--NewsArticle--31639879",
  "url": "https://news.ycombinator.com/item?id=31639879",
  "headline": "Show HN: WunderGraph – open-source API Developer Toolkit",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "Dear HN Community. We're Bjorn, Dustin, Stefan &amp; Jens, the founders of WunderGraph.<p>More than two years ago, Jens started WunderGraph as a Side Project.\nThe initial idea was to solve the problem of integrating multiple disparate DataSources into a single, unified API Layer.\nWhile solving this problem, Jens realized that his mental model of APIs was wrong.\nMost API tools treat APIs as abstract things or just endpoints, in a very imperative way.\nAt some point, he realized that there's a better model to think about APIs:\nAPIs are dependencies and we should treat them in a declarative way!<p>And that's how the idea of the &quot;Package Manager for APIs&quot;[1] came to be:\nWunderGraph is an API Developer toolkit which allows you to import and export APIs, just like npm packages.\nThis is possible because every WunderGraph project generates a static, conflict-free and versionable artifact.<p>It shouldn't take days to add a new 3rd party API to your API layer,\nwith WunderGraph, this is possible in seconds.<p>WunderGraph lets you define your API dependencies in a declarative way.\nThe whole &quot;Graph&quot; of API dependencies is represented as an unified GraphQL Schema.\nMeta-data like API credentials, can be configured with our TypeScript SDK.\nAPI Operations are defined as regular GraphQL Operations.\nCustom middleware / business logic can be written using TypeScript.<p>Finally, WunderGraph generates a Gateway + Client(s).\nGateway and clients communicate via JSON-RPC.\nWe call this approach &quot;Compile-time&quot; GraphQL queries.\nThe client is 100% TypeSafe.\nThe Gateway handles Authentication, Authorization, Caching, Middleware, etc...<p>WunderGraph gives you the Developer Experience of working with a single, monolithic API layer,\nalthough you're using many different internal and external Services and Databases behind the scenes.<p>WunderGraph Supports any OpenID Connect compliant IDP for Authentication,\nS3 for file storage,\nREST (OpenAPI), GraphQL &amp; Apollo Federation for APIs\nand PostgreSQL, MySQL, SQLite, SQLServer, Planetscale and MongoDB for the data-layer.<p>Today, we're happy to announce that WunderGraph is finally Open Source!\nCheck out the Monorepo[2] on GitHub. If you like our ambitions, give us a star!\nYou can run WunderGraph locally and air-gapped, no strings attached.<p>There's also a more extensive release post on our blog[3].\nHave a look at the examples[4], we're keen to hear your opinion!<p>[1]: https://hub.wundergraph.com/start<p>[2]: https://github.com/wundergraph/wundergraph<p>[3]: https://wundergraph.com/blog/wundergraph_the_next_generation_api_developer_platform_is_open_source<p>[4]: https://github.com/wundergraph/wundergraph#getting-started",
  "keywords": [
    "Show HN"
  ],
  "genre": "Show HN",
  "author": {
    "@type": "Person",
    "name": "jensneuse",
    "url": "https://news.ycombinator.com/user?id=jensneuse"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=31639879",
  "sameAs": "https://news.ycombinator.com/item?id=31639879",
  "dateCreated": "2022-06-06T13:46:37.824Z",
  "datePublished": "2022-06-06T12:59:01.000Z",
  "dateModified": "2022-06-06T13:46:37.824Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 10
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 5
    }
  ],
  "headline_zh-Hans": "Show HN: WunderGraph - 开源的API开发者工具包\n",
  "headline_zh-Hant": "Show HN: WunderGraph - 開源的API開發者工具包\n",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "亲爱的HN社区。我们是Bjorn、Dustin、Stefan &amp; Jens，WunderGraph的创始人。<p>两年多以前，Jens开始将WunderGraph作为一个副业项目。\n最初的想法是解决将多个不同的数据源整合到一个单一的、统一的API层的问题。\n在解决这个问题的时候，Jens意识到他对API的心理模型是错误的。\n大多数API工具都把API当作抽象的东西，或者只是端点，以一种非常强制性的方式。\n在某些时候，他意识到有一个更好的模型来思考API。\nAPI是一种依赖关系，我们应该以声明的方式对待它们！<p>这就是&quot;API的包管理器&quot;[1]的想法的由来。\nWunderGraph是一个API开发者工具包，它允许你导入和导出API，就像npm包一样。\n这是可能的，因为每个WunderGraph项目都会生成一个静态的、无冲突的和可版本的工件。<p>在你的API层中添加一个新的第三方API不应该花费数天时间。\n<p>WunderGraph让你以声明的方式定义你的API依赖性。\n整个API依赖关系的 \"图 \"被表示为一个统一的GraphQL模式。\n元数据，如API证书，可以用我们的TypeScript SDK来配置。\nAPI操作被定义为常规的GraphQL操作。\n自定义中间件/业务逻辑可以使用TypeScript编写。<p>最后，WunderGraph生成一个网关+客户端（s）。\n网关和客户端通过JSON-RPC进行通信。\n我们称这种方法为&quot;编译时间&quot; GraphQL查询。\n客户端是100%的类型安全。\n网关处理认证、授权、缓存、中间件等......<p>WunderGraph为你提供了与单一的、单体的API层合作的开发者体验。\n<p>WunderGraph支持任何符合OpenID Connect的IDP认证。\nS3用于文件存储。\n支持任何符合OpenID Connect标准的IDP用于认证，S3用于文件存储，REST（OpenAPI），GraphQL和Apollo Federation用于API\n<p>今天，我们很高兴地宣布，WunderGraph终于开源了！请看Monorepo[2]。\n请查看GitHub上的Monorepo[2]。如果你喜欢我们的雄心壮志，请给我们一颗星!\n你可以在本地运行WunderGraph，也可以在空中加注，没有任何附加条件。<p>在我们的博客[3]上也有一个更广泛的发布帖子。\n看看这些例子[4]，我们很想听听你的意见！<p>[1]: https://hub.wundergraph.com/start<p>[2]: https://github.com/wundergraph/wundergraph<p>[3]: https://wundergraph.com/blog/wundergraph_the_next_generation_api_developer_platform_is_open_source<p>[4]: https://github.com/wundergraph/wundergraph#getting-started\n",
  "description_zh-Hant": "親愛的HN社區。我們是Bjorn、Dustin、Stefan &amp; Jens，WunderGraph的創始人。<p>兩年多以前，Jens開始將WunderGraph作為一個副業項目。\n最初的想法是解決將多個不同的數據源整合到一個單一的、統一的API層的問題。\n在解決這個問題的時候，Jens意識到他對API的心理模型是錯誤的。\n大多數API工具都把API當作抽象的東西，或者只是端點，以一種非常強制性的方式。\n在某些時候，他意識到有一個更好的模型來思考API。\nAPI是一種依賴關係，我們應該以聲明的方式對待它們！<p>這就是&quot;API的包管理器&quot;[1]的想法的由來。\nWunderGraph是一個API開發者工具包，它允許你導入和導出API，就像npm包一樣。\n這是可能的，因為每個WunderGraph項目都會生成一個靜態的、無衝突的和可版本的工件。<p>在你的API層中添加一個新的第三方API不應該花費數天時間。\n<p>WunderGraph讓你以聲明的方式定義你的API依賴性。\n整個API依賴關係的 \"圖 \"被表示為一個統一的GraphQL模式。\n元數據，如API證書，可以用我們的TypeScript SDK來配置。\nAPI操作被定義為常規的GraphQL操作。\n自定義中間件/業務邏輯可以使用TypeScript編寫。<p>最後，WunderGraph生成一個網關+客戶端（s）。\n網關和客戶端通過JSON-RPC進行通信。\n我們稱這種方法為&quot;編譯時間&quot; GraphQL查詢。\n客戶端是100%的類型安全。\n網關處理認證、授權、緩存、中間件等......<p>WunderGraph為你提供了與單一的、單體的API層合作的開發者體驗。\n<p>WunderGraph支持任何符合OpenID Connect的IDP認證。\nS3用於文件存儲。\n支持任何符合OpenID Connect標準的IDP用於認證，S3用於文件存儲，REST（OpenAPI），GraphQL和Apollo Federation用於API\n<p>今天，我們很高興地宣佈，WunderGraph終於開源了！請看Monorepo[2]。\n請查看GitHub上的Monorepo[2]。如果你喜歡我們的雄心壯志，請給我們一顆星!\n你可以在本地運行WunderGraph，也可以在空中加註，沒有任何附加條件。<p>在我們的博客[3]上也有一個更廣泛的發佈帖子。\n看看這些例子[4]，我們很想聽聽你的意見！<p>[1]: https://hub.wundergraph.com/start<p>[2]: https://github.com/wundergraph/wundergraph<p>[3]: https://wundergraph.com/blog/wundergraph_the_next_generation_api_developer_platform_is_open_source<p>[4]: https://github.com/wundergraph/wundergraph#getting-started\n"
}