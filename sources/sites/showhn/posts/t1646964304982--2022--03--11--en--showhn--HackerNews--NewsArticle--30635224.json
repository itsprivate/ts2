{
  "@type": "NewsArticle",
  "identifier": "2022--03--11--en--showhn--HackerNews--NewsArticle--30635224",
  "url": "https://news.ycombinator.com/item?id=30635224",
  "headline": "Show HN: PostgreSQL in a virtual private cloud on Heroku",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "Having used Heroku extensively at my previous job I became aware of what I perceived to be a major drawback of database add-ons in Heroku's marketplace: they all seem to allow connections directly from the public internet (or at least from anywhere on AWS's network) for the sake of convenience for app developers (and probably the add-on developers too!). That way, an app developer need only to retrieve the DB connection URL from the corresponding config variable (i.e. environment variable) in application code to connect to the DB. But leaving DB servers exposed to the whole world seems a clear violation of security best practices.<p>Heroku has a solution to this problem, of course: Private Spaces. In a private space, your app's dynos and some of its add-ons are hosted together within a virtual private cloud (VPC) that is firewalled off from the rest of the internet. It comes with a couple important caveats, however: you have to have a Heroku Enterprise account (which is <i>expensive</i> and requires you to give up the option to use some of the cheaper dyno types) and it only supports a handful of select add-ons (only first party, it seems) to be sequestered within the app's VPC.<p>My new add-on service aims to provide an alternative that sits somewhere between the extreme simplicity and <i>relative</i> inexpensiveness of DB add-ons running on the Common Runtime and the considerably more expensive Private Spaces while offering a similar level of security as Private Spaces. It's called Borealis Isolated Postgres and its in beta now (the beta is free): https://elements.heroku.com/addons/borealis-pg<p>With my add-on, each DB server is in a PostgreSQL-compatible Amazon Aurora cluster isolated within its own VPC. All connections to a DB server are required to be forwarded through an SSH server that is dedicated to that VPC.<p>So how does an app connect? I wrote a Heroku buildpack to take care of that seamlessly (https://github.com/OldSneerJaw/heroku-buildpack-borealis-pg-ssh). When you add the buildpack to an app, it automatically identifies any config variables from my add-on and sets up a persistent SSH local port forwarding connection to the database server using autossh. The app can then connect to the database via a standard PostgreSQL client library using the add-on's DATABASE_URL config variable without having to be aware of the SSH connection. In other words, application code doesn't have to change at all to support it. If the app works with the first-party Heroku Postgres add-on, it should work with my add-on, too.<p>Connecting from your local machine or a CI server to a database server is also straightforward. I wrote a Heroku CLI plugin (https://www.npmjs.com/package/borealis-pg-cli) with a couple simple commands to either run DB scripts (e.g. DB migrations to be executed during CI/CD) or open a persistent tunnel locally (e.g. for ad hoc data administration). It also has a few commands for managing which PostgreSQL extensions/modules are installed since the app user does not have privileges to do so in SQL (remember, it's a <i>managed</i> DB service).<p>During the beta all add-ons are provisioned in a multi-tenant environment to keep costs down, but when released into general availability, each premium add-on will operate in its own fully isolated VPC that is only accessible via private SSH server. I have not yet decided whether I will continue to provide a free, multi-tenant option after GA, though.<p>If you're already a Heroku user, you can provision the add-on directly (for free) here: https://dashboard.heroku.com/provision-addon?addonServiceId=de00ba11-8b65-47cd-b099-9605703a6e30&amp;planId=beb31eff-e2df-4750-b73a-29542c3dc79f<p>Docs are here: https://devcenter.heroku.com/articles/borealis-pg#getting-started<p>Let me know what you think!",
  "keywords": [
    "Show HN"
  ],
  "genre": "Show HN",
  "author": {
    "@type": "Person",
    "name": "borealis-dev",
    "url": "https://news.ycombinator.com/user?id=borealis-dev"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=30635224",
  "sameAs": "https://news.ycombinator.com/item?id=30635224",
  "dateCreated": "2022-03-11T02:05:04.982Z",
  "datePublished": "2022-03-11T01:55:33.000Z",
  "dateModified": "2022-03-11T02:05:04.982Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 1
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 1
    }
  ],
  "headline_zh-Hans": "Show HN: 在Heroku的虚拟私有云中的PostgreSQL",
  "headline_zh-Hant": "Show HN: 在Heroku的虛擬私有云中的PostgreSQL",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "我在以前的工作中广泛使用Heroku，我意识到我认为Heroku市场上的数据库插件的一个主要缺点：它们似乎都允许直接从公共互联网（或至少从AWS网络的任何地方）连接，以方便应用程序开发人员（可能也包括插件开发人员！）。这样一来，应用程序开发人员只需要在应用程序代码中从相应的配置变量（即环境变量）中获取DB连接的URL，就可以连接到DB。但是，让数据库服务器暴露在整个世界上，似乎明显违反了安全的最佳实践。<p>当然，Heroku有一个解决这个问题的办法。私有空间。In a private space, your app's dynos and some of its add-ons are hosted together within a virtual private cloud (VPC) that is firewalled off from the rest of the internet. It comes with a couple important caveats, however: you have to have a Heroku Enterprise account (which is <i>expensive</i> and requires you to give up the option to use some of the cheaper dyno types) and it only supports a handful of select add-ons (only first party, it seems) to be sequestered within the app's VPC. <p>我的新附加组件服务旨在提供一种替代方案，它介于在通用运行时上运行的DB附加组件的极端简单性和<i>相对</i>不透明性之间，同时提供与Private Spaces类似的安全水平。它被称为Borealis Isolated Postgres，现在处于测试阶段（测试版是免费的）：https://elements.heroku.com/addons/borealis-pg<p>使用我的附加组件，每个DB服务器都在一个PostgreSQL兼容的Amazon Aurora集群中，被隔离在自己的VPC中。所有对DB服务器的连接都需要通过专用于该VPC的SSH服务器来转发。<p>那么应用程序如何连接呢？我写了一个Heroku buildpack来无缝处理这个问题（https://github.com/OldSneerJaw/heroku-buildpack-borealis-pg-ssh）。当你将构建包添加到一个应用程序时，它会自动识别来自我的附加组件的任何配置变量，并使用autossh设置一个持久的SSH本地端口转发连接到数据库服务器。然后，应用程序可以通过标准的PostgreSQL客户端库，使用附加组件的DATABASE_URL配置变量连接到数据库，而不需要知道SSH连接。换句话说，应用程序的代码根本不需要改变来支持它。如果应用程序能与第一方的Heroku Postgres插件一起使用，那么它也应该能与我的插件一起使用。<p>从本地机器或CI服务器连接到数据库服务器也很简单。我写了一个Heroku CLI插件（https://www.npmjs.com/package/borealis-pg-cli），其中有几个简单的命令，可以运行数据库脚本（例如，在CI/CD期间执行的数据库迁移）或在本地打开一个持久的隧道（例如，用于临时的数据管理）。<p>在测试期间，所有附加组件都是在多租户环境中配置的，以降低成本，但当发布到普遍可用时，每个高级附加组件将在自己完全隔离的VPC中运行，只能通过私人SSH服务器访问。<p>如果你已经是Heroku的用户，你可以在这里直接（免费）配置附加组件：https://dashboard.heroku.com/provision-addon?addonServiceId=de00ba11-8b65-47cd-b099-9605703a6e30&amp;planId=beb31eff-e2df-4750-b73a-29542c3dc79f<p>文档在这里：https://devcenter.heroku.com/articles/borealis-pg#getting-started<p>让我知道你的想法!",
  "description_zh-Hant": "我在以前的工作中廣泛使用Heroku，我意識到我認為Heroku市場上的數據庫插件的一個主要缺點：它們似乎都允許直接從公共互聯網（或至少從AWS網絡的任何地方）連接，以方便應用程序開發人員（可能也包括插件開發人員！）。這樣一來，應用程序開發人員只需要在應用程序代碼中從相應的配置變量（即環境變量）中獲取DB連接的URL，就可以連接到DB。但是，讓數據庫服務器暴露在整個世界上，似乎明顯違反了安全的最佳實踐。<p>當然，Heroku有一個解決這個問題的辦法。私有空間。In a private space, your app's dynos and some of its add-ons are hosted together within a virtual private cloud (VPC) that is firewalled off from the rest of the internet. It comes with a couple important caveats, however: you have to have a Heroku Enterprise account (which is <i>expensive</i> and requires you to give up the option to use some of the cheaper dyno types) and it only supports a handful of select add-ons (only first party, it seems) to be sequestered within the app's VPC. <p>我的新附加組件服務旨在提供一種替代方案，它介於在通用運行時上運行的DB附加組件的極端簡單性和<i>相對</i>不透明性之間，同時提供與Private Spaces類似的安全水平。它被稱為Borealis Isolated Postgres，現在處於測試階段（測試版是免費的）：https://elements.heroku.com/addons/borealis-pg<p>使用我的附加組件，每個DB服務器都在一個PostgreSQL兼容的Amazon Aurora集群中，被隔離在自己的VPC中。所有對DB服務器的連接都需要通過專用於該VPC的SSH服務器來轉發。<p>那麼應用程序如何連接呢？我寫了一個Heroku buildpack來無縫處理這個問題（https://github.com/OldSneerJaw/heroku-buildpack-borealis-pg-ssh）。當你將構建包添加到一個應用程序時，它會自動識別來自我的附加組件的任何配置變量，並使用autossh設置一個持久的SSH本地端口轉發連接到數據庫服務器。然後，應用程序可以通過標準的PostgreSQL客戶端庫，使用附加組件的DATABASE_URL配置變量連接到數據庫，而不需要知道SSH連接。換句話說，應用程序的代碼根本不需要改變來支持它。如果應用程序能與第一方的Heroku Postgres插件一起使用，那麼它也應該能與我的插件一起使用。<p>從本地機器或CI服務器連接到數據庫服務器也很簡單。我寫了一個Heroku CLI插件（https://www.npmjs.com/package/borealis-pg-cli），其中有幾個簡單的命令，可以運行數據庫腳本（例如，在CI/CD期間執行的數據庫遷移）或在本地打開一個持久的隧道（例如，用於臨時的數據管理）。<p>在測試期間，所有附加組件都是在多租戶環境中配置的，以降低成本，但當發佈到普遍可用時，每個高級附加組件將在自己完全隔離的VPC中運行，只能通過私人SSH服務器訪問。<p>如果你已經是Heroku的用戶，你可以在這裡直接（免費）配置附加組件：https://dashboard.heroku.com/provision-addon?addonServiceId=de00ba11-8b65-47cd-b099-9605703a6e30&amp;planId=beb31eff-e2df-4750-b73a-29542c3dc79f<p>文檔在這裡：https://devcenter.heroku.com/articles/borealis-pg#getting-started<p>讓我知道你的想法!"
}