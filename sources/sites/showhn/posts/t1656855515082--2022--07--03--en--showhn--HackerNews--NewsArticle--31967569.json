{
  "@type": "NewsArticle",
  "identifier": "2022--07--03--en--showhn--HackerNews--NewsArticle--31967569",
  "url": "https://news.ycombinator.com/item?id=31967569",
  "headline": "Show HN: I have built a code library for Flutter projects",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "As a Flutter fan since 2019, the number of mobile and web apps I developed with Flutter grew over the years. A nice side effect was that over time, a library of reusable widgets emerged that were often useful in my future projects.<p>For example, there's the DashedPathPainter, which converts any path to a dashed path. Similarly, there's the AnimatedBorderPainter, which adds an animated border to its child, similar to the Trim Path feature from Adobe AfterEffects. Or the ChatBubble, inspired by WhatsApp and Telegram, which might be useful in an app with a chat function.<p>I built many of these widgets from scratch because I didn't want to add another package to my pubspec.yaml for a single function. Of course, I also use packages for dependency injection, state management, or as an add-on for functional programming. But I've never been a fan of adding another dependency to my project, just for a few helper functions or a single widget.<p>I thought that maybe I'm not the only Flutter developer in this situation. So I came up with the idea for Flutter Code Snippets: a simple code library for Flutter widgets, entire screens, as well as all kinds of helper functions. You can search for the right component, copy the code and paste it into your project. Done! At least that's how simple I imagine it to be ;)<p>Since I had already built a small library from my existing projects, I still had to build the frontend (a web app built with Flutter), add authentication and a database (Firestore), integrate a payment flow (Stripe) and write some backend logic (Google Cloud Functions).<p>The result can be seen at https://flutter-code-snippets.web.app.<p>I'm now at a point where I've completed all the basic work I wanted to do, and I'm looking for another round of feedback. I'd love for you guys to check it out and let me know what you think.<p>Thanks!",
  "keywords": [
    "Show HN"
  ],
  "genre": "Show HN",
  "author": {
    "@type": "Person",
    "name": "hnnngwdlch",
    "url": "https://news.ycombinator.com/user?id=hnnngwdlch"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=31967569",
  "sameAs": "https://news.ycombinator.com/item?id=31967569",
  "dateCreated": "2022-07-03T13:38:35.082Z",
  "datePublished": "2022-07-03T13:30:12.000Z",
  "dateModified": "2022-07-03T13:38:35.082Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 1
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 0
    }
  ],
  "headline_zh-Hans": "Show HN: 我已经为Flutter项目建立了一个代码库\n",
  "headline_zh-Hant": "Show HN: 我已經為Flutter項目建立了一個代碼庫\n",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "作为2019年以来的Flutter粉丝，这些年我用Flutter开发的移动和网络应用的数量不断增加。一个很好的副作用是，随着时间的推移，出现了一个可重复使用的部件库，这些部件在我未来的项目中往往很有用。<p>例如，有DashedPathPainter，它将任何路径转换为虚线路径。同样，还有AnimatedBorderPainter，它为它的孩子添加一个动画边界，类似于Adobe AfterEffects的Trim Path功能。还有ChatBubble，它的灵感来自WhatsApp和Telegram，在具有聊天功能的应用程序中可能很有用。<p>我从头开始构建了许多这些部件，因为我不想为一个单一的功能在我的pubspec.yaml中添加另一个包。当然，我也使用包来进行依赖注入、状态管理，或者作为函数式编程的附加功能。但我从来都不喜欢在我的项目中添加另一个依赖关系，只是为了几个辅助函数或一个小部件。<p>我想，也许我不是唯一有这种情况的Flutter开发者。所以我想到了Flutter代码片段的想法：一个简单的代码库，用于Flutter小部件、整个屏幕以及各种辅助功能。您可以搜索合适的组件，复制代码并将其粘贴到您的项目中。完成了! 至少我想象中是这么简单;)<p>由于我已经从我现有的项目中建立了一个小的库，我仍然需要建立前端（一个用Flutter建立的网络应用程序），添加认证和数据库（Firestore），集成一个支付流程（Stripe），并编写一些后台逻辑（Google Cloud Functions）。<p>结果可以在https://flutter-code-snippets.web.app。<p>我现在已经完成了所有我想做的基本工作，我正在寻找另一轮的反馈。我希望你们能检查一下，并让我知道你们的想法。<p>谢谢!\n",
  "description_zh-Hant": "作為2019年以來的Flutter粉絲，這些年我用Flutter開發的移動和網絡應用的數量不斷增加。一個很好的副作用是，隨著時間的推移，出現了一個可重複使用的部件庫，這些部件在我未來的項目中往往很有用。<p>例如，有DashedPathPainter，它將任何路徑轉換為虛線路徑。同樣，還有AnimatedBorderPainter，它為它的孩子添加一個動畫邊界，類似於Adobe AfterEffects的Trim Path功能。還有ChatBubble，它的靈感來自WhatsApp和Telegram，在具有聊天功能的應用程序中可能很有用。<p>我從頭開始構建了許多這些部件，因為我不想為一個單一的功能在我的pubspec.yaml中添加另一個包。當然，我也使用包來進行依賴注入、狀態管理，或者作為函數式編程的附加功能。但我從來都不喜歡在我的項目中添加另一個依賴關係，只是為了幾個輔助函數或一個小部件。<p>我想，也許我不是唯一有這種情況的Flutter開發者。所以我想到了Flutter代碼片段的想法：一個簡單的代碼庫，用於Flutter小部件、整個屏幕以及各種輔助功能。您可以搜索合適的組件，複製代碼並將其粘貼到您的項目中。完成了! 至少我想象中是這麼簡單;)<p>由於我已經從我現有的項目中建立了一個小的庫，我仍然需要建立前端（一個用Flutter建立的網絡應用程序），添加認證和數據庫（Firestore），集成一個支付流程（Stripe），並編寫一些後臺邏輯（Google Cloud Functions）。<p>結果可以在https://flutter-code-snippets.web.app。<p>我現在已經完成了所有我想做的基本工作，我正在尋找另一輪的反饋。我希望你們能檢查一下，並讓我知道你們的想法。<p>謝謝!\n"
}