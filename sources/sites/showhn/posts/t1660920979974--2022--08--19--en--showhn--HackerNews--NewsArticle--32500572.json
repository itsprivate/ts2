{
  "@type": "NewsArticle",
  "identifier": "2022--08--19--en--showhn--HackerNews--NewsArticle--32500572",
  "url": "https://news.ycombinator.com/item?id=32500572",
  "headline": "Show HN: Modifying Clang for a Safer, More Explicit C++",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "Edit: I somehow managed to post a link that shows the commit out of my repo, the correct link is\n<a href=\"https://github.com/compiler-devel/llvm-project/commit/cfd497fadb8bae4c5428f40ea50cfc760649afa4\" rel=\"nofollow\">https://github.com/compiler-devel/llvm-project/commit/cfd497...</a><p>Modified C++<p>Inspired by the paper &quot;Some Were Meant for C&quot; by Stephen Kell, I decided to show that it's possible to iterate C++ to be safer, more explicit, and less error-prone.<p>Here's a possible starting point: I didn't invent a new language or compiler, but took the world's best compiler, clang, and modified it to begin iterating towards a new furture of C++. Naming things is hard, so I call this 'Modified C++'. Some of the following could be implemented as tooling in a linter or checker, but the idea is to update the compiler directly. I also wanted to learn more about clang. This compiler needs a flag to enable/disable this functionality so that existing library code can be used with a 'diagnostic ignored' pragma.<p>You can build clang using the normal non-bootstrap process and you'll be left with a clang that compiles C++ but with the following modifications:<p><pre><code>     - All basic types (excluding pointers and references) are const by\n     default and may be marked 'mutable' to allow them to be changed after\n     declaration\n     - Lambda capture lists must be explicit (no [&amp;] or [=], by themselves)\n     - Braces are required for conditional statements, case and default\n     statements within switches, and loops\n     - Implicit conversions to bool are prohibited (e.g., pointers must be\n     compared against nullptr/NULL)\n     - No goto support\n     - Explicit 'rule of six' for classes must be programmer-implemented\n     (default, copy, and move c'tors, copy and move assignment, d'tor)\n     - No C style casts\n\n</code></pre>\nHere's an example program that's valid in Modified C++:<p><pre><code>    mutable int main(int, char**)\n    {\n      mutable int x = 0;\n      return x;\n    }\n\n\n    Here's another that will fail to compile:\n\n\n    mutable int main(int, char**)\n    {\n      int x = 1;\n      x = 0;  // x is constant\n      return x;\n    }\n\n</code></pre>\nI'd like your feedback. Future changes I'm thinking about are:<p><pre><code>     - feature flag for modified c++ to enable/disable with 'diagnostic ignored'\n     pragma, to support existing headers and libraries\n     - support enum classes only\n     - constructor declarations are explicit by default\n     - namespaces within classes\n     - normalize lambda and free function syntax\n     - your ideas here</code></pre>",
  "keywords": [
    "Show HN"
  ],
  "genre": "Show HN",
  "author": {
    "@type": "Person",
    "name": "compiler-devel",
    "url": "https://news.ycombinator.com/user?id=compiler-devel"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=32500572",
  "sameAs": "https://github.com/llvm/llvm-project/commit/cfd497fadb8bae4c5428f40ea50cfc760649afa4",
  "dateCreated": "2022-08-19T14:56:19.974Z",
  "datePublished": "2022-08-17T19:21:33.000Z",
  "dateModified": "2022-08-19T14:56:19.974Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 1
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 0
    }
  ],
  "headline_zh-Hans": "Show HN: 修改Clang以获得更安全、更明确的C++语言\n",
  "headline_zh-Hant": "Show HN: 修改Clang以獲得更安全、更明確的C++語言\n",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "Edit: I somehow managed to post a link that shows the commit out of my repo, the correct link is\n<a href=\"https://github.com/compiler-devel/llvm-project/commit/cfd497fadb8bae4c5428f40ea50cfc760649afa4\" rel=\"nofollow\">https://github.com/compiler-devel/llvm-project/commit/cfd497...</a><p>Modified C++<p>Inspired by the paper &quot;Some Were Meant for C&quot; by Stephen Kell, I decided to show that it's possible to iterate C++ to be safer, more explicit, and less error-prone. <p>Here's a possible starting point: I didn't invent a new language or compiler, but took the world's best compiler, clang, and modified it to begin iterating towards a new furture of C++. Naming things is hard, so I call this 'Modified C++'. Some of the following could be implemented as tooling in a linter or checker, but the idea is to update the compiler directly. I also wanted to learn more about clang. This compiler needs a flag to enable/disable this functionality so that existing library code can be used with a 'diagnostic ignored' pragma.<p>You can build clang using the normal non-bootstrap process and you'll be left with a clang that compiles C++ but with the following modifications:<p><pre><code> - All basic types (excluding pointers and references) are const by\n     default and may be marked 'mutable' to allow them to be changed after\n     declaration\n     - Lambda capture lists must be explicit (no [&amp;] or [=], by themselves)\n     - Braces are required for conditional statements, case and default\n     statements within switches, and loops\n     - Implicit conversions to bool are prohibited (e.g., pointers must be\n     compared against nullptr/NULL)\n     - No goto support\n     - Explicit 'rule of six' for classes must be programmer-implemented\n     (default, copy, and move c'tors, copy and move assignment, d'tor)\n     - No C style casts\n\n</code></pre>\nHere's an example program that's valid in Modified C++:<p><pre><code> mutable int main(int, char**)\n    {\n      mutable int x = 0;\n      return x;\n    }\n\n\n    Here's another that will fail to compile:\n\n\n    mutable int main(int, char**)\n    {\n      int x = 1;\n      x = 0; // x is constant\n      return x;\n    }\n\n</code></pre>\nI'd like your feedback. Future changes I'm thinking about are:<p><pre><code> - feature flag for modified c++ to enable/disable with 'diagnostic ignored'\n     pragma, to support existing headers and libraries\n     - support enum classes only\n     - constructor declarations are explicit by default\n     - namespaces within classes\n     - normalize lambda and free function syntax\n     - your ideas here</code></pre>\n",
  "description_zh-Hant": "Edit: I somehow managed to post a link that shows the commit out of my repo, the correct link is\n<a href=\"https://github.com/compiler-devel/llvm-project/commit/cfd497fadb8bae4c5428f40ea50cfc760649afa4\" rel=\"nofollow\">https://github.com/compiler-devel/llvm-project/commit/cfd497...</a><p>Modified C++<p>Inspired by the paper &quot;Some Were Meant for C&quot; by Stephen Kell, I decided to show that it's possible to iterate C++ to be safer, more explicit, and less error-prone. <p>Here's a possible starting point: I didn't invent a new language or compiler, but took the world's best compiler, clang, and modified it to begin iterating towards a new furture of C++. Naming things is hard, so I call this 'Modified C++'. Some of the following could be implemented as tooling in a linter or checker, but the idea is to update the compiler directly. I also wanted to learn more about clang. This compiler needs a flag to enable/disable this functionality so that existing library code can be used with a 'diagnostic ignored' pragma.<p>You can build clang using the normal non-bootstrap process and you'll be left with a clang that compiles C++ but with the following modifications:<p><pre><code> - All basic types (excluding pointers and references) are const by\n     default and may be marked 'mutable' to allow them to be changed after\n     declaration\n     - Lambda capture lists must be explicit (no [&amp;] or [=], by themselves)\n     - Braces are required for conditional statements, case and default\n     statements within switches, and loops\n     - Implicit conversions to bool are prohibited (e.g., pointers must be\n     compared against nullptr/NULL)\n     - No goto support\n     - Explicit 'rule of six' for classes must be programmer-implemented\n     (default, copy, and move c'tors, copy and move assignment, d'tor)\n     - No C style casts\n\n</code></pre>\nHere's an example program that's valid in Modified C++:<p><pre><code> mutable int main(int, char**)\n    {\n      mutable int x = 0;\n      return x;\n    }\n\n\n    Here's another that will fail to compile:\n\n\n    mutable int main(int, char**)\n    {\n      int x = 1;\n      x = 0; // x is constant\n      return x;\n    }\n\n</code></pre>\nI'd like your feedback. Future changes I'm thinking about are:<p><pre><code> - feature flag for modified c++ to enable/disable with 'diagnostic ignored'\n     pragma, to support existing headers and libraries\n     - support enum classes only\n     - constructor declarations are explicit by default\n     - namespaces within classes\n     - normalize lambda and free function syntax\n     - your ideas here</code></pre>\n"
}