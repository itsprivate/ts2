{
  "@type": "NewsArticle",
  "identifier": "2022--03--02--en--showhn--HackerNews--NewsArticle--30530376",
  "url": "https://news.ycombinator.com/item?id=30530376",
  "headline": "Show HN: I made a WebGL-based app that traces images using circles",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "I was fascinated by this [0] and this video [1]. After many struggles, I finally built this app that traces images using circles similar to what these videos had shown.<p>The most challenging part (to me) is to find a way to convert images to vector lines. I had tried Potrace, but its output is not suitable for my use case: too many small elements share the same border. Potrace's goal is to represent the original image faithfully using vector lines. But I want to trace the image edges.<p>After searching and trying some Potrace alternatives in vain, I finally found my keyword. Surprisingly (to me), it lies at the end of the wiki page of the very topic [2]. Then I found a paper [3] that has nice pseudocode and a C implementation. I rewrote the pseudocode in Rust because I wanted to experiment with rustwasm. Honestly, I didn't care much about the math behind it.<p>From then, I could continue to finish the app and show it to the world.<p>This app is also my chance to learn about rustwasm and WebGL.<p>FYI: this app is offline-only; your images never leave your browser<p>[0] <a href=\"https://www.youtube.com/watch?v=r6sGWTCMz2k\" rel=\"nofollow\">https://www.youtube.com/watch?v=r6sGWTCMz2k</a><p>[1] <a href=\"https://www.youtube.com/watch?v=-qgreAUpPwM\" rel=\"nofollow\">https://www.youtube.com/watch?v=-qgreAUpPwM</a><p>[2] <a href=\"https://en.wikipedia.org/wiki/Edge_detection#Subpixel\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Edge_detection#Subpixel</a><p>[3] <a href=\"https://www.ipol.im/pub/art/2017/216/\" rel=\"nofollow\">https://www.ipol.im/pub/art/2017/216/</a>",
  "keywords": [
    "Show HN"
  ],
  "genre": "Show HN",
  "author": {
    "@type": "Person",
    "name": "phqb",
    "url": "https://news.ycombinator.com/user?id=phqb"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=30530376",
  "sameAs": "https://phqb.github.io/circle_drawing/",
  "dateCreated": "2022-03-02T19:51:27.678Z",
  "datePublished": "2022-03-02T17:56:08.000Z",
  "dateModified": "2022-03-02T19:51:27.678Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 4
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 1
    }
  ],
  "headline_zh-Hans": "Show HN: 我做了一个基于WebGL的应用程序，用圆圈来追踪图像",
  "headline_zh-Hant": "Show HN: 我做了一個基於WebGL的應用程序，用圓圈來追蹤圖像",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "我被这个[0]和这个视频[1]所吸引。经过多次挣扎，我终于建立了这个应用程序，使用与这些视频所显示的类似的圆圈来追踪图像。<p>最具挑战性的部分（对我来说）是找到一种方法将图像转换为矢量线。我曾尝试过Potrace，但它的输出并不适合我的使用情况：太多的小元素共享同一边界。Potrace的目标是用矢量线忠实地表现原始图像。但我想追踪图像的边缘。<p>在搜索和尝试了一些Potrace的替代品后，我终于找到了我的关键词。令人惊讶的是（对我来说），它就在这个主题的维基页面的末尾[2]。然后我发现了一篇论文[3]，其中有很好的伪代码和C语言实现。我用Rust重写了这个伪代码，因为我想用rustwasm做实验。Honestly, I didn't care much about the math behind it.<p>From then, I could continue to finish the app and show it to the world.<p>This app is also my chance to learn about rustwasm and WebGL.<p>FYI: this app is offline-only; your images never leave your browser<p>[0] <a href=\"https://www.youtube.com/watch?v=r6sGWTCMz2k\" rel=\"nofollow\">https://www.youtube.com/watch? v=r6sGWTCMz2k</a><p>[1] <a href=\"https://www.youtube.com/watch?v=-qgreAUpPwM\" rel=\"nofollow\">https://www.youtube.com/watch?v=-qgreAUpPwM</a><p>[2] <a href=\"https://en.wikipedia.org/wiki/Edge_detection#Subpixel\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Edge_detection#Subpixel</a><p>[3] <a href=\"https://www.ipol.im/pub/art/2017/216/\" rel=\"nofollow\">https://www.ipol.im/pub/art/2017/216/</a>",
  "description_zh-Hant": "我被這個[0]和這個視頻[1]所吸引。經過多次掙扎，我終於建立了這個應用程序，使用與這些視頻所顯示的類似的圓圈來追蹤圖像。<p>最具挑戰性的部分（對我來說）是找到一種方法將圖像轉換為矢量線。我曾嘗試過Potrace，但它的輸出並不適合我的使用情況：太多的小元素共享同一邊界。Potrace的目標是用矢量線忠實地表現原始圖像。但我想追蹤圖像的邊緣。<p>在搜索和嘗試了一些Potrace的替代品後，我終於找到了我的關鍵詞。令人驚訝的是（對我來說），它就在這個主題的維基頁面的末尾[2]。然後我發現了一篇論文[3]，其中有很好的偽代碼和C語言實現。我用Rust重寫了這個偽代碼，因為我想用rustwasm做實驗。Honestly, I didn't care much about the math behind it.<p>From then, I could continue to finish the app and show it to the world.<p>This app is also my chance to learn about rustwasm and WebGL.<p>FYI: this app is offline-only; your images never leave your browser<p>[0] <a href=\"https://www.youtube.com/watch?v=r6sGWTCMz2k\" rel=\"nofollow\">https://www.youtube.com/watch? v=r6sGWTCMz2k</a><p>[1] <a href=\"https://www.youtube.com/watch?v=-qgreAUpPwM\" rel=\"nofollow\">https://www.youtube.com/watch?v=-qgreAUpPwM</a><p>[2] <a href=\"https://en.wikipedia.org/wiki/Edge_detection#Subpixel\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Edge_detection#Subpixel</a><p>[3] <a href=\"https://www.ipol.im/pub/art/2017/216/\" rel=\"nofollow\">https://www.ipol.im/pub/art/2017/216/</a>"
}