{
  "@type": "NewsArticle",
  "identifier": "2022--08--21--en--showhn--HackerNews--NewsArticle--32542648",
  "url": "https://news.ycombinator.com/item?id=32542648",
  "headline": "Show HN: Postgres.email – Readable Mailing Lists",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "This is a small POC that I've been developing to transform the Postgres mailing lists[0] more readable<p>I've linked to a thread &quot;COPY TO (FREEZE)?&quot; in the Show HN link, and the equivalent on the Postgres mailing list site is here:<p><a href=\"https://www.postgresql.org/message-id/20220802.133046.1941977979333284049.horikyota.ntt%40gmail.com\" rel=\"nofollow\">https://www.postgresql.org/message-id/20220802.133046.194197...</a><p>The idea of postgres.email is to make all responses threaded, like the comments here on HN or Reddit.<p>I created this by using an imap Foreign Data Wrapper to ingest the messages into a Postgres database. I have only ingested 1000 messages for the POC.<p>The code can bew found here:<p><a href=\"https://github.com/kiwicopple/postgres.email\" rel=\"nofollow\">https://github.com/kiwicopple/postgres.email</a><p>The technologies used are:<p>- Gmail to receive the email<p>- Steampipe for the FDW: <a href=\"https://hub.steampipe.io/plugins/turbot/imap\" rel=\"nofollow\">https://hub.steampipe.io/plugins/turbot/imap</a><p>- Supabase for the Postgres database / APIs: <a href=\"https://supabase.com\" rel=\"nofollow\">https://supabase.com</a><p>- Remix for the frontend: <a href=\"https://remix.run/\" rel=\"nofollow\">https://remix.run/</a><p>Given the size of the mailing lists, I doubt the current approach will scale much further than the POC, so I'll need to re-think the architecture. I'll probably keep the emails in gmail and and leverage the FDW for older messages.<p>Some things I'd like to do next:<p><pre><code>  - explore alternative architectures\n  - add a REST API \n  - add search - the size of the mailing lists might make this difficult\n  - allow readers to toggle on a &quot;markdown&quot; view. Often authors use markdown syntax in their emails \n  - add a light mode\n\n</code></pre>\n[0] Mailing lists: <a href=\"https://www.postgresql.org/list/\" rel=\"nofollow\">https://www.postgresql.org/list/</a>",
  "keywords": [
    "Show HN"
  ],
  "genre": "Show HN",
  "author": {
    "@type": "Person",
    "name": "kiwicopple",
    "url": "https://news.ycombinator.com/user?id=kiwicopple"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=32542648",
  "sameAs": "https://postgres.email/lists/pgsql-hackers/%3C20220802.133046.1941977979333284049.horikyota.ntt@gmail.com%3E",
  "dateCreated": "2022-08-21T17:56:21.717Z",
  "datePublished": "2022-08-21T17:55:06.000Z",
  "dateModified": "2022-08-21T17:56:21.717Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 1
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 0
    }
  ],
  "headline_zh-Hans": "Show HN: Postgres.email - 可读邮件列表\n",
  "headline_zh-Hant": "Show HN: Postgres.email - 可讀郵件列表\n",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "This is a small POC that I've been developing to transform the Postgres mailing lists[0] more readable<p>I've linked to a thread &quot;COPY TO (FREEZE)?&quot; in the Show HN link, and the equivalent on the Postgres mailing list site is here:<p><a href=\"https://www.postgresql.org/message-id/20220802.133046.1941977979333284049. horikyota.ntt%40gmail.com\" rel=\"nofollow\">https://www.postgresql.org/message-id/20220802.133046.194197...</a><p>The idea of postgres.email is to make all responses threaded, like the comments here on HN or Reddit.<p>I created this by using an imap Foreign Data Wrapper to ingest the messages into a Postgres database. I have only ingested 1000 messages for the POC.<p>The code can bew found here:<p><a href=\"https://github.com/kiwicopple/postgres.email\" rel=\"nofollow\">https://github.com/kiwicopple/postgres.email</a><p>The technologies used are:<p>- Gmail to receive the email<p>- Steampipe for the FDW: <a href=\"https://hub.steampipe.io/plugins/turbot/imap\" rel=\"nofollow\">https://hub.steampipe.io/plugins/turbot/imap</a><p>- Supabase for the Postgres database / APIs: <a href=\"https://supabase.com\" rel=\"nofollow\">https://supabase.com</a><p>- Remix for the frontend: <a href=\"https://remix.run/\" rel=\"nofollow\">https://remix.run/</a><p>Given the size of the mailing lists, I doubt the current approach will scale much further than the POC, so I'll need to re-think the architecture. I'll probably keep the emails in gmail and and leverage the FDW for older messages.<p>Some things I'd like to do next:<p><pre><code> - explore alternative architectures\n  - add a REST API \n  - add search - the size of the mailing lists might make this difficult\n  - allow readers to toggle on a &quot;markdown&quot; view. Often authors use markdown syntax in their emails \n  - add a light mode\n\n</code></pre>\n[0] Mailing lists: <a href=\"https://www.postgresql.org/list/\" rel=\"nofollow\">https://www.postgresql.org/list/</a>\n",
  "description_zh-Hant": "This is a small POC that I've been developing to transform the Postgres mailing lists[0] more readable<p>I've linked to a thread &quot;COPY TO (FREEZE)?&quot; in the Show HN link, and the equivalent on the Postgres mailing list site is here:<p><a href=\"https://www.postgresql.org/message-id/20220802.133046.1941977979333284049. horikyota.ntt%40gmail.com\" rel=\"nofollow\">https://www.postgresql.org/message-id/20220802.133046.194197...</a><p>The idea of postgres.email is to make all responses threaded, like the comments here on HN or Reddit.<p>I created this by using an imap Foreign Data Wrapper to ingest the messages into a Postgres database. I have only ingested 1000 messages for the POC.<p>The code can bew found here:<p><a href=\"https://github.com/kiwicopple/postgres.email\" rel=\"nofollow\">https://github.com/kiwicopple/postgres.email</a><p>The technologies used are:<p>- Gmail to receive the email<p>- Steampipe for the FDW: <a href=\"https://hub.steampipe.io/plugins/turbot/imap\" rel=\"nofollow\">https://hub.steampipe.io/plugins/turbot/imap</a><p>- Supabase for the Postgres database / APIs: <a href=\"https://supabase.com\" rel=\"nofollow\">https://supabase.com</a><p>- Remix for the frontend: <a href=\"https://remix.run/\" rel=\"nofollow\">https://remix.run/</a><p>Given the size of the mailing lists, I doubt the current approach will scale much further than the POC, so I'll need to re-think the architecture. I'll probably keep the emails in gmail and and leverage the FDW for older messages.<p>Some things I'd like to do next:<p><pre><code> - explore alternative architectures\n  - add a REST API \n  - add search - the size of the mailing lists might make this difficult\n  - allow readers to toggle on a &quot;markdown&quot; view. Often authors use markdown syntax in their emails \n  - add a light mode\n\n</code></pre>\n[0] Mailing lists: <a href=\"https://www.postgresql.org/list/\" rel=\"nofollow\">https://www.postgresql.org/list/</a>\n"
}