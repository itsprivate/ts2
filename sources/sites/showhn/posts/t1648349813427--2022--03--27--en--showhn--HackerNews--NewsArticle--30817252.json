{
  "@type": "NewsArticle",
  "identifier": "2022--03--27--en--showhn--HackerNews--NewsArticle--30817252",
  "url": "https://news.ycombinator.com/item?id=30817252",
  "headline": "Show HN: How to create a network proxy with Pipy proxy",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "In this part of tutorial, you will learn how Pipy can work as a network proxy. You will also see why we need sub-pipelines and why they can be more than the number of incoming connections.\nTakeaways:\n1. Port pipelines receives data in TCP layer. To handle individual HTTP messages, we need filters like serveHTTP or demuxHTTP to extract messages out of it.\n2. The difference between serveHTTP and demuxHTTP is that, the former handles extracted messages by a callback function while the latter handles them in many separate sub-pipelines.\n3. Before HTTP messages are sent over network, they need to be combined into TCP streams with muxHTTP.\n4. Use connect to establish outgoing TCP connections to remote hosts.\nMore details, please refer to comments.",
  "keywords": [
    "Show HN"
  ],
  "genre": "Show HN",
  "author": {
    "@type": "Person",
    "name": "shaderx13",
    "url": "https://news.ycombinator.com/user?id=shaderx13"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=30817252",
  "sameAs": "https://news.ycombinator.com/item?id=30817252",
  "dateCreated": "2022-03-27T02:56:53.427Z",
  "datePublished": "2022-03-27T02:35:05.000Z",
  "dateModified": "2022-03-27T02:56:53.427Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 2
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 1
    }
  ],
  "headline_zh-Hans": "Show HN: 如何用Pipy代理创建一个网络代理",
  "headline_zh-Hant": "Show HN: 如何用Pipy代理創建一個網絡代理",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "在这部分教程中，你将学习Pipy如何作为一个网络代理工作。你还会看到为什么我们需要子管道，以及为什么子管道可以超过传入连接的数量。\n经验之谈。\n1. 端口管道在TCP层接收数据。为了处理单个的HTTP消息，我们需要像serveHTTP或demuxHTTP这样的过滤器来提取其中的消息。\n2. 2.serveHTTP和demuxHTTP的区别在于，前者通过一个回调函数处理提取的消息，而后者则在许多独立的子管道中处理这些消息。\n3. 在HTTP消息通过网络发送之前，需要用muxHTTP将它们组合成TCP流。\n4. 4.使用connect来建立到远程主机的外发TCP连接。\n更多细节，请参考评论。",
  "description_zh-Hant": "在這部分教程中，你將學習Pipy如何作為一個網絡代理工作。你還會看到為什麼我們需要子管道，以及為什麼子管道可以超過傳入連接的數量。\n經驗之談。\n1. 端口管道在TCP層接收數據。為了處理單個的HTTP消息，我們需要像serveHTTP或demuxHTTP這樣的過濾器來提取其中的消息。\n2. 2.serveHTTP和demuxHTTP的區別在於，前者通過一個回調函數處理提取的消息，而後者則在許多獨立的子管道中處理這些消息。\n3. 在HTTP消息通過網絡發送之前，需要用muxHTTP將它們組合成TCP流。\n4. 4.使用connect來建立到遠程主機的外發TCP連接。\n更多細節，請參考評論。"
}