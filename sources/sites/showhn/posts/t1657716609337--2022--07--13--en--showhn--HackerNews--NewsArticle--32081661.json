{
  "@type": "NewsArticle",
  "identifier": "2022--07--13--en--showhn--HackerNews--NewsArticle--32081661",
  "url": "https://news.ycombinator.com/item?id=32081661",
  "headline": "Show HN: GitHub Action for repository traffic reporting",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "Bonjour! I’d like to share a rather small project which I believe may be of use for some of you.<p><a href=\"https://github.com/jgehrcke/github-repo-stats\" rel=\"nofollow\">https://github.com/jgehrcke/github-repo-stats</a> is a GitHub Action that I started building about 1.5 years ago, to overcome the 14-day limitation of the visitor/clone plots shown in GitHub's &quot;Insights&quot; tab.<p>The project has some seemingly happy users and I believe we managed to address some of the more embarrassing bugs. That is, I believe this project is ready for a new wave of feedback. Which is where you come in, hopefully  :-).<p>When I researched the solution space back then I found Actions that relied on an external system to push data to (like S3). I thought that it’s simpler to keep the time series data in the repository that the GitHub Action runs in. Also, I have opinions about data analysis and visualization and so I wanted to take full control of that. The goal from the start was to generate a self-contained report artifact on a daily basis (with good characteristics in terms of sharing and archiving), and to also persist that via git.<p>Quick technical description: this Action runs once per day. During each run, it<p><pre><code>  - fetches traffic stats (visitor count, etc – for the last 14 days) via GitHub’s HTTP API.\n  - persists new data points (in the GitHub git repository that this Action runs in!).\n  - generates a minimal HTML and PDF report, both of which are also persisted in the repo that this Action runs in.\n</code></pre>\nThe HTML/PDF documents can be exposed right away via GitHub pages. The PDF report contains vector graphics so you can zoom in much more than necessary (and if your boss needs a print then this might look good enough). The plots in the report are meant to show a long time frame. For example, here you can see for the last 1.5 years how the daily visitor count (and other metrics) evolved for jgehrcke/github-repo-stats:\n<a href=\"https://jgehrcke.github.io/ghrs-test/jgehrcke/github-repo-stats/latest-report/report.html\" rel=\"nofollow\">https://jgehrcke.github.io/ghrs-test/jgehrcke/github-repo-st...</a><p>What I find really cool is that there are users who run this Action in a certain repository dedicated for reporting, for many target repositories. How to do that is described in the main README in the section 'Tracking multiple repositories ...'.<p>Interesting things I learned about through this project:<p><pre><code>  - Vega/Altair for plotting\n  - https://github.com/bats-core/bats-core for CLI testing\n  - GitHub Actions: how to build them, how to do release management. I also learned that testing a GitHub Action is hard, especially given the heterogeneous set of environments that it might run in.\n</code></pre>\nIf you want to try this out then besides the main README a good place to start is this tutorial: <a href=\"https://github.com/jgehrcke/github-repo-stats/wiki/Tutorial\" rel=\"nofollow\">https://github.com/jgehrcke/github-repo-stats/wiki/Tutorial</a><p>All of this was built rather pragmatically, and I want to keep it that way. There is a plethora of smaller and bigger things across all parts that are generally worth improving (docs, plots, architecture, cleanup), but before deciding what to touch next I'd love to hear your ideas. Thanks!",
  "keywords": [
    "Show HN"
  ],
  "genre": "Show HN",
  "author": {
    "@type": "Person",
    "name": "jgehrcke",
    "url": "https://news.ycombinator.com/user?id=jgehrcke"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=32081661",
  "sameAs": "https://github.com/jgehrcke/github-repo-stats",
  "dateCreated": "2022-07-13T12:50:09.337Z",
  "datePublished": "2022-07-13T12:23:53.000Z",
  "dateModified": "2022-07-13T12:50:09.337Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 1
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 0
    }
  ],
  "headline_zh-Hans": "Show HN: 仓库流量报告的GitHub行动\n",
  "headline_zh-Hant": "Show HN: 倉庫流量報告的GitHub行動\n",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "Bonjour! I’d like to share a rather small project which I believe may be of use for some of you.<p><a href=\"https://github.com/jgehrcke/github-repo-stats\" rel=\"nofollow\">https://github.com/jgehrcke/github-repo-stats</a> is a GitHub Action that I started building about 1.5 years ago, to overcome the 14-day limitation of the visitor/clone plots shown in GitHub's &quot;Insights&quot; tab.<p>The project has some seemingly happy users and I believe we managed to address some of the more embarrassing bugs. That is, I believe this project is ready for a new wave of feedback. Which is where you come in, hopefully :-).<p>When I researched the solution space back then I found Actions that relied on an external system to push data to (like S3). I thought that it’s simpler to keep the time series data in the repository that the GitHub Action runs in. Also, I have opinions about data analysis and visualization and so I wanted to take full control of that. The goal from the start was to generate a self-contained report artifact on a daily basis (with good characteristics in terms of sharing and archiving), and to also persist that via git.<p>Quick technical description: this Action runs once per day. During each run, it<p><pre><code> - fetches traffic stats (visitor count, etc – for the last 14 days) via GitHub’s HTTP API.\n  - persists new data points (in the GitHub git repository that this Action runs in!).\n  - generates a minimal HTML and PDF report, both of which are also persisted in the repo that this Action runs in.\n</code></pre>\nThe HTML/PDF documents can be exposed right away via GitHub pages. The PDF report contains vector graphics so you can zoom in much more than necessary (and if your boss needs a print then this might look good enough). The plots in the report are meant to show a long time frame. For example, here you can see for the last 1.5 years how the daily visitor count (and other metrics) evolved for jgehrcke/github-repo-stats:\n<a href=\"https://jgehrcke.github.io/ghrs-test/jgehrcke/github-repo-stats/latest-report/report.html\" rel=\"nofollow\">https://jgehrcke.github.io/ghrs-test/jgehrcke/github-repo-st...</a><p>What I find really cool is that there are users who run this Action in a certain repository dedicated for reporting, for many target repositories. How to do that is described in the main README in the section 'Tracking multiple repositories ...'.<p>Interesting things I learned about through this project:<p><pre><code> - Vega/Altair for plotting\n  - https://github.com/bats-core/bats-core for CLI testing\n  - GitHub Actions: how to build them, how to do release management. I also learned that testing a GitHub Action is hard, especially given the heterogeneous set of environments that it might run in.\n</code></pre>\nIf you want to try this out then besides the main README a good place to start is this tutorial: <a href=\"https://github.com/jgehrcke/github-repo-stats/wiki/Tutorial\" rel=\"nofollow\">https://github.com/jgehrcke/github-repo-stats/wiki/Tutorial</a><p>All of this was built rather pragmatically, and I want to keep it that way. There is a plethora of smaller and bigger things across all parts that are generally worth improving (docs, plots, architecture, cleanup), but before deciding what to touch next I'd love to hear your ideas. Thanks!\n",
  "description_zh-Hant": "Bonjour! I’d like to share a rather small project which I believe may be of use for some of you.<p><a href=\"https://github.com/jgehrcke/github-repo-stats\" rel=\"nofollow\">https://github.com/jgehrcke/github-repo-stats</a> is a GitHub Action that I started building about 1.5 years ago, to overcome the 14-day limitation of the visitor/clone plots shown in GitHub's &quot;Insights&quot; tab.<p>The project has some seemingly happy users and I believe we managed to address some of the more embarrassing bugs. That is, I believe this project is ready for a new wave of feedback. Which is where you come in, hopefully :-).<p>When I researched the solution space back then I found Actions that relied on an external system to push data to (like S3). I thought that it’s simpler to keep the time series data in the repository that the GitHub Action runs in. Also, I have opinions about data analysis and visualization and so I wanted to take full control of that. The goal from the start was to generate a self-contained report artifact on a daily basis (with good characteristics in terms of sharing and archiving), and to also persist that via git.<p>Quick technical description: this Action runs once per day. During each run, it<p><pre><code> - fetches traffic stats (visitor count, etc – for the last 14 days) via GitHub’s HTTP API.\n  - persists new data points (in the GitHub git repository that this Action runs in!).\n  - generates a minimal HTML and PDF report, both of which are also persisted in the repo that this Action runs in.\n</code></pre>\nThe HTML/PDF documents can be exposed right away via GitHub pages. The PDF report contains vector graphics so you can zoom in much more than necessary (and if your boss needs a print then this might look good enough). The plots in the report are meant to show a long time frame. For example, here you can see for the last 1.5 years how the daily visitor count (and other metrics) evolved for jgehrcke/github-repo-stats:\n<a href=\"https://jgehrcke.github.io/ghrs-test/jgehrcke/github-repo-stats/latest-report/report.html\" rel=\"nofollow\">https://jgehrcke.github.io/ghrs-test/jgehrcke/github-repo-st...</a><p>What I find really cool is that there are users who run this Action in a certain repository dedicated for reporting, for many target repositories. How to do that is described in the main README in the section 'Tracking multiple repositories ...'.<p>Interesting things I learned about through this project:<p><pre><code> - Vega/Altair for plotting\n  - https://github.com/bats-core/bats-core for CLI testing\n  - GitHub Actions: how to build them, how to do release management. I also learned that testing a GitHub Action is hard, especially given the heterogeneous set of environments that it might run in.\n</code></pre>\nIf you want to try this out then besides the main README a good place to start is this tutorial: <a href=\"https://github.com/jgehrcke/github-repo-stats/wiki/Tutorial\" rel=\"nofollow\">https://github.com/jgehrcke/github-repo-stats/wiki/Tutorial</a><p>All of this was built rather pragmatically, and I want to keep it that way. There is a plethora of smaller and bigger things across all parts that are generally worth improving (docs, plots, architecture, cleanup), but before deciding what to touch next I'd love to hear your ideas. Thanks!\n"
}