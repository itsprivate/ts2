{
  "@type": "NewsArticle",
  "identifier": "2022--06--25--en--showhn--HackerNews--NewsArticle--31875318",
  "url": "https://news.ycombinator.com/item?id=31875318",
  "headline": "Show HN: Parallelized random access to bzip2 files from Python written in C++",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "The project can be found here: <a href=\"https://github.com/mxmlnkn/indexed_bzip2\" rel=\"nofollow\">https://github.com/mxmlnkn/indexed_bzip2</a><p>The readme shows how to use it from Python, via ratarmount, and via its command-line tool ibzip2.<p>There are really a lot of bzip2 implementations out there but few that have been parallelized, even fewer with random access, and, to my knowledge, none of which are both parallel and offer random seeking in constant time.\nThis is why I started indexed_bzip2. It is a header-only C++ library with Python bindings so that I can use it as a backend from ratarmount. For that, it also supports working with Python file-like objects by using the Python API.<p>For this project, I started with the super-permissively 0-BSD licensed and small bzip2 decoder from the toybox project and extracted what I needed from it.\nThe architecture for the parallel decoding plus random seeking took me some iterations and contemplation to get right.\nIt uses block-based caching and prefetching to achieve both of these things.\n&quot;Right&quot; means that it is modular enough that I can reason about it and be convinced that it is correct.\nOf course, there are also a lot of automated tests with all kinds of sanitizers to check for correctness because I am wary when it comes to reading user data.<p>All in all, this project was a nice brainteaser with which I could grow and I think it is largely finished for now.\nThe single-core bzip2 decoder might profit from further optimizations but it already outperforms the internal Python bz2 module for 2 cores and more.\nAnd it also outperforms the internal Python bz2 module when it comes to random access because it is in constant time with indexed_bzip2.\nAll this comes at the cost of higher memory usage (for the block cache), though.\nCurrently, I'm trying to reuse the infrastructure I built for this to implement parallel random access to gzip files for usage in ratarmount but I'm not sure when that will be finished.",
  "keywords": [
    "Show HN"
  ],
  "genre": "Show HN",
  "author": {
    "@type": "Person",
    "name": "mxmlnkn",
    "url": "https://news.ycombinator.com/user?id=mxmlnkn"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=31875318",
  "sameAs": "https://github.com/mxmlnkn/indexed_bzip2",
  "dateCreated": "2022-06-25T13:55:59.560Z",
  "datePublished": "2022-06-25T13:54:38.000Z",
  "dateModified": "2022-06-25T13:55:59.560Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 1
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 0
    }
  ],
  "headline_zh-Hans": "Show HN: 用C++编写的Python对bzip2文件的并行化随机访问\n",
  "headline_zh-Hant": "Show HN: 用C++編寫的Python對bzip2文件的並行化隨機訪問\n",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "The project can be found here: <a href=\"https://github.com/mxmlnkn/indexed_bzip2\" rel=\"nofollow\">https://github.com/mxmlnkn/indexed_bzip2</a><p>The readme shows how to use it from Python, via ratarmount, and via its command-line tool ibzip2.<p>There are really a lot of bzip2 implementations out there but few that have been parallelized, even fewer with random access, and, to my knowledge, none of which are both parallel and offer random seeking in constant time.\nThis is why I started indexed_bzip2. It is a header-only C++ library with Python bindings so that I can use it as a backend from ratarmount. For that, it also supports working with Python file-like objects by using the Python API.<p>For this project, I started with the super-permissively 0-BSD licensed and small bzip2 decoder from the toybox project and extracted what I needed from it.\nThe architecture for the parallel decoding plus random seeking took me some iterations and contemplation to get right.\nIt uses block-based caching and prefetching to achieve both of these things.\n&quot;Right&quot; means that it is modular enough that I can reason about it and be convinced that it is correct.\nOf course, there are also a lot of automated tests with all kinds of sanitizers to check for correctness because I am wary when it comes to reading user data.<p>All in all, this project was a nice brainteaser with which I could grow and I think it is largely finished for now.\n单核 bzip2 解码器可能会从进一步的优化中获益，但它已经超过了内部 Python bz2 模块的 2 核或更多。\n当涉及到随机访问时，它也优于内部的Python bz2模块，因为它与indexed_bzip2的时间是恒定的。\n不过所有这些都是以更高的内存使用率为代价的（用于块缓存）。\n目前，我正试图重新使用我为此建立的基础设施，以实现对gzip文件的并行随机访问，以便在ratarmount中使用，但我不确定何时能完成。\n",
  "description_zh-Hant": "The project can be found here: <a href=\"https://github.com/mxmlnkn/indexed_bzip2\" rel=\"nofollow\">https://github.com/mxmlnkn/indexed_bzip2</a><p>The readme shows how to use it from Python, via ratarmount, and via its command-line tool ibzip2.<p>There are really a lot of bzip2 implementations out there but few that have been parallelized, even fewer with random access, and, to my knowledge, none of which are both parallel and offer random seeking in constant time.\nThis is why I started indexed_bzip2. It is a header-only C++ library with Python bindings so that I can use it as a backend from ratarmount. For that, it also supports working with Python file-like objects by using the Python API.<p>For this project, I started with the super-permissively 0-BSD licensed and small bzip2 decoder from the toybox project and extracted what I needed from it.\nThe architecture for the parallel decoding plus random seeking took me some iterations and contemplation to get right.\nIt uses block-based caching and prefetching to achieve both of these things.\n&quot;Right&quot; means that it is modular enough that I can reason about it and be convinced that it is correct.\nOf course, there are also a lot of automated tests with all kinds of sanitizers to check for correctness because I am wary when it comes to reading user data.<p>All in all, this project was a nice brainteaser with which I could grow and I think it is largely finished for now.\n單核 bzip2 解碼器可能會從進一步的優化中獲益，但它已經超過了內部 Python bz2 模塊的 2 核或更多。\n當涉及到隨機訪問時，它也優於內部的Python bz2模塊，因為它與indexed_bzip2的時間是恆定的。\n不過所有這些都是以更高的內存使用率為代價的（用於塊緩存）。\n目前，我正試圖重新使用我為此建立的基礎設施，以實現對gzip文件的並行隨機訪問，以便在ratarmount中使用，但我不確定何時能完成。\n"
}