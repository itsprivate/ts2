{
  "@type": "NewsArticle",
  "identifier": "2022--03--14--en--showhn--HackerNews--NewsArticle--30668137",
  "url": "https://news.ycombinator.com/item?id=30668137",
  "headline": "Show HN: Avatars for HN threads in 368 bytes",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "The following self contained script annotates all HN comments on a page with username derived avatars. Simply paste it into the JS console of any HN page (F12).<p><pre><code>  for(u of document.querySelectorAll('.hnuser'))for(u.parentElement.prepend(c=document.createElement('canvas')),x=c.getContext('2d'),c.width=c.height=14,s=u.innerText,r=1,i=28+s.length;i--;i&lt;28?r&gt;&gt;&gt;29&gt;X*X/3+Y/2&amp;&amp;x.fillRect(6+2*X,2*Y,2,2)&amp;x.fillRect(6-2*X,2*Y,2,2):r+=s.charCodeAt(i-28,x.fillStyle='#'+(r&gt;&gt;8&amp;0xFFFFFF).toString(16)))r^=r&lt;&lt;13,r^=r&gt;&gt;&gt;17,r^=r&lt;&lt;5,X=i&amp;3,Y=i&gt;&gt;2\n</code></pre>\nThis was inspired by @frncsdrk's submission from earlier today [0].<p>The concept is to use HN usernames as the seed into a deterministic avatar generator. This generator is built from the famously simple xorshift32 PRNG, which both provides a random variable for the image generator steps, and &quot;pseudo-hashes&quot; the seed string to provide the initial PRNG state using a non-linear step (adding each codepoint - which is likely not very robust against collisions compared to proper hashing algorithms, but is simple and good enough).<p>The image generation part is a probability distribution with mirrored pixels... specifically: r&gt;&gt;&gt;29 &gt; X*X/3+Y/2 where the left side is 3 of the upper bits of the PRNG state (providing a random integer 0-7), and the right side is the squared distance from the centre for X + the linear distance from the top for Y. i.e the further from the top centre the pixel is, the less likely it will be filled, but linearly for Y and squared for X.<p>Un-golfed version:<p><pre><code>    for (const u of document.querySelectorAll('.hnuser')) {\n        const p=2;\n        const c=document.createElement('canvas');\n        const x=c.getContext('2d');\n            c.width=p*7, c.height=p*7;\n            u.parentElement.prepend(c);\n        for (let s=u.innerText, r=1, i=28+s.length; i--;) {\n            // xorshift32\n            r^=r&lt;&lt;13, r^=r&gt;&gt;&gt;17, r^=r&lt;&lt;5;\n            const X=i&amp;3, Y=i&gt;&gt;2;\n            if (i &gt;= 28) {\n                // seed state\n                r+=s.charCodeAt(i-28);\n                x.fillStyle='#'+(r&gt;&gt;8&amp;0xFFFFFF)\n                .toString(16).padStart(0, 6);\n            } else {\n                // draw pixel\n                if (r&gt;&gt;&gt;29 &gt; X*X/3+Y/2)\n                x.fillRect(p*3+p*X, p*Y, p, p),\n                x.fillRect(p*3-p*X, p*Y, p, p);\n            }\n        }\n    }\n</code></pre>\nWas fun to play with, but also surprisingly helpful in following discussions.<p>[0] https://news.ycombinator.com/item?id=30660316*",
  "keywords": [
    "Show HN"
  ],
  "genre": "Show HN",
  "author": {
    "@type": "Person",
    "name": "tomxor",
    "url": "https://news.ycombinator.com/user?id=tomxor"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=30668137",
  "sameAs": "https://news.ycombinator.com/item?id=30668137",
  "dateCreated": "2022-03-14T03:20:56.865Z",
  "datePublished": "2022-03-14T03:08:25.000Z",
  "dateModified": "2022-03-14T03:20:56.865Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 2
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 0
    }
  ],
  "headline_zh-Hans": "Show HN: 368字节的HN线程的头像",
  "headline_zh-Hant": "Show HN: 368字節的HN線程的頭像",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "下面这个自带的脚本用用户名衍生的头像来注释一个页面上的所有HN评论。只需将其粘贴到任何HN页面的JS控制台（F12）。<p><pre><code> for(u of document.querySelectorAll('.hnuser'))for(u.parentElement.prepend(c=document.createElement('canvas')),x=c.getContext('2d'),c.width=c.height=14,s=u.innerText,r=1,i=28+s. length;i--;i&lt;28?r&gt;&gt;&gt;29&gt;X*X/3+Y/2&amp;&amp;x.fillRect(6+2*X,2*Y,2,2)&amp;x.fillRect(6-2*X,2*Y,2,2):r+=s.charCodeAt(i-28,x. fillStyle='#'+(r&gt;&gt;8&amp;0xFFFFFF).toString(16)))r^=r&lt;&lt;13,r^=r&gt;&gt;&gt;17,r^=r&lt;&lt;5,X=i&amp;3,Y=i&gt;&gt;2\n</code></pre>\nThis was inspired by @frncsdrk's submission from earlier today [0].<p>The concept is to use HN usernames as the seed into a deterministic avatar generator. This generator is built from the famously simple xorshift32 PRNG, which both provides a random variable for the image generator steps, and &quot;pseudo-hashes&quot; the seed string to provide the initial PRNG state using a non-linear step (adding each codepoint - which is likely not very robust against collisions compared to proper hashing algorithms, but is simple and good enough).<p>The image generation part is a probability distribution with mirrored pixels. .. specifically: r&gt;&gt;&gt;29 &gt; X*X/3+Y/2 where the left side is 3 of the upper bits of the PRNG state (providing a random integer 0-7), and the right side is the squared distance from the centre for X + the linear distance from the top for Y. i.e the further from the top centre the pixel is, the less likely it will be filled, but linearly for Y and squared for X.<p>Un-golfed version:<p><pre><code> for (const u of document.querySelectorAll('.hnuser')) {\n        const p=2;\n        const c=document.createElement('canvas');\n        const x=c.getContext('2d');\n            c.width=p*7, c.height=p*7;\n            u.parentElement.prepend(c)。\n        for (let s=u.innerText, r=1, i=28+s.length; i--;) {\n            // xorshift32\n            r^=r&lt;&lt;13, r^=r&gt;&gt;17, r^=r&lt;&lt;5;\n            const X=i&amp;3, Y=i&gt;&gt;2;\n            如果（i &gt;=28）{\n                // 种子状态\n                r+=s.charCodeAt(i-28);\n                x.fillStyle='#'+(r&gt;&gt;8&amp;0xFFFFFF)\n                .toString(16).padStart(0, 6)。\n            } else {\n                // 绘制像素\n                if (r&gt;&gt;&gt;29 &gt; X*X/3+Y/2)\n                x.fillRect(p*3+p*X, p*Y, p, p),\n                x.fillRect(p*3-p*X, p*Y, p, p);\n            }\n        }\n    }\n</code></pre>\n玩起来很有趣，但在接下来的讨论中也出乎意料地有帮助。<p>[0] https://news.ycombinator.com/item?id=30660316*。",
  "description_zh-Hant": "下面這個自帶的腳本用用戶名衍生的頭像來註釋一個頁面上的所有HN評論。只需將其粘貼到任何HN頁面的JS控制檯（F12）。<p><pre><code> for(u of document.querySelectorAll('.hnuser'))for(u.parentElement.prepend(c=document.createElement('canvas')),x=c.getContext('2d'),c.width=c.height=14,s=u.innerText,r=1,i=28+s. length;i--;i&lt;28?r&gt;&gt;&gt;29&gt;X*X/3+Y/2&amp;&amp;x.fillRect(6+2*X,2*Y,2,2)&amp;x.fillRect(6-2*X,2*Y,2,2):r+=s.charCodeAt(i-28,x. fillStyle='#'+(r&gt;&gt;8&amp;0xFFFFFF).toString(16)))r^=r&lt;&lt;13,r^=r&gt;&gt;&gt;17,r^=r&lt;&lt;5,X=i&amp;3,Y=i&gt;&gt;2\n</code></pre>\nThis was inspired by @frncsdrk's submission from earlier today [0].<p>The concept is to use HN usernames as the seed into a deterministic avatar generator. This generator is built from the famously simple xorshift32 PRNG, which both provides a random variable for the image generator steps, and &quot;pseudo-hashes&quot; the seed string to provide the initial PRNG state using a non-linear step (adding each codepoint - which is likely not very robust against collisions compared to proper hashing algorithms, but is simple and good enough).<p>The image generation part is a probability distribution with mirrored pixels. .. specifically: r&gt;&gt;&gt;29 &gt; X*X/3+Y/2 where the left side is 3 of the upper bits of the PRNG state (providing a random integer 0-7), and the right side is the squared distance from the centre for X + the linear distance from the top for Y. i.e the further from the top centre the pixel is, the less likely it will be filled, but linearly for Y and squared for X.<p>Un-golfed version:<p><pre><code> for (const u of document.querySelectorAll('.hnuser')) {\n        const p=2;\n        const c=document.createElement('canvas');\n        const x=c.getContext('2d');\n            c.width=p*7, c.height=p*7;\n            u.parentElement.prepend(c)。\n        for (let s=u.innerText, r=1, i=28+s.length; i--;) {\n            // xorshift32\n            r^=r&lt;&lt;13, r^=r&gt;&gt;17, r^=r&lt;&lt;5;\n            const X=i&amp;3, Y=i&gt;&gt;2;\n            如果（i &gt;=28）{\n                // 種子狀態\n                r+=s.charCodeAt(i-28);\n                x.fillStyle='#'+(r&gt;&gt;8&amp;0xFFFFFF)\n                .toString(16).padStart(0, 6)。\n            } else {\n                // 繪製像素\n                if (r&gt;&gt;&gt;29 &gt; X*X/3+Y/2)\n                x.fillRect(p*3+p*X, p*Y, p, p),\n                x.fillRect(p*3-p*X, p*Y, p, p);\n            }\n        }\n    }\n</code></pre>\n玩起來很有趣，但在接下來的討論中也出乎意料地有幫助。<p>[0] https://news.ycombinator.com/item?id=30660316*。"
}