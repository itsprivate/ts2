{
  "@type": "NewsArticle",
  "identifier": "2022--02--23--en--showhn--HackerNews--NewsArticle--30442072",
  "url": "https://news.ycombinator.com/item?id=30442072",
  "headline": "Show HN: Hathora – Multiplayer Game Development Made Easy",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "Hi HN, this is Harsh, I am the developer behind Hathora. I tried making a simple multiplayer game a few years ago and, as someone with software engineering experience but no gamedev experience, I found it to be very challenging. On top of the challenges of building a single player game, you now have to constantly battle the network and latency, find ways to prevent cheating, and figure out how to make a scalable backend architecture. With Hathora my goal was to encode best practices for online multiplayer game development into a framework so developers can simply focus on implementing their game logic.<p>Some technical pieces of Hathora I wanted to highlight:<p>- Hathora includes a system I think of as “gRPC for games”. You define your API in Hathora’s declarative format and the framework spits out typesafe data models, clients, and server endpoint stubs across multiple programming languages (although currently only Typescript is implemented). Minimal packet sizes are achieved through a binary serialization format which includes a delta encoding feature, allowing the framework to efficiently synchronize state by sending data diffs.<p>- Hathora includes a Swagger-like Prototype UI generated from the API definition. This allows you to view the game state and call server methods all in realtime, letting you interact with your backend logic without writing a single line of frontend code. Once you are happy with the backend logic, you can create a fully custom frontend using any framework/technology you’d like and just use the Hathora client to communicate with the backend.<p>- By handling generic game functionality (state synchronization, messaging, persistence, etc) for you, Hathora lets you create multiplayer games with very few lines of code. For example, see chess which is implemented in under 200 lines of user code: <a href=\"https://github.com/hathora/hathora/tree/develop/examples/chess\" rel=\"nofollow\">https://github.com/hathora/hathora/tree/develop/examples/che...</a>. I also made (a massively simplified version of) Among Us in under 200 lines of code: <a href=\"https://github.com/hathora/among-us-tutorial\" rel=\"nofollow\">https://github.com/hathora/among-us-tutorial</a><p>I am looking for developers interested in making online multiplayer games to try out Hathora and give me feedback. Additionally, if the roadmap seems interesting to you I would gladly welcome contributions: <a href=\"https://docs.hathora.dev/#/roadmap\" rel=\"nofollow\">https://docs.hathora.dev/#/roadmap</a>. I’ll be around to answer questions, let me know what you think!",
  "keywords": [
    "Show HN"
  ],
  "genre": "Show HN",
  "author": {
    "@type": "Person",
    "name": "hpx7",
    "url": "https://news.ycombinator.com/user?id=hpx7"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=30442072",
  "sameAs": "https://docs.hathora.dev/#/",
  "dateCreated": "2022-02-23T15:33:58.206Z",
  "datePublished": "2022-02-23T15:30:15.000Z",
  "dateModified": "2022-02-23T15:33:58.206Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 1
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 0
    }
  ],
  "headline_zh-Hans": "Show HN: Hathora - 多人游戏开发变得简单",
  "headline_zh-Hant": "Show HN: Hathora - 多人遊戲開發變得簡單",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "嗨，HN，我是Harsh，我是Hathora背后的开发者。几年前我曾尝试制作一个简单的多人游戏，作为一个有软件工程经验但没有游戏开发经验的人，我发现它非常具有挑战性。在建立一个单人游戏的挑战之上，你现在必须不断地与网络和延迟作斗争，找到防止作弊的方法，并想出如何制作一个可扩展的后端架构。在Hathora中，我的目标是将在线多人游戏开发的最佳实践编码到一个框架中，这样开发者就可以简单地专注于实现他们的游戏逻辑。<p>我想强调Hathora的一些技术部分：<p>- Hathora包括一个我认为是 \"游戏的gRPC \"系统。你用Hathora的声明式格式定义你的API，该框架会跨多种编程语言吐出类型安全的数据模型、客户端和服务器端点存根（尽管目前只有Typescript被实现）。Minimal packet sizes are achieved through a binary serialization format which includes a delta encoding feature, allowing the framework to efficiently synchronize state by sending data diffs.<p>- Hathora includes a Swagger-like Prototype UI generated from the API definition. This allows you to view the game state and call server methods all in realtime, letting you interact with your backend logic without writing a single line of frontend code. Once you are happy with the backend logic, you can create a fully custom frontend using any framework/technology you’d like and just use the Hathora client to communicate with the backend.<p>- By handling generic game functionality (state synchronization, messaging, persistence, etc) for you, Hathora lets you create multiplayer games with very few lines of code. For example, see chess which is implemented in under 200 lines of user code: <a href=\"https://github.com/hathora/hathora/tree/develop/examples/chess\" rel=\"nofollow\">https://github.com/hathora/hathora/tree/develop/examples/che...</a>. 我还用不到200行的代码制作了（一个大规模简化的版本）《我们之间》。<a href=\"https://github.com/hathora/among-us-tutorial\" rel=\"nofollow\">https://github.com/hathora/among-us-tutorial</a><p>我正在寻找对制作在线多人游戏感兴趣的开发者来试用Hathora并给我反馈。此外，如果你对这个路线图感兴趣，我很欢迎你的贡献。<a href=\"https://docs.hathora.dev/#/roadmap\" rel=\"nofollow\">https://docs.hathora.dev/#/roadmap</a>。我将在附近回答问题，让我知道你的想法!",
  "description_zh-Hant": "嗨，HN，我是Harsh，我是Hathora背後的開發者。幾年前我曾嘗試製作一個簡單的多人遊戲，作為一個有軟件工程經驗但沒有遊戲開發經驗的人，我發現它非常具有挑戰性。在建立一個單人遊戲的挑戰之上，你現在必須不斷地與網絡和延遲作鬥爭，找到防止作弊的方法，並想出如何製作一個可擴展的後端架構。在Hathora中，我的目標是將在線多人遊戲開發的最佳實踐編碼到一個框架中，這樣開發者就可以簡單地專注於實現他們的遊戲邏輯。<p>我想強調Hathora的一些技術部分：<p>- Hathora包括一個我認為是 \"遊戲的gRPC \"系統。你用Hathora的聲明式格式定義你的API，該框架會跨多種編程語言吐出類型安全的數據模型、客戶端和服務器端點存根（儘管目前只有Typescript被實現）。Minimal packet sizes are achieved through a binary serialization format which includes a delta encoding feature, allowing the framework to efficiently synchronize state by sending data diffs.<p>- Hathora includes a Swagger-like Prototype UI generated from the API definition. This allows you to view the game state and call server methods all in realtime, letting you interact with your backend logic without writing a single line of frontend code. Once you are happy with the backend logic, you can create a fully custom frontend using any framework/technology you’d like and just use the Hathora client to communicate with the backend.<p>- By handling generic game functionality (state synchronization, messaging, persistence, etc) for you, Hathora lets you create multiplayer games with very few lines of code. For example, see chess which is implemented in under 200 lines of user code: <a href=\"https://github.com/hathora/hathora/tree/develop/examples/chess\" rel=\"nofollow\">https://github.com/hathora/hathora/tree/develop/examples/che...</a>. 我還用不到200行的代碼製作了（一個大規模簡化的版本）《我們之間》。<a href=\"https://github.com/hathora/among-us-tutorial\" rel=\"nofollow\">https://github.com/hathora/among-us-tutorial</a><p>我正在尋找對製作在線多人遊戲感興趣的開發者來試用Hathora並給我反饋。此外，如果你對這個路線圖感興趣，我很歡迎你的貢獻。<a href=\"https://docs.hathora.dev/#/roadmap\" rel=\"nofollow\">https://docs.hathora.dev/#/roadmap</a>。我將在附近回答問題，讓我知道你的想法!"
}