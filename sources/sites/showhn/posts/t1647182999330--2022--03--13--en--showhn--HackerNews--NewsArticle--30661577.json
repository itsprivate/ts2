{
  "@type": "NewsArticle",
  "identifier": "2022--03--13--en--showhn--HackerNews--NewsArticle--30661577",
  "url": "https://news.ycombinator.com/item?id=30661577",
  "headline": "Show HN: A Self-Hosted back end solution in Node.js",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "Hello everyone! I want to introduce you to the project I've been working on for some time!<p>It's called Conduit and it's a new platform to build your next application on. I've been working with similar solutions since 2014, beginning with Parse (even after it was made open-source), moving to firebase and then mostly sticking to custom backends. On 2017 I founded a Software Development agency and quickly realised that if we were to improve quality and increase speeds we need a platform to help us do that.<p>Parse was kind of outdated for us at that point, and Firebase hasn't (even after so many years) caught up to the flexibility the former provided. You can do MVPs yes, but you end up moving logic to the front-end or use the serverless functions that have many limitations and slow cold-start times. So for me and my dev team, it wasn't a solution for anything further than authentication management and push notifications.<p>So, back in 2020 I begun working on Conduit, with 3 targets: Provide common functionality out of the box, do not limit devs and lastly it should work in the same philosophy a custom backend would. This meant effectively no runtime overheads (or at the very least only minor ones), a flexible API, micro-service based architecture with each service housing a particular set of features (ex. Authentication, Database, Email etc) and of course it uses gRPC for service-to-service communications so devs can create new modules from whatever language and/or framework they want!<p>Fast-forward in 2022, we've already used in 5 production projects for clients. Our front-end teams love it, our backend teams have more free time than ever to work in more complex problems, and bugs in production have been reduced drastically. It even withstood a user surge in one project were we had more than 10.000 req/min (we spun up more instances to account for the load).<p>I'd love to answer any and all questions you have about it! And I hope you like it enough to give us a star in GitHub :D<p>Links:\nwebsite: https://getconduit.dev/ GitHub: https://github.com/ConduitPlatform/Conduit",
  "keywords": [
    "Show HN"
  ],
  "genre": "Show HN",
  "author": {
    "@type": "Person",
    "name": "kkopanidis",
    "url": "https://news.ycombinator.com/user?id=kkopanidis"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=30661577",
  "sameAs": "https://news.ycombinator.com/item?id=30661577",
  "dateCreated": "2022-03-13T14:49:59.330Z",
  "datePublished": "2022-03-13T14:38:13.000Z",
  "dateModified": "2022-03-13T14:49:59.330Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 3
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 0
    }
  ],
  "headline_zh-Hans": "Show HN: Node.js中的自我托管后端解决方案",
  "headline_zh-Hant": "Show HN: Node.js中的自我託管後端解決方案",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "大家好! 我想向你介绍我已经工作了一段时间的项目！<p>它叫做Conduit，是一个新的平台，可以在上面构建你的下一个应用程序。自2014年以来，我一直在使用类似的解决方案，从Parse开始（甚至在它被开源之后），转到Firebase，然后主要坚持使用自定义后端。2017年，我成立了一家软件开发机构，并很快意识到，如果我们要提高质量和速度，我们需要一个平台来帮助我们做到这一点。<p>Parse在当时对我们来说有点过时了，而Firebase（即使在这么多年后）也没有赶上前者提供的灵活性。你可以做MVP是的，但你最终会把逻辑转移到前端，或者使用有很多限制和缓慢的冷启动时间的无服务器函数。因此，对于我和我的开发团队来说，除了认证管理和推送通知之外，它并不是一个进一步的解决方案。<p>因此，早在2020年，我就开始着手开发Conduit，有三个目标。提供开箱即用的通用功能，不限制开发人员，最后，它的工作理念应与自定义后端相同。这意味着实际上没有运行时的开销（或者至少只有很小的开销），一个灵活的API，基于微服务的架构，每个服务容纳一组特定的功能（例如，认证、数据库、电子邮件等），当然，它使用gRPC进行服务间的通信，所以开发人员可以用任何语言和/或框架创建新的模块！<p>快到2022年，我们已经为客户在5个生产项目中使用。我们的前端团队很喜欢它，我们的后端团队有比以往更多的自由时间来处理更复杂的问题，生产中的错误也大幅减少。在一个项目中，它甚至经受住了用户激增的考验，当时我们有超过10,000个请求/分钟（我们启动了更多的实例以考虑到负载）。我希望你喜欢它，并在GitHub上给我们一颗星：D<p>链接。\n网站：https://getconduit.dev/ GitHub：https://github.com/ConduitPlatform/Conduit",
  "description_zh-Hant": "大家好! 我想向你介紹我已經工作了一段時間的項目！<p>它叫做Conduit，是一個新的平臺，可以在上面構建你的下一個應用程序。自2014年以來，我一直在使用類似的解決方案，從Parse開始（甚至在它被開源之後），轉到Firebase，然後主要堅持使用自定義後端。2017年，我成立了一家軟件開發機構，並很快意識到，如果我們要提高質量和速度，我們需要一個平臺來幫助我們做到這一點。<p>Parse在當時對我們來說有點過時了，而Firebase（即使在這麼多年後）也沒有趕上前者提供的靈活性。你可以做MVP是的，但你最終會把邏輯轉移到前端，或者使用有很多限制和緩慢的冷啟動時間的無服務器函數。因此，對於我和我的開發團隊來說，除了認證管理和推送通知之外，它並不是一個進一步的解決方案。<p>因此，早在2020年，我就開始著手開發Conduit，有三個目標。提供開箱即用的通用功能，不限制開發人員，最後，它的工作理念應與自定義後端相同。這意味著實際上沒有運行時的開銷（或者至少只有很小的開銷），一個靈活的API，基於微服務的架構，每個服務容納一組特定的功能（例如，認證、數據庫、電子郵件等），當然，它使用gRPC進行服務間的通信，所以開發人員可以用任何語言和/或框架創建新的模塊！<p>快到2022年，我們已經為客戶在5個生產項目中使用。我們的前端團隊很喜歡它，我們的後端團隊有比以往更多的自由時間來處理更復雜的問題，生產中的錯誤也大幅減少。在一個項目中，它甚至經受住了用戶激增的考驗，當時我們有超過10,000個請求/分鐘（我們啟動了更多的實例以考慮到負載）。我希望你喜歡它，並在GitHub上給我們一顆星：D<p>鏈接。\n網站：https://getconduit.dev/ GitHub：https://github.com/ConduitPlatform/Conduit"
}