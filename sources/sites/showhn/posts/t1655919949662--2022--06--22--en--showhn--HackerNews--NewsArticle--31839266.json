{
  "@type": "NewsArticle",
  "identifier": "2022--06--22--en--showhn--HackerNews--NewsArticle--31839266",
  "url": "https://news.ycombinator.com/item?id=31839266",
  "headline": "Show HN: Pragmatic Formal Modeling (Tutorial series with runnable examples)",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "Formal modeling is a mathematical approach for designing and checking correctness of software systems. It focuses on standard software engineering and distributed systems problems of the sort programmers face every day. It takes a pragmatic engineering approach: each problem starts with UML diagrams, design decisions and sometimes even a requirements document. We work through how to get from a whiteboard design to an initial mathematical model. Then we refine it based on logical errors found by the model checker, which return with a level of detail unheard of in a standard debugger. Formal modeling is a skill every engineer should have in their toolbox.<p>All the examples are downloadable, and their is a quick setup section at the start. Additionally, there is an explorable model error debugger build right into the website.<p>https://elliotswart.github.io/pragmaticformalmodeling/",
  "keywords": [
    "Show HN"
  ],
  "genre": "Show HN",
  "author": {
    "@type": "Person",
    "name": "elliotswart",
    "url": "https://news.ycombinator.com/user?id=elliotswart"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=31839266",
  "sameAs": "https://news.ycombinator.com/item?id=31839266",
  "dateCreated": "2022-06-22T17:45:49.662Z",
  "datePublished": "2022-06-22T17:43:26.000Z",
  "dateModified": "2022-06-22T17:45:49.662Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 1
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 0
    }
  ],
  "headline_zh-Hans": "Show HN: 务实的形式化建模（带可运行实例的教程系列）\n",
  "headline_zh-Hant": "Show HN: 務實的形式化建模（帶可運行實例的教程系列）\n",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "形式化建模是一种用于设计和检查软件系统正确性的数学方法。它侧重于程序员每天都要面对的标准软件工程和分布式系统问题。它采取一种务实的工程方法：每个问题都从UML图、设计决定，有时甚至是需求文件开始。我们研究如何从一个白板设计到一个初始的数学模型。然后，我们根据模型检查器发现的逻辑错误来完善它，其返回的详细程度在标准调试器中闻所未闻。形式化建模是每个工程师都应该在他们的工具箱中拥有的技能。<p>所有的例子都可以下载，他们在开始时有一个快速设置部分。此外，网站上还有一个可探索的模型错误调试器。<p>https://elliotswart.github.io/pragmaticformalmodeling/\n",
  "description_zh-Hant": "形式化建模是一種用於設計和檢查軟件系統正確性的數學方法。它側重於程序員每天都要面對的標準軟件工程和分佈式系統問題。它採取一種務實的工程方法：每個問題都從UML圖、設計決定，有時甚至是需求文件開始。我們研究如何從一個白板設計到一個初始的數學模型。然後，我們根據模型檢查器發現的邏輯錯誤來完善它，其返回的詳細程度在標準調試器中聞所未聞。形式化建模是每個工程師都應該在他們的工具箱中擁有的技能。<p>所有的例子都可以下載，他們在開始時有一個快速設置部分。此外，網站上還有一個可探索的模型錯誤調試器。<p>https://elliotswart.github.io/pragmaticformalmodeling/\n"
}