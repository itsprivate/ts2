{
  "@type": "NewsArticle",
  "identifier": "2022--08--15--en--showhn--HackerNews--NewsArticle--32466839",
  "url": "https://news.ycombinator.com/item?id=32466839",
  "headline": "Show HN: Imagor v1 – fast image processing server in Go and libvips",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "Imagor is a fast, Docker-ready image processing server written in Go, with libvips. The v1 milestone has got more advancements to its internals.<p>At the moment, all existing popular Go + libvips image applications (imgproxy, imaginary, bimg etc.) bridge libvips through buffer. While these are all good with normal web images, the latency and memory overhead can be noticeable when working through large, raw images, as they are all loading the whole image buffer in memory, sequentially.<p>Imagor v1 now bridges libvips through streams (i.e. Go io.Reader/Seeker/Closer). This greatly increases network throughput especially with network sources like HTTPs, S3, GCS, by giving the ability to overlap processing pipelines.<p>With streaming in place, same goes for image Exif metadata. Imagor can try to retrieve data just enough to extract the header, without reading and processing the whole image in memory.<p>Though of course cgo + stream means a lot of moving parts that can go wrong. Imagor has increased test coverages since then. It has been running in production for months, serving over a million of images everyday. Feel free to create a pull request or report an issue if you found bugs, suggestions or enhancements.",
  "keywords": [
    "Show HN"
  ],
  "genre": "Show HN",
  "author": {
    "@type": "Person",
    "name": "cshum",
    "url": "https://news.ycombinator.com/user?id=cshum"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=32466839",
  "sameAs": "https://github.com/cshum/imagor/releases/tag/v1.0.0",
  "dateCreated": "2022-08-15T07:43:39.758Z",
  "datePublished": "2022-08-15T07:30:03.000Z",
  "dateModified": "2022-08-15T07:43:39.758Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 1
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 0
    }
  ],
  "headline_zh-Hans": "Show HN: Imagor v1 - Go和libvips中的快速图像处理服务器\n",
  "headline_zh-Hant": "Show HN: Imagor v1 - Go和libvips中的快速圖像處理服務器\n",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "Imagor是一个用Go语言编写的快速、适用于Docker的图像处理服务器，并使用libvips。<p>目前，所有流行的Go + libvips图像应用程序（imgproxy、imaginary、bimg等）都是通过缓冲区连接libvips的。虽然这些程序在处理普通的网络图像时都很好，但在处理大型原始图像时，延迟和内存开销会很明显，因为它们都是在内存中按顺序加载整个图像缓冲区。<p>Imagor v1现在通过流（即Go io.Reader/Seeker/Closer）连接libvips。这极大地提高了网络吞吐量，尤其是像HTTPs、S3、GCS这样的网络资源，使其能够重叠处理管线。Imagor可以尝试检索只够提取头的数据，而不需要在内存中读取和处理整个图像。<p>当然，cgo+流意味着有很多移动部件可能出错。从那时起，Imagor已经增加了测试覆盖率。它已经在生产中运行了几个月，每天提供超过一百万张的图片。如果你发现了错误、建议或改进，请随时创建一个拉动请求或报告一个问题。\n",
  "description_zh-Hant": "Imagor是一個用Go語言編寫的快速、適用於Docker的圖像處理服務器，並使用libvips。<p>目前，所有流行的Go + libvips圖像應用程序（imgproxy、imaginary、bimg等）都是通過緩衝區連接libvips的。雖然這些程序在處理普通的網絡圖像時都很好，但在處理大型原始圖像時，延遲和內存開銷會很明顯，因為它們都是在內存中按順序加載整個圖像緩衝區。<p>Imagor v1現在通過流（即Go io.Reader/Seeker/Closer）連接libvips。這極大地提高了網絡吞吐量，尤其是像HTTPs、S3、GCS這樣的網絡資源，使其能夠重疊處理管線。Imagor可以嘗試檢索只夠提取頭的數據，而不需要在內存中讀取和處理整個圖像。<p>當然，cgo+流意味著有很多移動部件可能出錯。從那時起，Imagor已經增加了測試覆蓋率。它已經在生產中運行了幾個月，每天提供超過一百萬張的圖片。如果你發現了錯誤、建議或改進，請隨時創建一個拉動請求或報告一個問題。\n"
}