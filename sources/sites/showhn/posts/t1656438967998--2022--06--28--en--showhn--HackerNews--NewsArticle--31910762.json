{
  "@type": "NewsArticle",
  "identifier": "2022--06--28--en--showhn--HackerNews--NewsArticle--31910762",
  "url": "https://news.ycombinator.com/item?id=31910762",
  "headline": "Show HN: Inngest – an open-source event-driven queue",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "Hi HN!  We’re Tony and Dan, the founders of Inngest - https://www.inngest.com.<p>Previously, Tony ran engineering at https://www.uniformteeth.com/ and Dan was the CTO of https://buffer.com/.  At both places, we had to build and manage a lot of complex async logic.  You could say that Buffer is one big queue, and at Uniform we had lots of logic to run for compliance… managed via queues.<p>Existing queueing solutions have pretty terrible UX. We’ve been working on an event-driven queueing system [0].  We make it simple for you to write delayed or background jobs by triggering step functions from JSON-based events.<p>At a high level, Inngest does two things:<p>- Ingest events from your systems via HTTP (pun intended)<p>- Triggers serverless functions in response to specific events — async, either immediately or delayed.<p>This allows you to build out async functions (eg. background jobs, handling webhooks) much faster, without worrying about config, queues, scaffolding, boilerplate, or infra.  Because of the decoupling, it also means cleaner code.  We talk about the benefits here [1].<p>Technicals and how it’s different:<p>Functions are declarative.  They specify which events trigger them, with optional conditionals.  This is great because you can then deploy functions independently from your core systems, and you get things like canary deploys, plus immediate rollbacks.<p>Each function can have many steps, represented as a DAG.  Each step can be <i>any</i> code — an AWS function, custom code in a container, an HTTP call, etc.  Edges of the DAG can also have conditions for traversal, and can “pause” until another event comes in, with TTLs and timeout (eg. after signup, run step 1, wait for a user to do something else, then run the next step).<p>Because the functions are event driven, we also statically type and version events for you.  This lets you inspect and generate SDKs for events, or to fail early on invalid data.  It also lets you replay functions, test with historical data, or deploy functions and re-run historical events.<p>Architecturally, we’ve focused on simple standards that are easy to learn and adopt.  Events are published via HTTP requests.  Functions use args &amp; stdout.<p>You can get started without knowing any implementation details.  You only need to send events via POST requests and write functions that react to them — nothing else required.<p>What people use us for:<p>- A replacement for their current queueing infrastructure (eg. celery).<p>- Running functions after receiving webhooks<p>- Running business logic when users perform specific actions (eg. publishing things at a specific time)<p>- Handling coordinated logic (eg. when a user signs up, wait for a specific event to come in then run another step)<p>Where we’re at:<p>We’ve open sourced our core execution engine [2], which allows you to run an in-memory environment locally with a single command.  We’re working on opening more and more of the platform to allow you to self host — that’s currently our main goal.  Right now, you can use us “serverless”.  Because we record function state, we charge per ‘step’ of a function invoked.<p>We’ve documented our core OS architecture [3], and we’ve also released the function spec and interfaces in our repo. We’ve talked more about about goals, vision, and why in our open sourcing post [4]. There’s also a minimal demo w/ a Next.js backend [5].<p>We know we’re far from feature complete. There’s so much more we can do.  If there’s things you’d like to see, feedback, or improvements, please let us know — we’d love to hear from you and make this better, and get your initial thoughts.<p>[0]: https://www.inngest.com<p>[1]: https://www.inngest.com/docs/what-is-inngest<p>[2]: https://www.github.com/inngest/inngest-cli<p>[3]: https://www.inngest.com/docs/high-level-architecture<p>[4]: https://www.inngest.com/blog/open-source-event-driven-queue<p>[5]: https://github.com/inngest/demo-nextjs-full-stack",
  "keywords": [
    "Show HN"
  ],
  "genre": "Show HN",
  "author": {
    "@type": "Person",
    "name": "tonyhb",
    "url": "https://news.ycombinator.com/user?id=tonyhb"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=31910762",
  "sameAs": "https://news.ycombinator.com/item?id=31910762",
  "dateCreated": "2022-06-28T17:56:07.998Z",
  "datePublished": "2022-06-28T17:49:12.000Z",
  "dateModified": "2022-06-28T17:56:07.998Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 2
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 1
    }
  ],
  "headline_zh-Hans": "Show HN: Inngest - 一个开源的事件驱动的队列\n",
  "headline_zh-Hant": "Show HN: Inngest - 一個開源的事件驅動的隊列\n",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "Hi HN!  We’re Tony and Dan, the founders of Inngest - https://www.inngest.com.<p>Previously, Tony ran engineering at https://www.uniformteeth.com/ and Dan was the CTO of https://buffer.com/.  At both places, we had to build and manage a lot of complex async logic.  You could say that Buffer is one big queue, and at Uniform we had lots of logic to run for compliance… managed via queues.<p>Existing queueing solutions have pretty terrible UX. We’ve been working on an event-driven queueing system [0].  We make it simple for you to write delayed or background jobs by triggering step functions from JSON-based events.<p>At a high level, Inngest does two things:<p>- Ingest events from your systems via HTTP (pun intended)<p>- Triggers serverless functions in response to specific events — async, either immediately or delayed. <p>This allows you to build out async functions (eg. background jobs, handling webhooks) much faster, without worrying about config, queues, scaffolding, boilerplate, or infra.  Because of the decoupling, it also means cleaner code.  We talk about the benefits here [1].<p>Technicals and how it’s different:<p>Functions are declarative.  They specify which events trigger them, with optional conditionals.  This is great because you can then deploy functions independently from your core systems, and you get things like canary deploys, plus immediate rollbacks.<p>Each function can have many steps, represented as a DAG.  每个步骤都可以是<i>任何</i>代码--AWS函数、容器中的自定义代码、HTTP调用等。 DAG的边缘也可以有条件进行遍历，并且可以 \"暂停\"，直到另一个事件出现，并有TTL和超时（例如，在注册后，运行步骤1，等待用户做其他事情，然后运行下一个步骤）。<p>由于函数是事件驱动的，我们也为你静态地对事件进行类型和版本。 这可以让你检查和生成事件的SDK，或者在无效数据时提前失败。 它还可以让您重放函数，用历史数据进行测试，或部署函数并重新运行历史事件。<p>在架构上，我们专注于简单的标准，易于学习和采用。 事件是通过HTTP请求发布的。 函数使用args &amp; stdout.<p>您无需了解任何实施细节就可以开始使用。 你只需要通过POST请求发送事件，并编写对其做出反应的函数--其他什么都不需要。<p>人们使用我们的原因：<p>- 替代他们当前的队列基础设施（如celery）。<p>- 在收到webhooks后运行函数<p>- 在用户执行特定的动作时运行业务逻辑（如。<p>- 处理协调的逻辑（例如，当用户注册时，等待一个特定的事件，然后运行另一个步骤）<p>我们的进展：<p>我们已经开源了我们的核心执行引擎[2]，它允许你用一个命令在本地运行一个内存环境。 我们正在努力开放越来越多的平台，让你可以自我托管--这是我们目前的主要目标。 现在，你可以使用我们的 \"无服务器\"。 因为我们记录了函数状态，所以我们按调用函数的 \"步骤 \"收费。<p>我们已经记录了我们的核心操作系统架构[3]，我们也在我们的repo中发布了函数规范和接口。我们在开放源代码的帖子[4]中谈到了更多关于目标、愿景和原因。还有一个使用Next.js后台的最小演示[5]。<p>我们知道我们的功能还远远没有完成。我们还有很多事情可以做。 如果有你想看到的东西、反馈或改进，请让我们知道--我们很想听到你的意见，让它变得更好，并得到你的初步想法。<p>[0]: https://www.inngest.com<p>[1]: https://www.inngest.com/docs/what-is-inngest<p>[2]: https://www.github.com/inngest/inngest-cli<p>[3]: https://www.inngest.com/docs/high-level-architecture<p>[4]: https://www.inngest.com/blog/open-source-event-driven-queue<p>[5]: https://github.com/inngest/demo-nextjs-full-stack\n",
  "description_zh-Hant": "Hi HN!  We’re Tony and Dan, the founders of Inngest - https://www.inngest.com.<p>Previously, Tony ran engineering at https://www.uniformteeth.com/ and Dan was the CTO of https://buffer.com/.  At both places, we had to build and manage a lot of complex async logic.  You could say that Buffer is one big queue, and at Uniform we had lots of logic to run for compliance… managed via queues.<p>Existing queueing solutions have pretty terrible UX. We’ve been working on an event-driven queueing system [0].  We make it simple for you to write delayed or background jobs by triggering step functions from JSON-based events.<p>At a high level, Inngest does two things:<p>- Ingest events from your systems via HTTP (pun intended)<p>- Triggers serverless functions in response to specific events — async, either immediately or delayed. <p>This allows you to build out async functions (eg. background jobs, handling webhooks) much faster, without worrying about config, queues, scaffolding, boilerplate, or infra.  Because of the decoupling, it also means cleaner code.  We talk about the benefits here [1].<p>Technicals and how it’s different:<p>Functions are declarative.  They specify which events trigger them, with optional conditionals.  This is great because you can then deploy functions independently from your core systems, and you get things like canary deploys, plus immediate rollbacks.<p>Each function can have many steps, represented as a DAG.  每個步驟都可以是<i>任何</i>代碼--AWS函數、容器中的自定義代碼、HTTP調用等。 DAG的邊緣也可以有條件進行遍歷，並且可以 \"暫停\"，直到另一個事件出現，並有TTL和超時（例如，在註冊後，運行步驟1，等待用戶做其他事情，然後運行下一個步驟）。<p>由於函數是事件驅動的，我們也為你靜態地對事件進行類型和版本。 這可以讓你檢查和生成事件的SDK，或者在無效數據時提前失敗。 它還可以讓您重放函數，用歷史數據進行測試，或部署函數並重新運行歷史事件。<p>在架構上，我們專注於簡單的標準，易於學習和採用。 事件是通過HTTP請求發佈的。 函數使用args &amp; stdout.<p>您無需瞭解任何實施細節就可以開始使用。 你只需要通過POST請求發送事件，並編寫對其做出反應的函數--其他什麼都不需要。<p>人們使用我們的原因：<p>- 替代他們當前的隊列基礎設施（如celery）。<p>- 在收到webhooks後運行函數<p>- 在用戶執行特定的動作時運行業務邏輯（如。<p>- 處理協調的邏輯（例如，當用戶註冊時，等待一個特定的事件，然後運行另一個步驟）<p>我們的進展：<p>我們已經開源了我們的核心執行引擎[2]，它允許你用一個命令在本地運行一個內存環境。 我們正在努力開放越來越多的平臺，讓你可以自我託管--這是我們目前的主要目標。 現在，你可以使用我們的 \"無服務器\"。 因為我們記錄了函數狀態，所以我們按調用函數的 \"步驟 \"收費。<p>我們已經記錄了我們的核心操作系統架構[3]，我們也在我們的repo中發佈了函數規範和接口。我們在開放源代碼的帖子[4]中談到了更多關於目標、願景和原因。還有一個使用Next.js後臺的最小演示[5]。<p>我們知道我們的功能還遠遠沒有完成。我們還有很多事情可以做。 如果有你想看到的東西、反饋或改進，請讓我們知道--我們很想聽到你的意見，讓它變得更好，並得到你的初步想法。<p>[0]: https://www.inngest.com<p>[1]: https://www.inngest.com/docs/what-is-inngest<p>[2]: https://www.github.com/inngest/inngest-cli<p>[3]: https://www.inngest.com/docs/high-level-architecture<p>[4]: https://www.inngest.com/blog/open-source-event-driven-queue<p>[5]: https://github.com/inngest/demo-nextjs-full-stack\n"
}