{
  "@type": "NewsArticle",
  "identifier": "2022--07--07--en--showhn--HackerNews--NewsArticle--32017724",
  "url": "https://news.ycombinator.com/item?id=32017724",
  "headline": "Show HN: PostgreSQL proxy for integration testing things you don't control",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "Hi hackers!<p>I recently tried to get a stack of microservices running in a docker-compose sandbox for integration testing using their original (e.g. prod) configuration.\nThis means I didn't know what credentials they'd be using or what database name.<p>So I hacked together a postgresql proxy using an existing project (<a href=\"https://github.com/KnifeMaster007/pgAuthProxy\" rel=\"nofollow\">https://github.com/KnifeMaster007/pgAuthProxy</a>) and simply allow any credentials to connect and make sure the desired database exists before returning control to the caller.<p>Sharing this in the hopes it is useful for someone else.<p>Lucas",
  "keywords": [
    "Show HN"
  ],
  "genre": "Show HN",
  "author": {
    "@type": "Person",
    "name": "luqasn",
    "url": "https://news.ycombinator.com/user?id=luqasn"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=32017724",
  "sameAs": "https://github.com/luqasn/postgres-magicdb",
  "dateCreated": "2022-07-07T18:59:18.174Z",
  "datePublished": "2022-07-07T18:42:22.000Z",
  "dateModified": "2022-07-07T18:59:18.174Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 1
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 0
    }
  ],
  "headline_zh-Hans": "Show HN: 用于集成测试你不控制的东西的PostgreSQL代理\n",
  "headline_zh-Hant": "Show HN: 用於集成測試你不控制的東西的PostgreSQL代理\n",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "Hi hackers!<p>I recently tried to get a stack of microservices running in a docker-compose sandbox for integration testing using their original (e.g. prod) configuration.\nThis means I didn't know what credentials they'd be using or what database name.<p>So I hacked together a postgresql proxy using an existing project (<a href=\"https://github.com/KnifeMaster007/pgAuthProxy\" rel=\"nofollow\">https://github.com/KnifeMaster007/pgAuthProxy</a>) and simply allow any credentials to connect and make sure the desired database exists before returning control to the caller.<p>Sharing this in the hopes it is useful for someone else.<p>Lucas\n",
  "description_zh-Hant": "Hi hackers!<p>I recently tried to get a stack of microservices running in a docker-compose sandbox for integration testing using their original (e.g. prod) configuration.\nThis means I didn't know what credentials they'd be using or what database name.<p>So I hacked together a postgresql proxy using an existing project (<a href=\"https://github.com/KnifeMaster007/pgAuthProxy\" rel=\"nofollow\">https://github.com/KnifeMaster007/pgAuthProxy</a>) and simply allow any credentials to connect and make sure the desired database exists before returning control to the caller.<p>Sharing this in the hopes it is useful for someone else.<p>Lucas\n"
}