{
  "@type": "NewsArticle",
  "identifier": "2022--07--22--en--besthn--HackerNews--NewsArticle--32186203",
  "url": "https://news.ycombinator.com/item?id=32186203",
  "headline": "Ask HN: What are some 'cool' but obscure data structures you know about?",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "I'm very interested in what types of interesting data structures are out there HN. Totally your preference.<p>I'll start: bloom filters. Lets you test if a value is definitely NOT in a list of pre-stored values (or POSSIBLY in a list - with adjustable probability that influences storage of the values.)<p>Good use-case: routing. Say you have a list of 1 million IPs that are black listed. A trivial algorithm would be to compare every element of the set with a given IP. The time complexity grows with the number of elements. Not so with a bloom filter! A bloom filter is one of the few data structures whose time complexity does not grow with the number of elements due to the 'keys' not needing to be stored ('search' and 'insert' is based on the number of hash functions.)<p>Bonus section: Golomb Coded Sets are similar to bloom filters but the storage space is much smaller. Worse performance though.",
  "keywords": [
    "Ask HN"
  ],
  "genre": "Ask HN",
  "author": {
    "@type": "Person",
    "name": "Uptrenda",
    "url": "https://news.ycombinator.com/user?id=Uptrenda"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=32186203",
  "sameAs": "https://news.ycombinator.com/item?id=32186203",
  "dateCreated": "2022-07-22T04:02:34.405Z",
  "datePublished": "2022-07-21T22:50:29.000Z",
  "dateModified": "2022-07-22T04:02:34.405Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 238
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 148
    }
  ],
  "headline_zh-Hans": "Ask HN: 你知道哪些 \"酷 \"但晦涩难懂的数据结构？\n",
  "headline_zh-Hant": "Ask HN: 你知道哪些 \"酷 \"但晦澀難懂的數據結構？\n",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "我对有哪些有趣的数据结构类型非常感兴趣，HN。完全是你的偏好。<p>我先说：Bloom过滤器。让你测试一个值是否绝对不在预先存储的值的列表中（或可能在列表中--有可调整的概率，影响值的存储。假设你有一个包含100万个被列入黑名单的IP的列表。一个微不足道的算法是将该集合的每个元素与给定的IP进行比较。时间复杂度随着元素数量的增加而增加。布洛姆过滤器则不然。布隆过滤器是少数几个时间复杂度不随元素数量增长的数据结构之一，这是因为 \"键 \"不需要被存储（\"搜索 \"和 \"插入 \"是基于哈希函数的数量。Golomb编码集类似于Bloom过滤器，但存储空间要小得多。不过性能更差。\n",
  "description_zh-Hant": "我對有哪些有趣的數據結構類型非常感興趣，HN。完全是你的偏好。<p>我先說：Bloom過濾器。讓你測試一個值是否絕對不在預先存儲的值的列表中（或可能在列表中--有可調整的概率，影響值的存儲。假設你有一個包含100萬個被列入黑名單的IP的列表。一個微不足道的算法是將該集合的每個元素與給定的IP進行比較。時間複雜度隨著元素數量的增加而增加。布洛姆過濾器則不然。布隆過濾器是少數幾個時間複雜度不隨元素數量增長的數據結構之一，這是因為 \"鍵 \"不需要被存儲（\"搜索 \"和 \"插入 \"是基於哈希函數的數量。Golomb編碼集類似於Bloom過濾器，但存儲空間要小得多。不過性能更差。\n"
}