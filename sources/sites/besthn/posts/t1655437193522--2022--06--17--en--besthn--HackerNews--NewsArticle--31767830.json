{
  "@type": "NewsArticle",
  "identifier": "2022--06--17--en--besthn--HackerNews--NewsArticle--31767830",
  "url": "https://news.ycombinator.com/item?id=31767830",
  "headline": "Show HN: Recut automatically removes silence from videos – built with Tauri",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "I released a new version of Recut recently, rewritten from the ground up using Rust, Svelte, Tauri, TypeScript, and Tailwind (RUSTTT stack for the win!). It's the first app I've built with Tauri and I've really enjoyed it.<p>Some back story: Recut is a tool I built to speed up my screencast editing workflow. It's like a lightweight single-purpose video editor. It chops out the pauses, with some knobs to tweak how closely it cuts and what it leaves in, and lets you get a live preview of what it'll look and sound like with the cuts applied. It can then export to a handful of other editors, nondestructively, so that you can use the full capabilities of a &quot;real&quot; video editor.<p>It was originally a native Mac app written in Swift, and people kept asking for a Windows version. I had learned Swift and macOS development to build it originally. So as a solo developer, I had some choices to make. Keep it Mac-only? Learn <i>another</i> whole language + UI framework, rebuild the app, and maintain two codebases? Rebuild the app with a cross-platform toolkit?<p>I'd had experience with Qt and C++ in years past, but I honestly didn't love the idea of getting back into C++ and dealing with the inevitable hard-to-debug segfaults. I'd had more recent experience as a web developer, but I was worried about performance bottlenecks. I actually started down the path of building Recut in Electron and Rust (using NAPI-RS for bindings) and it looked promising, but I was still worried about the bloat of Electron.<p>A few months in, I took a closer look at Tauri, and ported the whole app from Electron in a week or so. Most of the heavy lifting was already in Rust, and the UI stuff pretty much &quot;just worked&quot;. The biggest change was the bindings between JS and Rust.<p>Working with Tauri has been nice. I especially like their &quot;State&quot; system, which gives you an easy way to keep app-wide state on the Rust side, and inject specific parts of it into functions as-needed. I also really like how easy it is to write a Rust function and expose it to JS. The process model feels a lot easier to work with compared to Electron's split between renderer and main and preload, where you have to pay the cost of passing messages between them lest you ruin the security. Tauri's message-passing has a decent amount of overhead too, but I dealt with that by avoiding sending large amounts of data between JS &lt;-&gt; Rust and it's been fine.<p>The Tauri folks on Discord were a big help too (shout out to Fabian for the help when I ran into weird edge cases). I think Tauri has a bright future! Definitely worth a look if you know web tech and want to make cross-platform apps.",
  "keywords": [
    "Show HN"
  ],
  "genre": "Show HN",
  "author": {
    "@type": "Person",
    "name": "dceddia",
    "url": "https://news.ycombinator.com/user?id=dceddia"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=31767830",
  "sameAs": "https://getrecut.com/",
  "dateCreated": "2022-06-17T03:39:53.522Z",
  "datePublished": "2022-06-16T16:19:30.000Z",
  "dateModified": "2022-06-17T03:39:53.522Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 201
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 68
    }
  ],
  "headline_zh-Hans": "Show HN: Recut自动删除视频中的静音--用Tauri构建的\n",
  "headline_zh-Hant": "Show HN: Recut自動刪除視頻中的靜音--用Tauri構建的\n",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "I released a new version of Recut recently, rewritten from the ground up using Rust, Svelte, Tauri, TypeScript, and Tailwind (RUSTTT stack for the win!). It's the first app I've built with Tauri and I've really enjoyed it.<p>Some back story: Recut is a tool I built to speed up my screencast editing workflow. It's like a lightweight single-purpose video editor. It chops out the pauses, with some knobs to tweak how closely it cuts and what it leaves in, and lets you get a live preview of what it'll look and sound like with the cuts applied. It can then export to a handful of other editors, nondestructively, so that you can use the full capabilities of a &quot;real&quot; video editor.<p>It was originally a native Mac app written in Swift, and people kept asking for a Windows version. I had learned Swift and macOS development to build it originally. So as a solo developer, I had some choices to make. Keep it Mac-only? Learn <i>another</i> whole language + UI framework, rebuild the app, and maintain two codebases? Rebuild the app with a cross-platform toolkit?<p>I'd had experience with Qt and C++ in years past, but I honestly didn't love the idea of getting back into C++ and dealing with the inevitable hard-to-debug segfaults. I'd had more recent experience as a web developer, but I was worried about performance bottlenecks. 实际上，我开始在Electron和Rust中构建Recut（使用NAPI-RS进行绑定），它看起来很有前途，但我仍然担心Electron的臃肿。<p>几个月后，我仔细研究了Tauri，并在一周左右的时间内从Electron移植了整个应用程序。大部分繁重的工作已经在Rust中完成了，而且UI的东西几乎都能正常使用。最大的变化是JS和Rust之间的绑定。<p>与Tauri的合作很好。我特别喜欢他们的&quot;State&quot;系统，它为你提供了一种简单的方法，让你在Rust端保留整个应用程序的状态，并根据需要将其特定部分注入函数中。我也非常喜欢写一个Rust函数并将其暴露给JS的方式。与Electron在渲染器、主程序和预加载之间的分割相比，进程模型感觉要容易得多，在那里你必须支付在它们之间传递消息的成本，以免你破坏了安全性。Tauri的消息传递也有相当大的开销，但我通过避免在JS &lt;-&gt; Rust之间发送大量的数据来处理这个问题，结果很好。<p> Discord上的Tauri人也提供了很大的帮助（当我遇到奇怪的边缘情况时，向Fabian喊话，感谢他的帮助）。我认为Tauri有一个光明的未来! 如果你了解网络技术并想制作跨平台的应用程序，绝对值得一看。\n",
  "description_zh-Hant": "I released a new version of Recut recently, rewritten from the ground up using Rust, Svelte, Tauri, TypeScript, and Tailwind (RUSTTT stack for the win!). It's the first app I've built with Tauri and I've really enjoyed it.<p>Some back story: Recut is a tool I built to speed up my screencast editing workflow. It's like a lightweight single-purpose video editor. It chops out the pauses, with some knobs to tweak how closely it cuts and what it leaves in, and lets you get a live preview of what it'll look and sound like with the cuts applied. It can then export to a handful of other editors, nondestructively, so that you can use the full capabilities of a &quot;real&quot; video editor.<p>It was originally a native Mac app written in Swift, and people kept asking for a Windows version. I had learned Swift and macOS development to build it originally. So as a solo developer, I had some choices to make. Keep it Mac-only? Learn <i>another</i> whole language + UI framework, rebuild the app, and maintain two codebases? Rebuild the app with a cross-platform toolkit?<p>I'd had experience with Qt and C++ in years past, but I honestly didn't love the idea of getting back into C++ and dealing with the inevitable hard-to-debug segfaults. I'd had more recent experience as a web developer, but I was worried about performance bottlenecks. 實際上，我開始在Electron和Rust中構建Recut（使用NAPI-RS進行綁定），它看起來很有前途，但我仍然擔心Electron的臃腫。<p>幾個月後，我仔細研究了Tauri，並在一週左右的時間內從Electron移植了整個應用程序。大部分繁重的工作已經在Rust中完成了，而且UI的東西幾乎都能正常使用。最大的變化是JS和Rust之間的綁定。<p>與Tauri的合作很好。我特別喜歡他們的&quot;State&quot;系統，它為你提供了一種簡單的方法，讓你在Rust端保留整個應用程序的狀態，並根據需要將其特定部分注入函數中。我也非常喜歡寫一個Rust函數並將其暴露給JS的方式。與Electron在渲染器、主程序和預加載之間的分割相比，進程模型感覺要容易得多，在那裡你必須支付在它們之間傳遞消息的成本，以免你破壞了安全性。Tauri的消息傳遞也有相當大的開銷，但我通過避免在JS &lt;-&gt; Rust之間發送大量的數據來處理這個問題，結果很好。<p> Discord上的Tauri人也提供了很大的幫助（當我遇到奇怪的邊緣情況時，向Fabian喊話，感謝他的幫助）。我認為Tauri有一個光明的未來! 如果你瞭解網絡技術並想製作跨平臺的應用程序，絕對值得一看。\n"
}