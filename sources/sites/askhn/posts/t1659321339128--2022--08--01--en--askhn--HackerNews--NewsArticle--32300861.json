{
  "@type": "NewsArticle",
  "identifier": "2022--08--01--en--askhn--HackerNews--NewsArticle--32300861",
  "url": "https://news.ycombinator.com/item?id=32300861",
  "headline": "Ask HN: How do you manage VMs on your workstations?",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "Preamble:<p>I am yet to find a structured, comfortable and sustainable way to manage local VMs. I'm  usually falling back to just Virtualbox with the disk file being a reoccurring annoyance and liability. I must have 100s GB of files scattered around in old backups where I'm not sure what's inside. Reproducibility and  efficient use of resources is an issue. I'd also like to be quickly set up and tear down VMs a - much like Qubes OS.<p>I imagine many of you have similar scenarios, which is prompting this post.<p>Some use-cases could include:<p><pre><code>  * Build environment for large projects with relatively complex pipelines where I have multiple on current configurations and checkouts\n    * Examples: Various Linux dists, AOSP forks, embedded projects\n  * Persisted isolated &quot;persona&quot; environments for e.g. web browsing and development, routing all its traffic through some particular gateway or proxy\n  * Work environments for recording screencasts/demos\n  * Pentesting\n  * (Semi-) permanent services with exposed ports\n  * Working on a VM remotely from a laptop (where the laptop is on Wayland)\n</code></pre>\nI already host a lot of stuff on actual servers (tools include: Linux,Ansible,Terraform,Kubernetes/Nomad,Consul). While I'd love to use Terraform here, I'm not really intending to bring the machine into a cluster or anything like that.<p>Some requirements and wishes:<p><pre><code>  * It should be possible to somehow manage the entire configuration in a git repo\n  * Declarative configuration\n  * I can interact with GUI applications (e.g. disposable browser window)\n  * Selectively share Wayland clipboard\n  * Reasonably straightforward routing config (e.g. &quot;route all connections on this VM through whonix&quot;)\n  * Some form of remote desktop\n  * VM has its own kernel\n  * Portable: If I bring the configuration and artefacts it should be straightforward to migrate to a new host OS.\n  * Composability / inheritance for environments.\n</code></pre>\nA lot of this is close to QubesOS, except:<p><pre><code>  * I want Wayland. Qubes will take its time to get there.\n  * More in general, I suspect qubes dom0 is not really configurable to behave like I want without significant patches to the point of becoming a new distro.\n  * Still find maintaining Qubes and keeping updated has not been an ideal experience.\n  * Not portable - at this point I'm not looking for a new host OS.\n  * Not sure how to set up the remoting\n</code></pre>\nAs for Vagrant, it checks a lot of the boxes (heh). I don't have a ton of experience with it but been using it in projects every now and then and wrote my own Vagrantfiles maybe a handful times. It does seem perfect for dev or build workspaces - in practice I usually use Dockerfiles here.<p>libvirt has a variety of management interfaces and built-in remote support.<p>Did do some basic testing with existing Terraform providers for libvirt, virtualbox, and vagrant - the libvirt one seems mature enough.<p>So for now my candidate pieces here:<p><pre><code>  libvirtd\n  qemu/kvm\n  virtualbox\n  vagrant\n  terraform\n  kvm\n  whonix\n  packer\n</code></pre>\nNow, while I have at least some rudimentary experience with a lot pof these, I am a bit at a loss for the best way to tie them together and which I even want in the mix. For example, one possible configuration would be:<p>Terraform -&gt; terraform-provider-vagrant -&gt; vagrant -&gt; vagrant-libvirt -&gt; libvirt -&gt; qemu -&gt; kvm (image built with packer-qemu)<p>This seems kind of silly but gets to my point: How do you do it?<p>On Arch Linux BTW.`",
  "keywords": [
    "Ask HN"
  ],
  "genre": "Ask HN",
  "author": {
    "@type": "Person",
    "name": "3np",
    "url": "https://news.ycombinator.com/user?id=3np"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=32300861",
  "sameAs": "https://news.ycombinator.com/item?id=32300861",
  "dateCreated": "2022-08-01T02:35:39.128Z",
  "datePublished": "2022-08-01T01:37:21.000Z",
  "dateModified": "2022-08-01T02:35:39.128Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 2
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 1
    }
  ],
  "headline_zh-Hans": "Ask HN: 你是如何管理工作站上的虚拟机的？\n",
  "headline_zh-Hant": "Ask HN: 你是如何管理工作站上的虛擬機的？\n",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "Preamble:<p>I am yet to find a structured, comfortable and sustainable way to manage local VMs. I'm usually falling back to just Virtualbox with the disk file being a reoccurring annoyance and liability. I must have 100s GB of files scattered around in old backups where I'm not sure what's inside. Reproducibility and efficient use of resources is an issue. I'd also like to be quickly set up and tear down VMs a - much like Qubes OS.<p>I imagine many of you have similar scenarios, which is prompting this post.<p>Some use-cases could include:<p><pre><code> * Build environment for large projects with relatively complex pipelines where I have multiple on current configurations and checkouts\n    * Examples: Various Linux dists, AOSP forks, embedded projects\n  * Persisted isolated &quot;persona&quot; environments for e.g. web browsing and development, routing all its traffic through some particular gateway or proxy\n  * Work environments for recording screencasts/demos\n  * Pentesting\n  * (Semi-) permanent services with exposed ports\n  * Working on a VM remotely from a laptop (where the laptop is on Wayland)\n</code></pre>\nI already host a lot of stuff on actual servers (tools include: Linux,Ansible,Terraform,Kubernetes/Nomad,Consul). While I'd love to use Terraform here, I'm not really intending to bring the machine into a cluster or anything like that.<p>Some requirements and wishes:<p><pre><code> * It should be possible to somehow manage the entire configuration in a git repo\n  * Declarative configuration\n  * I can interact with GUI applications (e.g. disposable browser window)\n  * Selectively share Wayland clipboard\n  * Reasonably straightforward routing config (e.g. &quot;route all connections on this VM through whonix&quot;)\n  * Some form of remote desktop\n  * VM has its own kernel\n  * Portable: If I bring the configuration and artefacts it should be straightforward to migrate to a new host OS.\n  * Composability / inheritance for environments.\n</code></pre>\nA lot of this is close to QubesOS, except:<p><pre><code> * I want Wayland. Qubes will take its time to get there.\n  * More in general, I suspect qubes dom0 is not really configurable to behave like I want without significant patches to the point of becoming a new distro.\n  * Still find maintaining Qubes and keeping updated has not been an ideal experience.\n  * Not portable - at this point I'm not looking for a new host OS.\n  * Not sure how to set up the remoting\n</code></pre>\nAs for Vagrant, it checks a lot of the boxes (heh). I don't have a ton of experience with it but been using it in projects every now and then and wrote my own Vagrantfiles maybe a handful times. It does seem perfect for dev or build workspaces - in practice I usually use Dockerfiles here.<p>libvirt has a variety of management interfaces and built-in remote support.<p>Did do some basic testing with existing Terraform providers for libvirt, virtualbox, and vagrant - the libvirt one seems mature enough.<p>So for now my candidate pieces here:<p><pre><code> libvirtd\n  qemu/kvm\n  virtualbox\n  vagrant\n  terraform\n  kvm\n  whonix\n  packer\n</code></pre>\nNow, while I have at least some rudimentary experience with a lot pof these, I am a bit at a loss for the best way to tie them together and which I even want in the mix. For example, one possible configuration would be:<p>Terraform -&gt; terraform-provider-vagrant -&gt; vagrant -&gt; vagrant-libvirt -&gt; libvirt -&gt; qemu -&gt; kvm (image built with packer-qemu)<p>This seems kind of silly but gets to my point: How do you do it?<p>On Arch Linux BTW.`\n",
  "description_zh-Hant": "Preamble:<p>I am yet to find a structured, comfortable and sustainable way to manage local VMs. I'm usually falling back to just Virtualbox with the disk file being a reoccurring annoyance and liability. I must have 100s GB of files scattered around in old backups where I'm not sure what's inside. Reproducibility and efficient use of resources is an issue. I'd also like to be quickly set up and tear down VMs a - much like Qubes OS.<p>I imagine many of you have similar scenarios, which is prompting this post.<p>Some use-cases could include:<p><pre><code> * Build environment for large projects with relatively complex pipelines where I have multiple on current configurations and checkouts\n    * Examples: Various Linux dists, AOSP forks, embedded projects\n  * Persisted isolated &quot;persona&quot; environments for e.g. web browsing and development, routing all its traffic through some particular gateway or proxy\n  * Work environments for recording screencasts/demos\n  * Pentesting\n  * (Semi-) permanent services with exposed ports\n  * Working on a VM remotely from a laptop (where the laptop is on Wayland)\n</code></pre>\nI already host a lot of stuff on actual servers (tools include: Linux,Ansible,Terraform,Kubernetes/Nomad,Consul). While I'd love to use Terraform here, I'm not really intending to bring the machine into a cluster or anything like that.<p>Some requirements and wishes:<p><pre><code> * It should be possible to somehow manage the entire configuration in a git repo\n  * Declarative configuration\n  * I can interact with GUI applications (e.g. disposable browser window)\n  * Selectively share Wayland clipboard\n  * Reasonably straightforward routing config (e.g. &quot;route all connections on this VM through whonix&quot;)\n  * Some form of remote desktop\n  * VM has its own kernel\n  * Portable: If I bring the configuration and artefacts it should be straightforward to migrate to a new host OS.\n  * Composability / inheritance for environments.\n</code></pre>\nA lot of this is close to QubesOS, except:<p><pre><code> * I want Wayland. Qubes will take its time to get there.\n  * More in general, I suspect qubes dom0 is not really configurable to behave like I want without significant patches to the point of becoming a new distro.\n  * Still find maintaining Qubes and keeping updated has not been an ideal experience.\n  * Not portable - at this point I'm not looking for a new host OS.\n  * Not sure how to set up the remoting\n</code></pre>\nAs for Vagrant, it checks a lot of the boxes (heh). I don't have a ton of experience with it but been using it in projects every now and then and wrote my own Vagrantfiles maybe a handful times. It does seem perfect for dev or build workspaces - in practice I usually use Dockerfiles here.<p>libvirt has a variety of management interfaces and built-in remote support.<p>Did do some basic testing with existing Terraform providers for libvirt, virtualbox, and vagrant - the libvirt one seems mature enough.<p>So for now my candidate pieces here:<p><pre><code> libvirtd\n  qemu/kvm\n  virtualbox\n  vagrant\n  terraform\n  kvm\n  whonix\n  packer\n</code></pre>\nNow, while I have at least some rudimentary experience with a lot pof these, I am a bit at a loss for the best way to tie them together and which I even want in the mix. For example, one possible configuration would be:<p>Terraform -&gt; terraform-provider-vagrant -&gt; vagrant -&gt; vagrant-libvirt -&gt; libvirt -&gt; qemu -&gt; kvm (image built with packer-qemu)<p>This seems kind of silly but gets to my point: How do you do it?<p>On Arch Linux BTW.`\n"
}