{
  "@type": "NewsArticle",
  "identifier": "2022--07--21--en--askhn--HackerNews--NewsArticle--32182638",
  "url": "https://news.ycombinator.com/item?id=32182638",
  "headline": "Ask HN: How do you manage shared code across microservices?",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "We are moving off our legacy monolithic architecture to a microservice based architecture. We are about four years into the project and we have 200 distinct microservices.<p>When we first started out on this endeavor we created a parent POM called common-service. This POM declares dependencies such as Hibernate, Spring Boot, and some homegrown common libraries (the most important being a JAR that handles service discovery, rather than each service having to implement service discovery on their own).<p>Now that we have 200 services running in production, it is a difficult to roll out new versions of common-service for a variety of reasons - some teams don't have the capacity, some teams prioritize business requirements over upgrades, etc.<p>How do you handle this in your organization? Do you have shared code across your microservices? Is it an anti-pattern to share code across microservices?<p>PS: We are going to start implementing Kubernetes. Kubernetes will require many changes to our common-service codebase so I figured I would see if anyone had any good ideas out there.<p>Thank you.",
  "keywords": [
    "Ask HN"
  ],
  "genre": "Ask HN",
  "author": {
    "@type": "Person",
    "name": "sruffatti",
    "url": "https://news.ycombinator.com/user?id=sruffatti"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=32182638",
  "sameAs": "https://news.ycombinator.com/item?id=32182638",
  "dateCreated": "2022-07-21T18:34:04.510Z",
  "datePublished": "2022-07-21T18:02:07.000Z",
  "dateModified": "2022-07-21T18:34:04.510Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 2
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 1
    }
  ],
  "headline_zh-Hans": "Ask HN: 你如何管理跨微服务的共享代码？\n",
  "headline_zh-Hant": "Ask HN: 你如何管理跨微服務的共享代碼？\n",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "我们正在从传统的单片机架构转向基于微服务的架构。<p>当我们第一次开始这项工作时，我们创建了一个名为 \"共同服务 \"的父POM。这个POM声明了诸如Hibernate、Spring Boot和一些自制的通用库（最重要的是一个处理服务发现的JAR，而不是每个服务都要自己实现服务发现）。<p>现在我们有200个服务在生产中运行，由于各种原因，很难推出新版本的通用服务，有些团队没有能力，有些团队将业务需求优先于升级，等等。你的微服务中是否有共享代码？在微服务间共享代码是否是一种反模式？<p>PS：我们将开始实施Kubernetes。Kubernetes需要对我们的通用服务代码库进行许多修改，所以我想看看是否有人有什么好主意。\n",
  "description_zh-Hant": "我們正在從傳統的單片機架構轉向基於微服務的架構。<p>當我們第一次開始這項工作時，我們創建了一個名為 \"共同服務 \"的父POM。這個POM聲明瞭諸如Hibernate、Spring Boot和一些自制的通用庫（最重要的是一個處理服務發現的JAR，而不是每個服務都要自己實現服務發現）。<p>現在我們有200個服務在生產中運行，由於各種原因，很難推出新版本的通用服務，有些團隊沒有能力，有些團隊將業務需求優先於升級，等等。你的微服務中是否有共享代碼？在微服務間共享代碼是否是一種反模式？<p>PS：我們將開始實施Kubernetes。Kubernetes需要對我們的通用服務代碼庫進行許多修改，所以我想看看是否有人有什麼好主意。\n"
}