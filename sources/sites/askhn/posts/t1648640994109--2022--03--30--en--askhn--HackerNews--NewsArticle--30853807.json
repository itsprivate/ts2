{
  "@type": "NewsArticle",
  "identifier": "2022--03--30--en--askhn--HackerNews--NewsArticle--30853807",
  "url": "https://news.ycombinator.com/item?id=30853807",
  "headline": "Ask HN: What bits of fundamental knowledge are 10x productivity multipliers?",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "I recently realized that certain kinds of knowledge allow one to be significantly more productive when solving a large class of problems.<p>For example,<p>* Regular expressions for simple text processing.<p>* Parser combinators for parsing.<p>* Parser generators (esp. packrat variety) for parsing.<p>* The concept of fuzzing and property testing for testing code.<p>* Calculus for solving all sorts of problems.<p>* MCMC for solving a huge class of probability problems.<p>* Search algorithms for solving a variety of problems (e.g. all NP-hard problems, sudoku, HTNs, scheduling, planning).<p>* Gradient descent for solving a variety of optimization problems.<p>* Vector Space embedding as a conceptual tool for a variety of complex AI problems.<p>* Effect composition (Haskell's IO or Scala's ZIO) as an incredibly powerful paradigm for concurrency and parallelism.<p>What are some examples of 10x multipliers that come to your mind? Fundamental ideas without which you would be drastically less productive.",
  "keywords": [
    "Ask HN"
  ],
  "genre": "Ask HN",
  "author": {
    "@type": "Person",
    "name": "stardustpie",
    "url": "https://news.ycombinator.com/user?id=stardustpie"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=30853807",
  "sameAs": "https://news.ycombinator.com/item?id=30853807",
  "dateCreated": "2022-03-30T11:49:54.109Z",
  "datePublished": "2022-03-30T11:40:41.000Z",
  "dateModified": "2022-03-30T11:49:54.109Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 1
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 0
    }
  ],
  "headline_zh-Hans": "Ask HN: 哪些基础知识是10倍的生产力倍增器？",
  "headline_zh-Hant": "Ask HN: 哪些基礎知識是10倍的生產力倍增器？",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "我最近意识到，某些类型的知识可以让人在解决一大类问题时大大提高工作效率。<p>例如，<p>*正则表达式用于简单的文本处理。<p>*解析器组合器用于解析。<p>*解析器生成器（特别是packrat品种）用于解析。<p>*模糊概念和属性测试用于测试代码。<p>*微积分用于解决各种问题。<p>*MCMC用于解决一大类概率问题。 <p>* 解决各种问题的搜索算法（例如所有的NP-hard问题、数独、HTNs、调度、规划）。<p>* 解决各种优化问题的梯度下降法。 <p>* 矢量空间嵌入作为解决各种复杂人工智能问题的概念工具。<p>* 效果组合（Haskell的IO或Scala的ZIO）作为并发和并行的一个令人难以置信的强大范式。<p>你想到的10倍乘法的例子有哪些？如果没有这些基本的想法，你的生产力将大大降低。",
  "description_zh-Hant": "我最近意識到，某些類型的知識可以讓人在解決一大類問題時大大提高工作效率。<p>例如，<p>*正則表達式用於簡單的文本處理。<p>*解析器組合器用於解析。<p>*解析器生成器（特別是packrat品種）用於解析。<p>*模糊概念和屬性測試用於測試代碼。<p>*微積分用於解決各種問題。<p>*MCMC用於解決一大類概率問題。 <p>* 解決各種問題的搜索算法（例如所有的NP-hard問題、數獨、HTNs、調度、規劃）。<p>* 解決各種優化問題的梯度下降法。 <p>* 矢量空間嵌入作為解決各種複雜人工智能問題的概念工具。<p>* 效果組合（Haskell的IO或Scala的ZIO）作為併發和並行的一個令人難以置信的強大範式。<p>你想到的10倍乘法的例子有哪些？如果沒有這些基本的想法，你的生產力將大大降低。"
}