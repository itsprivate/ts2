{
  "@type": "NewsArticle",
  "identifier": "2022--03--22--en--askhn--HackerNews--NewsArticle--30772911",
  "url": "https://news.ycombinator.com/item?id=30772911",
  "headline": "Ask HN: How to manage internal forks of OSS projects?",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "Hi,<p>My company are using an open source software project heavily. We’re a large org and we’ve had to hack the code base to fix up bugs, extend functionality and add new features.<p>Our internal fork breaks down into three categories:<p>1. The base software.<p>2. Generic improvements to the software that could be used by other people.<p>3. Specific extensions to the software that are only value to our own organisation (e.g integration with our legacy systems, our change management systems)<p>I’m encouraging our team to contribute the generic improvements (item 2) back to the upstream to minimise any maintenance overhead, and this is working well.<p>However for Item 3, I’m finding it particularly difficult to confidently pull in upstream changes where we have heavily modified the original implementation. Ideally I’d like to be able to pull in upstream changes quickly, easily and safely.<p>Does anyone have any suggestions, references or patterns to consider for this type of software project?<p>The software is primarily Python, with some Java for good measure.",
  "keywords": [
    "Ask HN"
  ],
  "genre": "Ask HN",
  "author": {
    "@type": "Person",
    "name": "glawre",
    "url": "https://news.ycombinator.com/user?id=glawre"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=30772911",
  "sameAs": "https://news.ycombinator.com/item?id=30772911",
  "dateCreated": "2022-03-22T23:30:31.161Z",
  "datePublished": "2022-03-22T23:23:25.000Z",
  "dateModified": "2022-03-22T23:30:31.161Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 2
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 0
    }
  ],
  "headline_zh-Hans": "Ask HN: 如何管理开放源码软件项目的内部分叉？",
  "headline_zh-Hant": "Ask HN: 如何管理開放源碼軟件項目的內部分叉？",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "你好，<p>我公司正在大量使用一个开源软件项目。我们是一个大型组织，我们不得不入侵代码库，以修复错误，扩展功能并添加新的功能。<p>我们的内部分叉分为三类：<p>1.基础软件。<p>1.基础软件。<p>2.对软件的通用改进，可供其他人使用。<p>3.对软件的具体扩展，只对我们自己的组织有价值（如与我们的遗留系统、我们的变更管理系统的集成）。<p>我鼓励我们的团队将通用改进（第2项）贡献给上游，以尽量减少任何维护开销，这一点效果不错。<p>但是对于第3项，我发现在我们对原始实现进行了大量修改的地方，特别难以自信地拉入上游修改。<p>有人对这种类型的软件项目有什么建议、参考或模式可供考虑吗？<p>该软件主要是Python，还有一些Java。",
  "description_zh-Hant": "你好，<p>我公司正在大量使用一個開源軟件項目。我們是一個大型組織，我們不得不入侵代碼庫，以修復錯誤，擴展功能並添加新的功能。<p>我們的內部分叉分為三類：<p>1.基礎軟件。<p>1.基礎軟件。<p>2.對軟件的通用改進，可供其他人使用。<p>3.對軟件的具體擴展，只對我們自己的組織有價值（如與我們的遺留系統、我們的變更管理系統的集成）。<p>我鼓勵我們的團隊將通用改進（第2項）貢獻給上游，以儘量減少任何維護開銷，這一點效果不錯。<p>但是對於第3項，我發現在我們對原始實現進行了大量修改的地方，特別難以自信地拉入上游修改。<p>有人對這種類型的軟件項目有什麼建議、參考或模式可供考慮嗎？<p>該軟件主要是Python，還有一些Java。"
}