{
  "@type": "NewsArticle",
  "identifier": "2022--03--21--en--askhn--HackerNews--NewsArticle--30754394",
  "url": "https://news.ycombinator.com/item?id=30754394",
  "headline": "Ask HN: What are some recommended patterns when using Web Components?",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "The MDN Web docs [0] are useful to understand what are custom elements, the shadow DOM, or templates and slots. But as someone starting with web components and front-end stuff in general, I was wondering about the recommended approaches/design patterns when building more complex apps ?<p>For instance, how should components communicate with each other? By using a parent element systematically, firing up events from child nodes, then calling children methods from the parent node? Is this the equivalent of the &quot;props down, events up&quot; pattern in React for instance [1]?<p>Regarding the life-cycle, is there any reason to use the `constructor()` instead of the `connectedCallback()` for init code?<p>Another one that seems to have sparked some debate [2]: how to work with custom elements that need to interact with their children? Should I use `setTimeout()` to wait for the DOM to be parsed [3], should I use mutation observers, or should I fire up an event from the children to notify its parent when it is ready to be used?<p>These are just a couple questions that came up when reading about this, but I am curious about general best practices when building front-end apps using web components.<p>[0] https://developer.mozilla.org/en-US/docs/Web/Web_Components<p>[1] https://jasonformat.com/props-down-events-up/<p>[2] https://github.com/WICG/webcomponents/issues/809<p>[3] https://stackoverflow.com/questions/58354531/custom-elements-connectedcallback-wait-for-parent-node-to-be-available-bef",
  "keywords": [
    "Ask HN"
  ],
  "genre": "Ask HN",
  "author": {
    "@type": "Person",
    "name": "alxthm",
    "url": "https://news.ycombinator.com/user?id=alxthm"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=30754394",
  "sameAs": "https://news.ycombinator.com/item?id=30754394",
  "dateCreated": "2022-03-21T14:28:12.719Z",
  "datePublished": "2022-03-21T14:16:25.000Z",
  "dateModified": "2022-03-21T14:28:12.719Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 1
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 0
    }
  ],
  "headline_zh-Hans": "Ask HN: 在使用Web组件时，有哪些推荐的模式？",
  "headline_zh-Hant": "Ask HN: 在使用Web組件時，有哪些推薦的模式？",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "MDN Web文档[0]对于理解什么是自定义元素、影子DOM或模板和插槽很有用。但是，作为一个开始接触Web组件和一般的前端东西的人，我想知道在构建更复杂的应用程序时推荐的方法/设计模式是什么？通过系统地使用一个父元素，从子节点触发事件，然后从父节点调用子节点的方法？这是否相当于React中的&quot;props down, events up&quot;模式[1]？<p>关于生命周期，是否有理由使用`constructor()`而不是`connectedCallback()`来启动代码？<p>另一个问题似乎引发了一些争论[2]：如何处理需要与子元素互动的自定义元素？我是否应该使用`setTimeout()`来等待DOM被解析[3]，我是否应该使用突变观察者，或者我是否应该从子元素中启动一个事件来通知它的父元素，当它准备被使用时？<p>这些只是在阅读相关内容时出现的几个问题，但我对使用Web组件构建前端应用程序时的一般最佳做法感到好奇。<p>[0] https://developer.mozilla.org/en-US/docs/Web/Web_Components<p>[1] https://jasonformat.com/props-down-events-up/<p>[2] https://github.com/WICG/webcomponents/issues/809<p>[3] https://stackoverflow.com/questions/58354531/custom-elements-connectedcallback-wait-for-parent-node-to-be-available-bef",
  "description_zh-Hant": "MDN Web文檔[0]對於理解什麼是自定義元素、影子DOM或模板和插槽很有用。但是，作為一個開始接觸Web組件和一般的前端東西的人，我想知道在構建更復雜的應用程序時推薦的方法/設計模式是什麼？通過系統地使用一個父元素，從子節點觸發事件，然後從父節點調用子節點的方法？這是否相當於React中的&quot;props down, events up&quot;模式[1]？<p>關於生命週期，是否有理由使用`constructor()`而不是`connectedCallback()`來啟動代碼？<p>另一個問題似乎引發了一些爭論[2]：如何處理需要與子元素互動的自定義元素？我是否應該使用`setTimeout()`來等待DOM被解析[3]，我是否應該使用突變觀察者，或者我是否應該從子元素中啟動一個事件來通知它的父元素，當它準備被使用時？<p>這些只是在閱讀相關內容時出現的幾個問題，但我對使用Web組件構建前端應用程序時的一般最佳做法感到好奇。<p>[0] https://developer.mozilla.org/en-US/docs/Web/Web_Components<p>[1] https://jasonformat.com/props-down-events-up/<p>[2] https://github.com/WICG/webcomponents/issues/809<p>[3] https://stackoverflow.com/questions/58354531/custom-elements-connectedcallback-wait-for-parent-node-to-be-available-bef"
}