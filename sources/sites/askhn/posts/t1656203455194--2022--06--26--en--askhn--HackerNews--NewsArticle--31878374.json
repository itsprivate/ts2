{
  "@type": "NewsArticle",
  "identifier": "2022--06--26--en--askhn--HackerNews--NewsArticle--31878374",
  "url": "https://news.ycombinator.com/item?id=31878374",
  "headline": "Ask HN: Autocurrying Syntax Sugar?",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "Full disclosure: I'm not a computer scientist, I'm just a programmer who uses these tools. Also I mainly use javascript and go, I need to spread out more but these two tools fulfill 99% of all my needs.<p>I had a 2am idea and when I looked it up I couldn't find any mention of someone else thinking of it. Here it is:<p>Function currying is a method for saving arguments on the callstack so they don't have to be copied in memory between calls. Here's a javascript example of currying:<p>```js\nconst add = (leftOp) =&gt; (rightOp) =&gt; leftOp + rightOp;\nconst addThree = add(3);\nconsole.log(addThree(4)); // 7\nconsole.log(addThree(-2)); // 1\n```<p>I think all PL that support the &quot;putting-functions-in-variables&quot; paradime can do this. BUT. If you try to call a normal function that requires all of its arguments up front without all the arguments it will throw an error. So what if it didn't? What if instead of throwing an error, the function call returns a curried function with the first arguments filled and the unfilled arguments left to be inputted.<p>```js\n// with autocurrying\nconst add = (leftOp, rightOp) =&gt; leftOp + rightOp;\nconst addFive = add(5); // addFive is defined like addFive = (rightOp) =&gt; 5 + rightOp\nconsole.log(addFive(3)); // 8\n```<p>This could work in Javascript(/Typescript), Python, Go and similar languages. By encouraging currying you could potentaily get memory saving, readibility, and performance. But I won't ever try to sell you a stack of pros without a foundation of cons: any syntax sugar has the potential to cause logic bugs, reference bugs, and missuse.<p>What do you guys think?",
  "keywords": [
    "Ask HN"
  ],
  "genre": "Ask HN",
  "author": {
    "@type": "Person",
    "name": "danhab99",
    "url": "https://news.ycombinator.com/user?id=danhab99"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=31878374",
  "sameAs": "https://news.ycombinator.com/item?id=31878374",
  "dateCreated": "2022-06-26T00:30:55.194Z",
  "datePublished": "2022-06-25T20:15:54.000Z",
  "dateModified": "2022-06-26T00:30:55.194Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 2
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 0
    }
  ],
  "headline_zh-Hans": "Ask HN: 自动咖喱语法糖？\n",
  "headline_zh-Hant": "Ask HN: 自動咖喱語法糖？\n",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "完全公开：我不是一个计算机科学家，我只是一个使用这些工具的程序员。另外，我主要使用javascript和go，我需要分散精力，但这两个工具可以满足我99%的需求。<p>我有一个凌晨2点的想法，当我查找它时，我找不到任何关于别人想到它的说法。这里是：<p>函数夤缘是一种将参数保存在调用栈上的方法，这样它们就不必在调用之间在内存中复制。下面是一个currying的javascript例子：<p>``js\nconst add = (leftOp) =&gt; (rightOp) =&gt; leftOp + rightOp;\nconst addThree = add(3);\nconsole.log(addThree(4)); // 7\nconsole.log(addThree(-2)); // 1\n```<p>我认为所有支持&quot;puting-functions-in-variables&quot;范式的PL都可以做到这一点。但是，如果你试图在没有所有参数的情况下调用一个需要所有参数的普通函数，它将抛出一个错误。那么，如果它不这样做呢？如果它不抛出一个错误，而是在调用函数时返回一个咖喱函数，并填入第一个参数，未填入的参数则留待输入。\n//带有自动计算功能\nconst add = (leftOp, rightOp) =&gt; leftOp + rightOp;\nconst addFive = add(5); // addFive的定义如下 addFive = (rightOp) =&gt; 5 + rightOp\nconsole.log(addFive(3)); // 8\n```<p>这可以在Javascript(/Typescript)、Python、Go和类似的语言中工作。通过鼓励currying，你可以潜在地获得内存节省、可读性和性能。但我不会向你推销没有缺点基础的一堆优点：任何语法糖都有可能导致逻辑错误、引用错误和误用。<p>你们怎么看？\n",
  "description_zh-Hant": "完全公開：我不是一個計算機科學家，我只是一個使用這些工具的程序員。另外，我主要使用javascript和go，我需要分散精力，但這兩個工具可以滿足我99%的需求。<p>我有一個凌晨2點的想法，當我查找它時，我找不到任何關於別人想到它的說法。這裡是：<p>函數夤緣是一種將參數保存在調用棧上的方法，這樣它們就不必在調用之間在內存中複製。下面是一個currying的javascript例子：<p>``js\nconst add = (leftOp) =&gt; (rightOp) =&gt; leftOp + rightOp;\nconst addThree = add(3);\nconsole.log(addThree(4)); // 7\nconsole.log(addThree(-2)); // 1\n```<p>我認為所有支持&quot;puting-functions-in-variables&quot;範式的PL都可以做到這一點。但是，如果你試圖在沒有所有參數的情況下調用一個需要所有參數的普通函數，它將拋出一個錯誤。那麼，如果它不這樣做呢？如果它不拋出一個錯誤，而是在調用函數時返回一個咖喱函數，並填入第一個參數，未填入的參數則留待輸入。\n//帶有自動計算功能\nconst add = (leftOp, rightOp) =&gt; leftOp + rightOp;\nconst addFive = add(5); // addFive的定義如下 addFive = (rightOp) =&gt; 5 + rightOp\nconsole.log(addFive(3)); // 8\n```<p>這可以在Javascript(/Typescript)、Python、Go和類似的語言中工作。通過鼓勵currying，你可以潛在地獲得內存節省、可讀性和性能。但我不會向你推銷沒有缺點基礎的一堆優點：任何語法糖都有可能導致邏輯錯誤、引用錯誤和誤用。<p>你們怎麼看？\n"
}