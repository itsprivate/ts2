{
  "@type": "NewsArticle",
  "identifier": "2022--08--05--en--askhn--HackerNews--NewsArticle--32355896",
  "url": "https://news.ycombinator.com/item?id=32355896",
  "headline": "Ask HN: As a software developer, what do I focus on next?",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "I'm a young software dev who moved into SW from a different engineering background, so I don't have much formal CS experience. However, I really like the field and have enjoyed some CS-ish online courses. Since I don't feel like I'm learning a lot at work, I've taken it upon myself to bolster my software-related education.<p>The thing is, it's all been a bit scattered - some computer architecture, algorithms and data structures, playing around with new languages. As fun as it's been, I'm starting to feel like I could be making better use of my time and interest to build towards something, especially since it's all on my own time. So that's where my question stems from - what do I build towards now?\n - I use Kotlin and Python at work - is it worth it becoming more deeply familiar with these languages?\n - Or should I focus on software architecture and design patterns, concepts that transcend computer languages to some degree?\n - I could afford to learn more about algorithms and data structures too, is there a good way to do this that isn't just memorizing, but also implementing them?\n - Or should I try to learn new technologies that could maybe have uses at work now or later, like containers or databases?<p>I think related to this and also really important is a question about how to best go about these things. For example, do I read books (there's plenty of suggested reading that comes up oh HN)? How can I best make use of new knowledge - should I focus on things I can apply easily? Do I jump into open source software? Or should I find a job where the environment is better for teaching young devs? Though I'd probably have to learn more to prepare for an interview...so maybe there's other stuff to focus on first.<p>If anybody has any advice or suggestions it would be greatly appreciated.",
  "keywords": [
    "Ask HN"
  ],
  "genre": "Ask HN",
  "author": {
    "@type": "Person",
    "name": "Woberto",
    "url": "https://news.ycombinator.com/user?id=Woberto"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=32355896",
  "sameAs": "https://news.ycombinator.com/item?id=32355896",
  "dateCreated": "2022-08-05T13:49:49.493Z",
  "datePublished": "2022-08-05T13:33:20.000Z",
  "dateModified": "2022-08-05T13:49:49.493Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 1
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 0
    }
  ],
  "headline_zh-Hans": "Ask HN: 作为一名软件开发人员，我接下来要关注什么？\n",
  "headline_zh-Hant": "Ask HN: 作為一名軟件開發人員，我接下來要關注什麼？\n",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "我是一个年轻的软件开发人员，从不同的工程背景转入SW，所以我没有什么正式的CS经验。然而，我非常喜欢这个领域，并且喜欢一些CS的在线课程。由于我觉得自己在工作中没有学到很多东西，所以我就自己动手加强与软件有关的教育。<p>问题是，这些东西都有点分散--一些计算机架构、算法和数据结构，以及玩弄新的语言。虽然这很有趣，但我开始觉得我可以更好地利用我的时间和兴趣来建立一些东西，特别是由于这都是我自己的时间。所以这就是我的问题所在--我现在应该朝什么方向发展？\n - 我在工作中使用Kotlin和Python--更深入地熟悉这些语言是否值得？\n - 或者我应该专注于软件架构和设计模式，这些概念在某种程度上超越了计算机语言？\n - 我也可以学习更多关于算法和数据结构的知识，有什么好的方法可以做到这一点，不仅仅是记忆，还可以实现它们？\n - <p>我认为与此相关的，也是非常重要的一个问题是，如何最好地去做这些事情。例如，我是否要阅读书籍（HN有很多建议阅读的内容）？我怎样才能最好地利用新的知识--我应该把重点放在我可以轻松应用的东西上吗？我是否要跳到开放源码软件？或者我应该找一份环境更适合教导年轻开发者的工作？虽然我可能需要学习更多的知识来准备面试......所以也许有其他的东西要先关注。<p>如果有人有任何意见或建议，将非常感谢。\n",
  "description_zh-Hant": "我是一個年輕的軟件開發人員，從不同的工程背景轉入SW，所以我沒有什麼正式的CS經驗。然而，我非常喜歡這個領域，並且喜歡一些CS的在線課程。由於我覺得自己在工作中沒有學到很多東西，所以我就自己動手加強與軟件有關的教育。<p>問題是，這些東西都有點分散--一些計算機架構、算法和數據結構，以及玩弄新的語言。雖然這很有趣，但我開始覺得我可以更好地利用我的時間和興趣來建立一些東西，特別是由於這都是我自己的時間。所以這就是我的問題所在--我現在應該朝什麼方向發展？\n - 我在工作中使用Kotlin和Python--更深入地熟悉這些語言是否值得？\n - 或者我應該專注於軟件架構和設計模式，這些概念在某種程度上超越了計算機語言？\n - 我也可以學習更多關於算法和數據結構的知識，有什麼好的方法可以做到這一點，不僅僅是記憶，還可以實現它們？\n - <p>我認為與此相關的，也是非常重要的一個問題是，如何最好地去做這些事情。例如，我是否要閱讀書籍（HN有很多建議閱讀的內容）？我怎樣才能最好地利用新的知識--我應該把重點放在我可以輕鬆應用的東西上嗎？我是否要跳到開放源碼軟件？或者我應該找一份環境更適合教導年輕開發者的工作？雖然我可能需要學習更多的知識來準備面試......所以也許有其他的東西要先關注。<p>如果有人有任何意見或建議，將非常感謝。\n"
}