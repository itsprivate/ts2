{
  "@type": "NewsArticle",
  "identifier": "2022--06--20--en--askhn--HackerNews--NewsArticle--31815151",
  "url": "https://news.ycombinator.com/item?id=31815151",
  "headline": "Ask HN: Why do you use ids as translation strings?",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "Earlier this week, my son was unable to purchase a new Minecraft world because (I assume) they didn't expect a non-well-defined locale (en_NL, to be precise). The marketplace is essentially &quot;offer.category.upsell,&quot; etc, and so long it fits in exactly 0 buttons.<p>On everything I've ever worked on that required translations, we always wrote the original text for this exact reason where (for whatever reason), the translation failed. At one place I worked, we had an &quot;en_US&quot; to &quot;en_US&quot; translation set up to quickly change strings without requiring changing the code and breaking other translations. Where I currently work, we have a function like __fixme(&quot;not yet translated&quot;, &quot;translated&quot;) that will use the latter translation if the former isn't translated yet, allowing us to change strings rather easily.<p>However, after looking around for a bit, I noticed that it has more-or-less become very common to use &quot;opaquish keys&quot; and then provide a translation for every language. This surprises me since AFAIK, every i18n library will default back to the key if it can't find a language to translate to, ergo, opening yourself up to experiencing the app exactly like my son is currently experiencing Minecraft on his Switch.<p>I'm curious why devs do it using keys vs. the original text? Is there some inherent problem being solved or is it just a personal preference kind of thing?",
  "keywords": [
    "Ask HN"
  ],
  "genre": "Ask HN",
  "author": {
    "@type": "Person",
    "name": "withinboredom",
    "url": "https://news.ycombinator.com/user?id=withinboredom"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=31815151",
  "sameAs": "https://news.ycombinator.com/item?id=31815151",
  "dateCreated": "2022-06-20T20:28:03.718Z",
  "datePublished": "2022-06-20T20:07:43.000Z",
  "dateModified": "2022-06-20T20:28:03.718Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 1
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 0
    }
  ],
  "headline_zh-Hans": "Ask HN: 为什么要用id作为翻译字符串？\n",
  "headline_zh-Hant": "Ask HN: 為什麼要用id作為翻譯字符串？\n",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "本周早些时候，我的儿子无法购买一个新的Minecraft世界，因为（我假设）他们没有想到一个非良好定义的地区（准确地说，是en_NL）。市场基本上是&quot;offer.category.upsell,&quot;等，而且这么长的时间正好适合0个按钮。<p>在我曾经工作过的所有需要翻译的地方，我们总是因为这个确切的原因（无论什么原因）而写出原文，翻译失败。在我工作的一个地方，我们有一个&quot;en_US&quot;到&quot;en_US&quot;的翻译设置，以快速改变字符串，而不需要改变代码和破坏其他翻译。在我目前工作的地方，我们有一个类似于__fixme(&quot;not yet translated&quot;, &quot;translated&quot;)的函数，如果前者还没有被翻译，就会使用后者的翻译，这使我们能够相当容易地改变字符串。<p>然而，在观察了一会儿之后，我注意到，使用&quot;不透明键&quot;，然后为每种语言提供一个翻译已经变得非常普遍。这让我感到惊讶，因为AFAIK，每一个i18n库如果找不到可以翻译的语言，就会默认回到键值，因此，你就可以像我儿子目前在他的Switch上体验《Minecraft》一样，打开自己的应用。<p>我很好奇为什么开发者要使用键值而不是原文？是否有一些固有的问题被解决了，或者只是个人喜好的一种东西？\n",
  "description_zh-Hant": "本週早些時候，我的兒子無法購買一個新的Minecraft世界，因為（我假設）他們沒有想到一個非良好定義的地區（準確地說，是en_NL）。市場基本上是&quot;offer.category.upsell,&quot;等，而且這麼長的時間正好適合0個按鈕。<p>在我曾經工作過的所有需要翻譯的地方，我們總是因為這個確切的原因（無論什麼原因）而寫出原文，翻譯失敗。在我工作的一個地方，我們有一個&quot;en_US&quot;到&quot;en_US&quot;的翻譯設置，以快速改變字符串，而不需要改變代碼和破壞其他翻譯。在我目前工作的地方，我們有一個類似於__fixme(&quot;not yet translated&quot;, &quot;translated&quot;)的函數，如果前者還沒有被翻譯，就會使用後者的翻譯，這使我們能夠相當容易地改變字符串。<p>然而，在觀察了一會兒之後，我注意到，使用&quot;不透明鍵&quot;，然後為每種語言提供一個翻譯已經變得非常普遍。這讓我感到驚訝，因為AFAIK，每一個i18n庫如果找不到可以翻譯的語言，就會默認回到鍵值，因此，你就可以像我兒子目前在他的Switch上體驗《Minecraft》一樣，打開自己的應用。<p>我很好奇為什麼開發者要使用鍵值而不是原文？是否有一些固有的問題被解決了，或者只是個人喜好的一種東西？\n"
}