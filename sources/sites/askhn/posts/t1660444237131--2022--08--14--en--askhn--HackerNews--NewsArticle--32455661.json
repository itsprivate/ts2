{
  "@type": "NewsArticle",
  "identifier": "2022--08--14--en--askhn--HackerNews--NewsArticle--32455661",
  "url": "https://news.ycombinator.com/item?id=32455661",
  "headline": "Ask HN: Help! Tech stack for web scraping and simple frontend graphs",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "Hey all, starting to work on some of my own projects after a 5 year hiatus.<p>My personal projects in the past have often utilized a Node.js backend (Express) that served a React frontend, with a postgres db with Knex. I have a bit of familiarity with Rails.<p>I'm wondering how much things have changed in the past few years. I'm reading that React should probably be avoided, Vue seems popular, Svelte seems like the shiny new thing. I'm considering looking into Django as learning Python might be worthwhile.<p>My day job uses Kotlin, so Ktor or Spring seems like an option.<p>The project I'm building will basically scrape some data every day, store it in a database, and serve a front end primarily consisting of graphs. Is there a particular tech stack that is more suitable to that these days? Are there any stacks that should be <i>avoided</i> for such requirements? &quot;Overengineering&quot; is something I want to avoid.",
  "keywords": [
    "Ask HN"
  ],
  "genre": "Ask HN",
  "author": {
    "@type": "Person",
    "name": "Spinosaurus",
    "url": "https://news.ycombinator.com/user?id=Spinosaurus"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=32455661",
  "sameAs": "https://news.ycombinator.com/item?id=32455661",
  "dateCreated": "2022-08-14T02:30:37.131Z",
  "datePublished": "2022-08-14T02:04:28.000Z",
  "dateModified": "2022-08-14T02:30:37.131Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 1
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 0
    }
  ],
  "headline_zh-Hans": "Ask HN: 帮助! 网络刮削和简单的前端图形的技术栈\n",
  "headline_zh-Hant": "Ask HN: 幫助! 網絡刮削和簡單的前端圖形的技術棧\n",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "Hey all, starting to work on some of my own projects after a 5 year hiatus.<p>My personal projects in the past have often utilized a Node.js backend (Express) that served a React frontend, with a postgres db with Knex. I have a bit of familiarity with Rails.<p>I'm wondering how much things have changed in the past few years. I'm reading that React should probably be avoided, Vue seems popular, Svelte seems like the shiny new thing. I'm considering looking into Django as learning Python might be worthwhile.<p>My day job uses Kotlin, so Ktor or Spring seems like an option.<p>The project I'm building will basically scrape some data every day, store it in a database, and serve a front end primarily consisting of graphs. Is there a particular tech stack that is more suitable to that these days? Are there any stacks that should be <i>avoided</i> for such requirements? &quot;Overengineering&quot; is something I want to avoid.\n",
  "description_zh-Hant": "Hey all, starting to work on some of my own projects after a 5 year hiatus.<p>My personal projects in the past have often utilized a Node.js backend (Express) that served a React frontend, with a postgres db with Knex. I have a bit of familiarity with Rails.<p>I'm wondering how much things have changed in the past few years. I'm reading that React should probably be avoided, Vue seems popular, Svelte seems like the shiny new thing. I'm considering looking into Django as learning Python might be worthwhile.<p>My day job uses Kotlin, so Ktor or Spring seems like an option.<p>The project I'm building will basically scrape some data every day, store it in a database, and serve a front end primarily consisting of graphs. Is there a particular tech stack that is more suitable to that these days? Are there any stacks that should be <i>avoided</i> for such requirements? &quot;Overengineering&quot; is something I want to avoid.\n"
}