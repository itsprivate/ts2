{
  "@type": "NewsArticle",
  "identifier": "2022--04--15--en--askhn--HackerNews--NewsArticle--31046782",
  "url": "https://news.ycombinator.com/item?id=31046782",
  "headline": "Ask HN: How would you program a rule-based chatbot or web app?",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "I've done lots of old-school Prolog and CLIPS rule-based expert systems.<p>Now, zooming to the present, I want to support Ukraine with an in-browser app that teaches and applies international criminal law. (The &quot;Rome Statute of the International Criminal Court.)<p>Criminal Law — including the Rome Statute — always consists of a set of &quot;elements&quot; that need to be present. These change very infrequently, so I think that &quot;hard-coding&quot; them in a platform is fine. I don't believe I need any kind of self-discovery of rules and classifications.<p>Now, I've found a great Javascript, in-browser Prolog implementation, Tau Prolog. I've taken a first stab at some Prolog code.<p>What else should I consider? I'd like the system to support lots of info for the user such as how decisions were made, and what facts are missing in order to make a conclusion.<p>My rough initial code: https://github.com/public-law/war-crimes-explorer/blob/master/crimes.pl",
  "keywords": [
    "Ask HN"
  ],
  "genre": "Ask HN",
  "author": {
    "@type": "Person",
    "name": "dogweather",
    "url": "https://news.ycombinator.com/user?id=dogweather"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=31046782",
  "sameAs": "https://news.ycombinator.com/item?id=31046782",
  "dateCreated": "2022-04-15T22:42:09.716Z",
  "datePublished": "2022-04-15T22:38:15.000Z",
  "dateModified": "2022-04-15T22:42:09.716Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 1
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 0
    }
  ],
  "headline_zh-Hans": "Ask HN: 你会如何为一个基于规则的聊天机器人或网络应用编程？",
  "headline_zh-Hant": "Ask HN: 你會如何為一個基於規則的聊天機器人或網絡應用編程？",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "我做了很多老式的Prolog和基于CLIPS规则的专家系统。<p>现在，放大到现在，我想用一个教授和应用国际刑法的浏览器应用程序来支持乌克兰。(国际刑事法院罗马规约》）<p>刑法--包括《罗马规约》--总是由一组需要存在的&quot;要素&quot;组成。这些要素很少变化，所以我认为在一个平台上对它们进行硬编码是可以的。我不认为我需要任何形式的规则和分类的自我发现。<p>现在，我已经找到了一个伟大的Javascript，浏览器内的Prolog实现，Tau Prolog。我已经初步尝试了一些Prolog代码。<p>我还应该考虑什么？我希望这个系统能够为用户提供大量的信息，例如如何做出决定，以及为了做出结论还缺少哪些事实。<p>我粗略的初始代码：https://github.com/public-law/war-crimes-explorer/blob/master/crimes.pl",
  "description_zh-Hant": "我做了很多老式的Prolog和基於CLIPS規則的專家系統。<p>現在，放大到現在，我想用一個教授和應用國際刑法的瀏覽器應用程序來支持烏克蘭。(國際刑事法院羅馬規約》）<p>刑法--包括《羅馬規約》--總是由一組需要存在的&quot;要素&quot;組成。這些要素很少變化，所以我認為在一個平臺上對它們進行硬編碼是可以的。我不認為我需要任何形式的規則和分類的自我發現。<p>現在，我已經找到了一個偉大的Javascript，瀏覽器內的Prolog實現，Tau Prolog。我已經初步嘗試了一些Prolog代碼。<p>我還應該考慮什麼？我希望這個系統能夠為用戶提供大量的信息，例如如何做出決定，以及為了做出結論還缺少哪些事實。<p>我粗略的初始代碼：https://github.com/public-law/war-crimes-explorer/blob/master/crimes.pl"
}