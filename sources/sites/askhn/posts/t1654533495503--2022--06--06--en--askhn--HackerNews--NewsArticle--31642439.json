{
  "@type": "NewsArticle",
  "identifier": "2022--06--06--en--askhn--HackerNews--NewsArticle--31642439",
  "url": "https://news.ycombinator.com/item?id=31642439",
  "headline": "Ask HN: Which are your favorite developer docs?",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "I'm currently working on documenting a product for developers, I'm used to read lots of public dev docs, but it's my first time writing them.<p>I'd like to get some inspiration, could be favorite developer docs, but also resources on how to make them great.<p>Examples:<p>Stripe (https://stripe.com/docs): probably the canonical example for dev docs, well written, well structured, sweet spot between code examples and explanatory text (e.g. https://stripe.com/docs/billing/quickstart).<p>Tailscale (https://tailscale.com/kb/): well written, well structured, lots of how-to guides.<p>Docusaurus showcase (https://docusaurus.io/showcase): aggregation of docs, some of them are great, some are not. All of them are open source so it's a useful resource for inspiration.<p>Also, not a doc itself but a great tool to build docs:\nhttps://codehike.org/",
  "keywords": [
    "Ask HN"
  ],
  "genre": "Ask HN",
  "author": {
    "@type": "Person",
    "name": "lucasjanon",
    "url": "https://news.ycombinator.com/user?id=lucasjanon"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=31642439",
  "sameAs": "https://news.ycombinator.com/item?id=31642439",
  "dateCreated": "2022-06-06T16:38:15.503Z",
  "datePublished": "2022-06-06T16:23:31.000Z",
  "dateModified": "2022-06-06T16:38:15.503Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 2
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 1
    }
  ],
  "headline_zh-Hans": "Ask HN: 哪些是你最喜欢的开发者文档？\n",
  "headline_zh-Hant": "Ask HN: 哪些是你最喜歡的開發者文檔？\n",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "我目前正在为开发人员编写一个产品的文档，我习惯于阅读大量的公共开发文档，但这是我第一次编写文档。<p>我想获得一些灵感，可以是最喜欢的开发人员文档，但也可以是如何使它们变得伟大的资源。<p>例子：<p>Stripe（https://stripe. com/docs）：可能是开发文档的典型例子，写得很好，结构很好，在代码示例和解释性文本之间有一个甜蜜点（例如：https://stripe.com/docs/billing/quickstart）。<p>Tailscale（https://tailscale.com/kb/）：写得很好，结构很好，有很多操作指南。<p>Docusaurus showcase（https://docusaurus.io/showcase）：文档的集合，其中一些很好，一些不好。所有这些都是开源的，所以它是一个有用的灵感资源。<p>另外，它本身不是一个文档，但却是一个构建文档的伟大工具。\nhttps://codehike.org/\n",
  "description_zh-Hant": "我目前正在為開發人員編寫一個產品的文檔，我習慣於閱讀大量的公共開發文檔，但這是我第一次編寫文檔。<p>我想獲得一些靈感，可以是最喜歡的開發人員文檔，但也可以是如何使它們變得偉大的資源。<p>例子：<p>Stripe（https://stripe. com/docs）：可能是開發文檔的典型例子，寫得很好，結構很好，在代碼示例和解釋性文本之間有一個甜蜜點（例如：https://stripe.com/docs/billing/quickstart）。<p>Tailscale（https://tailscale.com/kb/）：寫得很好，結構很好，有很多操作指南。<p>Docusaurus showcase（https://docusaurus.io/showcase）：文檔的集合，其中一些很好，一些不好。所有這些都是開源的，所以它是一個有用的靈感資源。<p>另外，它本身不是一個文檔，但卻是一個構建文檔的偉大工具。\nhttps://codehike.org/\n"
}