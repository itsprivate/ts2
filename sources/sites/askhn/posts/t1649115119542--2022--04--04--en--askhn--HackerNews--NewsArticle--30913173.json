{
  "@type": "NewsArticle",
  "identifier": "2022--04--04--en--askhn--HackerNews--NewsArticle--30913173",
  "url": "https://news.ycombinator.com/item?id=30913173",
  "headline": "Ask HN: How to Learn Software Architecture?",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "I am really curious on learning good software architectures. The main motivation for me wanting to learn these things is to prevent/identify some architectures with flawed designs that become fatal once project grows up!<p>Is there a way to learn these things without building the software and seeing it mature? Directly jumping into mature projects doesn't make me appreciate small design decisions!<p>Therefore, I would like to request the community to link some good resources on software architecture and code organization!",
  "keywords": [
    "Ask HN"
  ],
  "genre": "Ask HN",
  "author": {
    "@type": "Person",
    "name": "going_ham",
    "url": "https://news.ycombinator.com/user?id=going_ham"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=30913173",
  "sameAs": "https://news.ycombinator.com/item?id=30913173",
  "dateCreated": "2022-04-04T23:31:59.542Z",
  "datePublished": "2022-04-04T23:10:41.000Z",
  "dateModified": "2022-04-04T23:31:59.542Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 2
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 0
    }
  ],
  "headline_zh-Hans": "Ask HN: 如何学习软件架构？",
  "headline_zh-Hant": "Ask HN: 如何學習軟件架構？",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "我对学习好的软件架构真的很好奇。我想学习这些东西的主要动机是为了防止/识别一些设计有缺陷的架构，一旦项目成长起来，这些缺陷就会成为致命的！<p>有没有一种方法可以在不构建软件并看到它成熟的情况下学习这些东西？直接跳入成熟的项目并不能让我欣赏小的设计决策！<p>因此，我想请求社区链接一些关于软件架构和代码组织的好资源",
  "description_zh-Hant": "我對學習好的軟件架構真的很好奇。我想學習這些東西的主要動機是為了防止/識別一些設計有缺陷的架構，一旦項目成長起來，這些缺陷就會成為致命的！<p>有沒有一種方法可以在不構建軟件並看到它成熟的情況下學習這些東西？直接跳入成熟的項目並不能讓我欣賞小的設計決策！<p>因此，我想請求社區鏈接一些關於軟件架構和代碼組織的好資源"
}