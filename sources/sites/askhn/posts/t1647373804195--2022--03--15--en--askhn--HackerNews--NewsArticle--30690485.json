{
  "@type": "NewsArticle",
  "identifier": "2022--03--15--en--askhn--HackerNews--NewsArticle--30690485",
  "url": "https://news.ycombinator.com/item?id=30690485",
  "headline": "Ask HN: How would you, a solo dev/small team, make a scalable web app in 2022?",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "Title says it all, how would you make a scalable web application in 2022 as a solo/small team of devs? To limit the problem space, how about something that can handle CRUD operations for an internet T-shirt store getting 1000-100000 simultaneous visitors? I'm certainly open to learning clever ways to architect a mini-Youtube if that's somehow possible though.<p>Perhaps to make advice easier, I've played around with things like Firebase and Meteor, did a kubernetes tutorial or two, deployed small toy apps on AWS/GCP, as well as have some familiarity with ReactJS/HTML/CSS (I'm trying to get into gatsby but we'll leave that aside), Docker, and the Django/DRF framework. The issue is I don't really know how to integrate them into a &quot;scalable&quot; or &quot;highly available&quot; web application, or even a methodology for comparing scalability for one approach vs another. I also understand CI/CD pipelines are a part of the typical microservices architecture, but would they even make sense for a solo dev vs trying to get a monolith running? Given &quot;scalable&quot; can mean a lot of different things, I'm entirely fine with more open ended answers about focusing on things that will matter more than sheer connections handled and dynamic content served, so please don't feel limited to answering in as few steps as possible if you think there are other insights about better practices/design patterns that should be mentioned.<p>So for extra context: I'll have a bit of free time in the next couple months to just sketch out ideas and try things (probably the last time for awhile), but I'm genuinely curious how the real software development practitioners would approach an open ended task like this. Unfortunately they weren't exactly offering a class on how to make scalable web apps (probably because there's thousands of different ways) during my pretty conventional college CS program, ya know?",
  "keywords": [
    "Ask HN"
  ],
  "genre": "Ask HN",
  "author": {
    "@type": "Person",
    "name": "star_juice",
    "url": "https://news.ycombinator.com/user?id=star_juice"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=30690485",
  "sameAs": "https://news.ycombinator.com/item?id=30690485",
  "dateCreated": "2022-03-15T19:50:04.195Z",
  "datePublished": "2022-03-15T19:47:21.000Z",
  "dateModified": "2022-03-15T19:50:04.195Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 1
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 0
    }
  ],
  "headline_zh-Hans": "Ask HN: 你，一个单独的开发者/小团队，如何在2022年做出一个可扩展的网络应用？",
  "headline_zh-Hant": "Ask HN: 你，一個單獨的開發者/小團隊，如何在2022年做出一個可擴展的網絡應用？",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "标题说明了一切，作为一个单独的/小规模的开发团队，你将如何在2022年做出一个可扩展的网络应用？为了限制问题的空间，如何为一个同时有1000-100000名访客的互联网T恤店处理CRUD操作？<p>也许是为了使建议更容易，我已经玩过Firebase和Meteor等东西，做了一两个kubernetes教程，在AWS/GCP上部署了小型玩具应用程序，以及对ReactJS/HTML/CSS（我正在尝试进入gatsby，但我们将把它放在一边）、Docker和Django/DRF框架有一些熟悉。问题是我真的不知道如何将它们整合到一个可扩展的&quot;或&quot;高可用&quot;的网络应用中，甚至不知道如何比较一种方法与另一种方法的可扩展性。我也知道CI/CD管道是典型的微服务架构的一部分，但对于一个单独的开发者来说，他们是否有意义，而不是试图让一个单体运行？鉴于&quot;可扩展&quot;可以意味着很多不同的事情，我完全可以接受更多开放式的答案，即专注于比纯粹的连接处理和动态内容服务更重要的事情，所以如果你认为有其他关于更好的实践/设计模式的见解应该被提及，请不要觉得仅限于在尽可能少的步骤中回答。在接下来的几个月里，我将有一些空闲时间来勾画想法和尝试事情（可能是一段时间内的最后一次），但我真的很好奇，真正的软件开发从业者会如何处理这样一个开放式的任务。不幸的是，在我的传统大学CS课程中，他们并没有提供关于如何制作可扩展网络应用的课程（可能是因为有成千上万种不同的方法），你知道吗？",
  "description_zh-Hant": "標題說明了一切，作為一個單獨的/小規模的開發團隊，你將如何在2022年做出一個可擴展的網絡應用？為了限制問題的空間，如何為一個同時有1000-100000名訪客的互聯網T恤店處理CRUD操作？<p>也許是為了使建議更容易，我已經玩過Firebase和Meteor等東西，做了一兩個kubernetes教程，在AWS/GCP上部署了小型玩具應用程序，以及對ReactJS/HTML/CSS（我正在嘗試進入gatsby，但我們將把它放在一邊）、Docker和Django/DRF框架有一些熟悉。問題是我真的不知道如何將它們整合到一個可擴展的&quot;或&quot;高可用&quot;的網絡應用中，甚至不知道如何比較一種方法與另一種方法的可擴展性。我也知道CI/CD管道是典型的微服務架構的一部分，但對於一個單獨的開發者來說，他們是否有意義，而不是試圖讓一個單體運行？鑑於&quot;可擴展&quot;可以意味著很多不同的事情，我完全可以接受更多開放式的答案，即專注於比純粹的連接處理和動態內容服務更重要的事情，所以如果你認為有其他關於更好的實踐/設計模式的見解應該被提及，請不要覺得僅限於在儘可能少的步驟中回答。在接下來的幾個月裡，我將有一些空閒時間來勾畫想法和嘗試事情（可能是一段時間內的最後一次），但我真的很好奇，真正的軟件開發從業者會如何處理這樣一個開放式的任務。不幸的是，在我的傳統大學CS課程中，他們並沒有提供關於如何製作可擴展網絡應用的課程（可能是因為有成千上萬種不同的方法），你知道嗎？"
}