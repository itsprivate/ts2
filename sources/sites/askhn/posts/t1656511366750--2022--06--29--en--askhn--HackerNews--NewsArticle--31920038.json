{
  "@type": "NewsArticle",
  "identifier": "2022--06--29--en--askhn--HackerNews--NewsArticle--31920038",
  "url": "https://news.ycombinator.com/item?id=31920038",
  "headline": "Ask HN: Functional vs. Imperative Implementation of Algorithms",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "There is always a tussle going on between functional vs imperative language people.<p>But nowadays most languages are mixed paradigm. Still there are differences.<p>Functional people give arguments like:<p>1. Code is easy to reason about<p>2. Can be verified easily and less prone to errors<p>3. Use mutation only when necessary, not as a default.<p>Imperative people say:<p>1. More efficient as close to the machine<p>2. More space efficient hence faster. (although functional languages can be as fast with compiler optimisations)<p>Functional languages are used in industry now at large scale e.g: Jane Street, Twitter, etc. Imperative language has always been used in industries. I bring up industries because it proves that the languages are scalable.<p>Functional programming experts say that their code is efficient because the compiler translates it to an efficient representation on the CPU. They have TCO and other things. But they don't mutate data and hence every function call creates a new data in memory taking up space. How do they overcome that?<p>Also we can switch between imperative and functional implementations. Basically an algorithm can be implemented eitherwise.<p>Now my question is where do I learn about these nitty gritty's? Should I read about compilers more? Or systems? Or what?<p>Can you suggest books/blogs/courses?",
  "keywords": [
    "Ask HN"
  ],
  "genre": "Ask HN",
  "author": {
    "@type": "Person",
    "name": "newsoul",
    "url": "https://news.ycombinator.com/user?id=newsoul"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=31920038",
  "sameAs": "https://news.ycombinator.com/item?id=31920038",
  "dateCreated": "2022-06-29T14:02:46.750Z",
  "datePublished": "2022-06-29T13:47:41.000Z",
  "dateModified": "2022-06-29T14:02:46.750Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 3
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 4
    }
  ],
  "headline_zh-Hans": "Ask HN: 算法的功能性与强制性的实现\n",
  "headline_zh-Hant": "Ask HN: 算法的功能性與強制性的實現\n",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "功能性语言和命令性语言的人之间总是在争论不休。<p>但现在大多数语言都是混合范式。<p>函数式语言的人提出的论点是：<p>1.代码容易推理<p>2.容易验证，并且容易被接受。代码容易推理<p>2.可以很容易地验证，而且不容易出错<p>3.只有在必要时才使用突变，而不是默认。<p>惰性者说：<p>1. 更加接近机器的效率<p>2.更加节省空间，因此更快。(尽管函数式语言在编译器的优化下可以达到同样的速度)<p>函数式语言现在在工业界得到了大规模的应用，例如。Jane Street、Twitter等。命令式语言一直在工业中使用。<p>功能化编程专家说，他们的代码是高效的，因为编译器将其翻译成了CPU上的高效表示。他们有TCO和其他东西。但是他们不对数据进行变异，因此每个函数调用都会在内存中创建一个新的数据，占用空间。他们是如何克服这个问题的？<p>另外，我们可以在命令式和函数式实现之间进行切换。<p>现在我的问题是，我在哪里可以了解这些细枝末节的东西？我应该更多地阅读编译器的知识吗？还是系统？或者什么？<p>你能推荐一些书籍/博客/课程吗？\n",
  "description_zh-Hant": "功能性語言和命令性語言的人之間總是在爭論不休。<p>但現在大多數語言都是混合範式。<p>函數式語言的人提出的論點是：<p>1.代碼容易推理<p>2.容易驗證，並且容易被接受。代碼容易推理<p>2.可以很容易地驗證，而且不容易出錯<p>3.只有在必要時才使用突變，而不是默認。<p>惰性者說：<p>1. 更加接近機器的效率<p>2.更加節省空間，因此更快。(儘管函數式語言在編譯器的優化下可以達到同樣的速度)<p>函數式語言現在在工業界得到了大規模的應用，例如。Jane Street、Twitter等。命令式語言一直在工業中使用。<p>功能化編程專家說，他們的代碼是高效的，因為編譯器將其翻譯成了CPU上的高效表示。他們有TCO和其他東西。但是他們不對數據進行變異，因此每個函數調用都會在內存中創建一個新的數據，佔用空間。他們是如何克服這個問題的？<p>另外，我們可以在命令式和函數式實現之間進行切換。<p>現在我的問題是，我在哪裡可以瞭解這些細枝末節的東西？我應該更多地閱讀編譯器的知識嗎？還是系統？或者什麼？<p>你能推薦一些書籍/博客/課程嗎？\n"
}