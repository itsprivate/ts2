{
  "@type": "NewsArticle",
  "identifier": "2022--08--21--en--askhn--HackerNews--NewsArticle--32540102",
  "url": "https://news.ycombinator.com/item?id=32540102",
  "headline": "Ask HN: Suggest rigorous ways to learn design of data structures and algorithms",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "By seriously I mean both the theory and the practical. The theory of how to actually design and analyse algorithms. And also implement them in a language. The language shouldn't matter while thinking about algorithms.<p>At the moment I am not opting for something like leetcode. I want something that teach me the principles of how to actually design from the fundamentals.<p>Also I want to be as much language agnostic as possible. By that I mean the ability to think about algorithmic solutions to problems in terms of mental models that I can then translate to a low level language like C, or a dynamic imperative language like Python, or a functional language like Racket, SML or OCaml. Of course, the assumption here is that I must know the language I want to implement the algorithm in. So basically I want to learn about algorithms in a paradigm agnostic way so that I can implement them in any paradigm I want.<p>How to go about this? Do you have any book or course suggestions in mind?",
  "keywords": [
    "Ask HN"
  ],
  "genre": "Ask HN",
  "author": {
    "@type": "Person",
    "name": "newsoul",
    "url": "https://news.ycombinator.com/user?id=newsoul"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=32540102",
  "sameAs": "https://news.ycombinator.com/item?id=32540102",
  "dateCreated": "2022-08-21T13:44:18.487Z",
  "datePublished": "2022-08-21T13:42:19.000Z",
  "dateModified": "2022-08-21T13:44:18.487Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 2
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 0
    }
  ],
  "headline_zh-Hans": "Ask HN: 提出严格的方法来学习数据结构和算法的设计\n",
  "headline_zh-Hant": "Ask HN: 提出嚴格的方法來學習數據結構和算法的設計\n",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "我所说的认真是指理论和实践。关于如何实际设计和分析算法的理论。也可以用一种语言来实现它们。在思考算法的时候，语言应该是不重要的。<p>目前，我没有选择像leetcode这样的东西。我想要的是教我如何从根本上进行实际设计的原则。<p>此外，我还想尽可能地与语言无关。我的意思是说，我有能力用思维模型来思考问题的算法解决方案，然后将其转化为C语言这样的低级语言，或Python这样的动态命令式语言，或Racket、SML或OCaml这样的功能语言。当然，这里的假设是，我必须知道我想用什么语言来实现算法。因此，基本上我想以一种与范式无关的方式来学习算法，这样我就可以用我想要的任何范式来实现它们。<p>如何去做？你有什么书或课程建议吗？\n",
  "description_zh-Hant": "我所說的認真是指理論和實踐。關於如何實際設計和分析算法的理論。也可以用一種語言來實現它們。在思考算法的時候，語言應該是不重要的。<p>目前，我沒有選擇像leetcode這樣的東西。我想要的是教我如何從根本上進行實際設計的原則。<p>此外，我還想盡可能地與語言無關。我的意思是說，我有能力用思維模型來思考問題的算法解決方案，然後將其轉化為C語言這樣的低級語言，或Python這樣的動態命令式語言，或Racket、SML或OCaml這樣的功能語言。當然，這裡的假設是，我必須知道我想用什麼語言來實現算法。因此，基本上我想以一種與範式無關的方式來學習算法，這樣我就可以用我想要的任何範式來實現它們。<p>如何去做？你有什麼書或課程建議嗎？\n"
}