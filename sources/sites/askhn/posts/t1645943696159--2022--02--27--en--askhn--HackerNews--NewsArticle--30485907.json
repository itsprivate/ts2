{
  "@type": "NewsArticle",
  "identifier": "2022--02--27--en--askhn--HackerNews--NewsArticle--30485907",
  "url": "https://news.ycombinator.com/item?id=30485907",
  "headline": "Ask HN: Is it possible to become a language agnostic programmer?",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "Language agnostic doesn't mean the engineer doesn't have a favourite language of choice. It means that the person can think of a problem critically, independent of any programming language and then design a solution. Then they can implement it in whatever language it needs to be implemented in. And does so efficiently. Ofcourse, to do this, they have to know the entire stack from the highest of high to the lowest of low abstraction levels of the machine.<p>Is this possible in practice? If so how? Any books?",
  "keywords": [
    "Ask HN"
  ],
  "genre": "Ask HN",
  "author": {
    "@type": "Person",
    "name": "debanjan16",
    "url": "https://news.ycombinator.com/user?id=debanjan16"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=30485907",
  "sameAs": "https://news.ycombinator.com/item?id=30485907",
  "dateCreated": "2022-02-27T06:34:56.159Z",
  "datePublished": "2022-02-27T06:23:29.000Z",
  "dateModified": "2022-02-27T06:34:56.159Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 1
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 1
    }
  ],
  "headline_zh-Hans": "Ask HN: 有可能成为一个不依赖语言的程序员吗？",
  "headline_zh-Hant": "Ask HN: 有可能成為一個不依賴語言的程序員嗎？",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "语言不可知论者并不意味着该工程师没有自己喜欢的语言选择。它意味着这个人可以批判性地思考一个问题，不受任何编程语言的影响，然后设计一个解决方案。然后他们可以用任何需要实现的语言来实现它。而且，这样做很有效率。当然，要做到这一点，他们必须了解整个堆栈，从机器的最高抽象层到最低抽象层。<p>这在实践中可能吗？如果是的话，怎么做？有什么书吗？",
  "description_zh-Hant": "語言不可知論者並不意味著該工程師沒有自己喜歡的語言選擇。它意味著這個人可以批判性地思考一個問題，不受任何編程語言的影響，然後設計一個解決方案。然後他們可以用任何需要實現的語言來實現它。而且，這樣做很有效率。當然，要做到這一點，他們必須瞭解整個堆棧，從機器的最高抽象層到最低抽象層。<p>這在實踐中可能嗎？如果是的話，怎麼做？有什麼書嗎？"
}