{
  "@type": "NewsArticle",
  "identifier": "2022--07--08--en--askhn--HackerNews--NewsArticle--32024761",
  "url": "https://news.ycombinator.com/item?id=32024761",
  "headline": "Ask HN: Code documentation is all right?",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "Currently researching the question with very limited industry experience myself and wonder: does everything ok here?<p>Complete and clear documentation of large legacy codebase is how common exactly in your experience?<p>Did API-documentation tools in the era of microservices aka Swagger/Postman/etc. eliminated the question completely?<p>My priors: \n- Clear documentation on high-level decisions and architecture is a good guide\n- Well docs on particular piece of code / service saves ton of time for other person to work with - to update or debug.\n- It's actually more probable in your company/team that code won't be documented on level considered &quot;good&quot;\n- The trickiest truth: it's rather boring to create  and maintain documentation yourself and rarely rewarded career-wise, even inside one team.<p>So: \nlots of newbees to the industry (see-me) won't have a knowledge of those processes from college; likely won't see them implemented in their team/org; likely won't see any career benefits from implementing the process as it won't seem great at perf review. Cycle ends here.<p>What am I missing in the view here?",
  "keywords": [
    "Ask HN"
  ],
  "genre": "Ask HN",
  "author": {
    "@type": "Person",
    "name": "plvch",
    "url": "https://news.ycombinator.com/user?id=plvch"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=32024761",
  "sameAs": "https://news.ycombinator.com/item?id=32024761",
  "dateCreated": "2022-07-08T09:28:48.651Z",
  "datePublished": "2022-07-08T09:25:04.000Z",
  "dateModified": "2022-07-08T09:28:48.651Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 1
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 0
    }
  ],
  "headline_zh-Hans": "Ask HN: 代码文档都是正确的吗？\n",
  "headline_zh-Hant": "Ask HN: 代碼文檔都是正確的嗎？\n",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "目前我正在研究这个问题，我自己的行业经验非常有限，我想知道：这里的一切都可以吗？<p>在你的经验中，大型遗留代码库的完整和清晰的文档究竟有多普遍？<p>在微服务时代的API文档工具，又称Swagger/Postman/等，是否完全消除了这个问题？\n- 关于高层决策和架构的清晰文档是一个很好的指导。\n- 关于特定代码/服务的良好文档可以为其他人节省大量的工作时间--更新或调试。\n- 实际上，在你的公司/团队中，更有可能的是，代码不会被记录在被认为是 \"好 \"的水平上。\n- 最棘手的事实是：自己创建和维护文档是相当枯燥的，即使在一个团队内部，也很少有职业上的回报。\n很多新入行的人（见我）在大学里并不了解这些流程；很可能不会看到这些流程在他们的团队/组织中得到实施；很可能看不到实施这些流程带来的任何职业利益，因为这并不意味着它在评审中表现出色。循环到此结束。<p>我在这里错过了什么？\n",
  "description_zh-Hant": "目前我正在研究這個問題，我自己的行業經驗非常有限，我想知道：這裡的一切都可以嗎？<p>在你的經驗中，大型遺留代碼庫的完整和清晰的文檔究竟有多普遍？<p>在微服務時代的API文檔工具，又稱Swagger/Postman/等，是否完全消除了這個問題？\n- 關於高層決策和架構的清晰文檔是一個很好的指導。\n- 關於特定代碼/服務的良好文檔可以為其他人節省大量的工作時間--更新或調試。\n- 實際上，在你的公司/團隊中，更有可能的是，代碼不會被記錄在被認為是 \"好 \"的水平上。\n- 最棘手的事實是：自己創建和維護文檔是相當枯燥的，即使在一個團隊內部，也很少有職業上的回報。\n很多新入行的人（見我）在大學裡並不瞭解這些流程；很可能不會看到這些流程在他們的團隊/組織中得到實施；很可能看不到實施這些流程帶來的任何職業利益，因為這並不意味著它在評審中表現出色。循環到此結束。<p>我在這裡錯過了什麼？\n"
}