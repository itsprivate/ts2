{
  "@type": "NewsArticle",
  "identifier": "2022--04--07--en--askhn--HackerNews--NewsArticle--30948201",
  "url": "https://news.ycombinator.com/item?id=30948201",
  "headline": "Ask HN: Why do you hate SAFe (Scaled Agile Framework)?",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "I'm asked this question as a dev of 20+ years who found SAFe when trying to solve a communication problem. I'm now a certified SPC, RTE who can teach all the classes and lead engagements.<p>But I keep seeing comments on here from people talking about threatening to quit their jobs if SAFe is implemented or actively looking because of it...and I want to know where it's all going wrong?<p>Examples from today: https://news.ycombinator.com/item?id=30944386<p>Please discuss here or feel free to reach out on Keybase (in my profile). I want to understand and potentially write about it to help fix it.<p>I got into this thanks to a lot of guidance from Hacker News. Posted a long rant (https://news.ycombinator.com/item?id=17154355) about the state of all things agile (largely scrum based) and one of the commenters pointed me to a great book by Donald Reinertson called 2nd Generation Lean Product Development. It's not process heavy, but it is math and theory heavy. I loved it and absolutely advocate for it. When I got a chance to use it with my team it was working great, but I realized I was falling very short with communicating with the rest of the business so I started looking for a more formal process based around his work and that's how I found SAFe.<p>I went deep on the material because I needed to know how to trim the fat on the processes involved, because it's too much for less than 50 people and I'm happy with the results I've seen.<p>What SAFe <i>should</i> result in...<p>- Developers setting the development schedule based on business priorities rather than being handed arbitrary deadlines<p>- Far fewer meetings because you're trading the 2-3 day PI Planning meeting for dozens of smaller ones over the next quarter<p>- 2 separate backlogs with a 70% / 30% capacity planning split. One for Product priorities (70%) and one for dev/ops/arch priorities (30%) to ensure that technical people don't have to work with non-technical people to prioritize system level things that they KNOW need to be done.<p>- Avoidance of last second priority changes due to the agreed upon priorities and plan for the upcoming quarter<p>- No over-scheduling because SAFe calls for planning based on 2/3 capacity estimate per team per 2 week iteration and then leaves the final two weeks of the PI entirely unplanned as buffer or a 20% time reward for teams who did finish on schedule. The goal is &quot;maximum sustainable pace&quot; and it's one of the reason that &quot;iteration&quot; is used in place of &quot;sprint&quot; because by definition, a &quot;sprint&quot; is not a sustainable pace.<p>- Better coordination between multiple teams because they have a time to plan it out that doesn't derail short sighted 2 week &quot;sprint&quot; processes<p>All of these things (and more) can only happen if leadership is in board. If company or product leadership is unwilling to trust their developers to relinquish this type of control and try to maintain a grip on the process, none of it's going to work.",
  "keywords": [
    "Ask HN"
  ],
  "genre": "Ask HN",
  "author": {
    "@type": "Person",
    "name": "brightball",
    "url": "https://news.ycombinator.com/user?id=brightball"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=30948201",
  "sameAs": "https://news.ycombinator.com/item?id=30948201",
  "dateCreated": "2022-04-07T18:11:59.585Z",
  "datePublished": "2022-04-07T18:07:50.000Z",
  "dateModified": "2022-04-07T18:11:59.585Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 2
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 0
    }
  ],
  "headline_zh-Hans": "Ask HN: 你为什么讨厌SAFe（Scaled Agile Framework）？",
  "headline_zh-Hant": "Ask HN: 你為什麼討厭SAFe（Scaled Agile Framework）？",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "我被问到这个问题时，是作为一个有20多年经验的开发人员，在试图解决一个沟通问题时发现了SAFe。我现在是一个经过认证的SPC、RTE，可以教授所有的课程并领导参与活动。<p>但是我一直在这里看到人们的评论，说如果实施SAFe就威胁要辞职，或者因为SAFe而积极寻找......我想知道哪里出了问题？<p>今天的例子：https://news.ycombinator.com/item?id=30944386<p>请在这里讨论或随时在Keybase（在我的资料中）联系。我想了解并有可能写下它，以帮助解决这个问题。<p>我进入这个领域多亏了Hacker News的很多指导。我发表了一篇关于所有敏捷事物（主要是基于Scrum的）的长篇大论（https://news.ycombinator.com/item?id=17154355），其中一个评论者给我指了一本由Donald Reinertson写的名为《第二代精益产品开发》的好书。这本书不重过程，但它是数学和理论重。我很喜欢它，并且绝对拥护它。When I got a chance to use it with my team it was working great, but I realized I was falling very short with communicating with the rest of the business so I started looking for a more formal process based around his work and that's how I found SAFe.<p>I went deep on the material because I needed to know how to trim the fat on the processes involved, because it's too much for less than 50 people and I'm happy with the results I've seen. <p>What SAFe <i>should</i> result in...<p>- Developers setting the development schedule based on business priorities rather than being handed arbitrary deadlines<p>- Far fewer meetings because you're trading the 2-3 day PI Planning meeting for dozens of smaller ones over the next quarter<p>- 2 separate backlogs with a 70% / 30% capacity planning split. 一个用于产品优先级（70%），一个用于开发/运营/架构优先级（30%），以确保技术人员不必与非技术人员一起工作，以优先处理他们知道需要完成的系统级事情。 <p>- 避免由于商定的优先级和下一季度的计划而在最后一秒改变优先级<p>- 没有过度的计划，因为SAFe要求根据每个团队每2周迭代2/3的能力估计进行计划，然后留下PI的最后2周完全没有计划作为缓冲或20%的时间奖励给那些确实按期完成的团队。目标是 \"最大的可持续步伐\"，这也是用 \"迭代 \"代替 \"冲刺 \"的原因之一，因为根据定义，\"冲刺 \"不是一个可持续的步伐。<p>- 多个团队之间更好的协调，因为他们有一个时间来计划，不会破坏短视的2周 \"冲刺 \"过程<p>所有这些事情（以及更多）只能在领导层的参与下发生。如果公司或产品领导层不愿意相信他们的开发人员放弃这种类型的控制，并试图保持对流程的控制，那么这一切都不会成功。",
  "description_zh-Hant": "我被問到這個問題時，是作為一個有20多年經驗的開發人員，在試圖解決一個溝通問題時發現了SAFe。我現在是一個經過認證的SPC、RTE，可以教授所有的課程並領導參與活動。<p>但是我一直在這裡看到人們的評論，說如果實施SAFe就威脅要辭職，或者因為SAFe而積極尋找......我想知道哪裡出了問題？<p>今天的例子：https://news.ycombinator.com/item?id=30944386<p>請在這裡討論或隨時在Keybase（在我的資料中）聯繫。我想了解並有可能寫下它，以幫助解決這個問題。<p>我進入這個領域多虧了Hacker News的很多指導。我發表了一篇關於所有敏捷事物（主要是基於Scrum的）的長篇大論（https://news.ycombinator.com/item?id=17154355），其中一個評論者給我指了一本由Donald Reinertson寫的名為《第二代精益產品開發》的好書。這本書不重過程，但它是數學和理論重。我很喜歡它，並且絕對擁護它。When I got a chance to use it with my team it was working great, but I realized I was falling very short with communicating with the rest of the business so I started looking for a more formal process based around his work and that's how I found SAFe.<p>I went deep on the material because I needed to know how to trim the fat on the processes involved, because it's too much for less than 50 people and I'm happy with the results I've seen. <p>What SAFe <i>should</i> result in...<p>- Developers setting the development schedule based on business priorities rather than being handed arbitrary deadlines<p>- Far fewer meetings because you're trading the 2-3 day PI Planning meeting for dozens of smaller ones over the next quarter<p>- 2 separate backlogs with a 70% / 30% capacity planning split. 一個用於產品優先級（70%），一個用於開發/運營/架構優先級（30%），以確保技術人員不必與非技術人員一起工作，以優先處理他們知道需要完成的系統級事情。 <p>- 避免由於商定的優先級和下一季度的計劃而在最後一秒改變優先級<p>- 沒有過度的計劃，因為SAFe要求根據每個團隊每2周迭代2/3的能力估計進行計劃，然後留下PI的最後2周完全沒有計劃作為緩衝或20%的時間獎勵給那些確實按期完成的團隊。目標是 \"最大的可持續步伐\"，這也是用 \"迭代 \"代替 \"衝刺 \"的原因之一，因為根據定義，\"衝刺 \"不是一個可持續的步伐。<p>- 多個團隊之間更好的協調，因為他們有一個時間來計劃，不會破壞短視的2周 \"衝刺 \"過程<p>所有這些事情（以及更多）只能在領導層的參與下發生。如果公司或產品領導層不願意相信他們的開發人員放棄這種類型的控制，並試圖保持對流程的控制，那麼這一切都不會成功。"
}