{
  "@type": "NewsArticle",
  "identifier": "2022--02--28--en--askhn--HackerNews--NewsArticle--30501699",
  "url": "https://news.ycombinator.com/item?id=30501699",
  "headline": "Ask HN: Just database over the internet as the only backend?",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "This might seem a silly approach but in context of thinking about typical SaaS applications, I came across this postgrest which offers RESTful access to Postgres. Now one can build application to just that REST abstraction is one way to go about it instead of going through ORMs. Fair enough.<p>But taking it to further, just exposing raw Postgres sockets with TLS + row level security policies what would be the pros and cons of such an approach?<p>Main that I can think of:<p>1. Business logic would be all in clients (Flutter/React[Native] et al) hence updates would require updating those clients.<p>2. Database schema would have to be versioned and clients will have to check if they can continue with the version right now in production or exit with error message asking for an update.<p>3. Infrastructure wise, you'll just be running vanilla Postgres and that's it, there's no backend.<p>4. You would have NO API, you'd just have database.<p>5. For adding new parties, you'll be actually adding real Postgres users (or via some LDAP etc)<p>6. Workers? Background processing? That means inserting records into certain tables, picked up by processes on server side and computing results feeding back to the database.<p>Just seeking collective wisdom/experiences/opinions/stories on the subject if someone has tried this or what are other corner cases that might come up assuming that in every language there’s performant, good enough database driver (Postgres wire protocol) is available including in browsers (via Webassembly or without)<p>Thoughts?<p>[edited typos]",
  "keywords": [
    "Ask HN"
  ],
  "genre": "Ask HN",
  "author": {
    "@type": "Person",
    "name": "wg0",
    "url": "https://news.ycombinator.com/user?id=wg0"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=30501699",
  "sameAs": "https://news.ycombinator.com/item?id=30501699",
  "dateCreated": "2022-02-28T16:45:59.439Z",
  "datePublished": "2022-02-28T16:29:48.000Z",
  "dateModified": "2022-02-28T16:45:59.439Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 1
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 0
    }
  ],
  "headline_zh-Hans": "Ask HN: 只是在互联网上的数据库作为唯一的后端？",
  "headline_zh-Hant": "Ask HN: 只是在互聯網上的數據庫作為唯一的後端？",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "这似乎是一个愚蠢的方法，但在思考典型的SaaS应用程序的背景下，我遇到了这个postgrest，它提供了对Postgres的RESTful访问。现在，人们可以通过REST抽象来构建应用程序，而不是通过ORMs。<p>但是，进一步来说，只是用TLS+行级安全策略暴露原始的Postgres套接字，这种方法的利弊是什么？<p>我想到的主要是：<p>1. 业务逻辑将全部在客户端（Flutter/React[Native]等），因此更新将需要更新这些客户端。<p>2.数据库模式必须是版本化的，客户端将必须检查他们是否可以继续使用现在生产中的版本，或者退出时发出错误信息要求更新。<p>3.从基础设施上讲，你将只是运行vanilla Postgres，就这样，没有后台。<p>4.你将没有API，你只是有数据库。对于添加新的一方，你实际上是在添加真正的Postgres用户（或通过一些LDAP等）<p>6.工人？后台处理？这意味着将记录插入到某些表中，由服务器端的进程接收，并将计算结果反馈给数据库。<p>我只是在这个问题上寻求集体的智慧/经验/意见/故事，如果有人已经尝试过，或者假设在每种语言中都有足够好的数据库驱动（Postgres wire协议），包括在浏览器中（通过Webassembly或没有），那么可能出现的其他角落情况是什么？",
  "description_zh-Hant": "這似乎是一個愚蠢的方法，但在思考典型的SaaS應用程序的背景下，我遇到了這個postgrest，它提供了對Postgres的RESTful訪問。現在，人們可以通過REST抽象來構建應用程序，而不是通過ORMs。<p>但是，進一步來說，只是用TLS+行級安全策略暴露原始的Postgres套接字，這種方法的利弊是什麼？<p>我想到的主要是：<p>1. 業務邏輯將全部在客戶端（Flutter/React[Native]等），因此更新將需要更新這些客戶端。<p>2.數據庫模式必須是版本化的，客戶端將必須檢查他們是否可以繼續使用現在生產中的版本，或者退出時發出錯誤信息要求更新。<p>3.從基礎設施上講，你將只是運行vanilla Postgres，就這樣，沒有後臺。<p>4.你將沒有API，你只是有數據庫。對於添加新的一方，你實際上是在添加真正的Postgres用戶（或通過一些LDAP等）<p>6.工人？後臺處理？這意味著將記錄插入到某些表中，由服務器端的進程接收，並將計算結果反饋給數據庫。<p>我只是在這個問題上尋求集體的智慧/經驗/意見/故事，如果有人已經嘗試過，或者假設在每種語言中都有足夠好的數據庫驅動（Postgres wire協議），包括在瀏覽器中（通過Webassembly或沒有），那麼可能出現的其他角落情況是什麼？"
}