{
  "@type": "NewsArticle",
  "identifier": "2022--03--21--en--askhn--HackerNews--NewsArticle--30757919",
  "url": "https://news.ycombinator.com/item?id=30757919",
  "headline": "Ask HN: Tools to generate coverage of user documentation for code",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "Does anyone know of tools/techniques for generating a coverage report of user documentation over source code?  In other words, I'd like to be able to automatically determine when there is documentation missing for an implemented feature or if there is documentation for a feature that was removed.<p>I'm asking because I've been working on a tool for many years and it's grown large enough that I have a hard time keeping track of what all the parts do and what has and has not been documented.  What I'm thinking I'd like to do is add a tag to a piece of source code (C++) and put the corresponding tag in the user docs (RST).  Then, during the build, I'd like a report of untagged code, code/docs with matching tags, and code/docs with unmatched tags.<p>I also feel like there should be at least two levels of documentation to be tracked: 1) the overall feature and 2) fine-details about how the feature behaves under different circumstances.  For example, a feature that interacted with the network would have an overall description and some extra notes about how timeouts/retries are handled.<p>Does anyone have any experience with such a thing or have a similar interest?",
  "keywords": [
    "Ask HN"
  ],
  "genre": "Ask HN",
  "author": {
    "@type": "Person",
    "name": "tstack",
    "url": "https://news.ycombinator.com/user?id=tstack"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=30757919",
  "sameAs": "https://news.ycombinator.com/item?id=30757919",
  "dateCreated": "2022-03-21T18:36:19.533Z",
  "datePublished": "2022-03-21T18:34:03.000Z",
  "dateModified": "2022-03-21T18:36:19.533Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 1
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 0
    }
  ],
  "headline_zh-Hans": "Ask HN: 为代码生成用户文档覆盖面的工具",
  "headline_zh-Hant": "Ask HN: 為代碼生成用戶文檔覆蓋面的工具",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "有谁知道有什么工具/技术可以在源代码上生成用户文档的覆盖率报告？ <p>我问这个问题是因为我已经在一个工具上工作了很多年，它的规模已经大到我很难跟踪所有部件的作用，以及哪些已经被记录，哪些没有被记录。 我想做的是给一段源代码（C++）添加一个标签，并把相应的标签放在用户文档（RST）中。 然后，在构建过程中，我希望得到一份报告，其中包括未加标签的代码、有匹配标签的代码/文档以及有不匹配标签的代码/文档。<p>我还觉得至少应该有两个层次的文档被跟踪：1）整体功能；2）关于该功能在不同情况下的行为的细部细节。 例如，一个与网络交互的功能将有一个整体描述和一些关于如何处理超时/重试的额外说明。<p>有人对这样的事情有任何经验或有类似兴趣吗？",
  "description_zh-Hant": "有誰知道有什麼工具/技術可以在源代碼上生成用戶文檔的覆蓋率報告？ <p>我問這個問題是因為我已經在一個工具上工作了很多年，它的規模已經大到我很難跟蹤所有部件的作用，以及哪些已經被記錄，哪些沒有被記錄。 我想做的是給一段源代碼（C++）添加一個標籤，並把相應的標籤放在用戶文檔（RST）中。 然後，在構建過程中，我希望得到一份報告，其中包括未加標籤的代碼、有匹配標籤的代碼/文檔以及有不匹配標籤的代碼/文檔。<p>我還覺得至少應該有兩個層次的文檔被跟蹤：1）整體功能；2）關於該功能在不同情況下的行為的細部細節。 例如，一個與網絡交互的功能將有一個整體描述和一些關於如何處理超時/重試的額外說明。<p>有人對這樣的事情有任何經驗或有類似興趣嗎？"
}