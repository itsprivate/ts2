{
  "@type": "NewsArticle",
  "identifier": "2022--04--20--en--askhn--HackerNews--NewsArticle--31101347",
  "url": "https://news.ycombinator.com/item?id=31101347",
  "headline": "Ask HN: How should the cost of maintaining new software features be forecast?",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "I PM for a software engineering team.  Estimating the cost of implementing a new feature is a fairly squishy process, but our team has gotten reasonably good about it.  i.e. How many engineer weeks will it take to go from specification to released to customers?<p>However, I think it's an even-harder problem to try to estimate what the ongoing maintenance costs of supporting that new feature will be.<p>- There will inevitably be some amount of bugs and/or UX issues that need to be resolved soonish after release.<p>- Adding a new feature increases the cost of making future changes to the overall system (ex. changing a db object that is queried by 4 different endpoints will be harder than one that is only queried by 3 endpoints, also dependency management with microservices)<p>- Having more code doing more things means that engineer spin-up and switching costs increase.<p>We currently just budget a proportion of each quarter to address technical debt and unexpected bug reports, but are finding this proportion is getting increasingly taxed by the growing feature set, and it can be a bit hard to justify to the suits.  Our a priori expectations of what the 'system complexity' costs of different features still feels quite coarse.  There are some features that we maybe would have not prioritized as highly if we had been able to anticipate the downstream challenges that resulted from it.<p>Does anyone have good techniques that you use for comparatively forecasting how much the ongoing maintenance costs of a potential new feature will be? Our process currently feels too squishy and subjective, and I suspect someone here has found a better way. Or is this just an inherent challenge of software development planning that doesn't have an easy solution?",
  "keywords": [
    "Ask HN"
  ],
  "genre": "Ask HN",
  "author": {
    "@type": "Person",
    "name": "cwkoss",
    "url": "https://news.ycombinator.com/user?id=cwkoss"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=31101347",
  "sameAs": "https://news.ycombinator.com/item?id=31101347",
  "dateCreated": "2022-04-20T19:09:38.005Z",
  "datePublished": "2022-04-20T18:55:59.000Z",
  "dateModified": "2022-04-20T19:09:38.005Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 4
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 0
    }
  ],
  "headline_zh-Hans": "Ask HN: 应该如何预测维护新软件功能的成本？",
  "headline_zh-Hant": "Ask HN: 應該如何預測維護新軟件功能的成本？",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "我是一个软件工程团队的PM。 估算实施一项新功能的成本是一个相当困难的过程，但我们的团队在这方面已经做得相当好了。也就是说，从规范到发布给客户需要多少个工程师周？ <p>然而，我认为要估算支持该新功能的持续维护成本是一个更难的问题。<p>- 在发布后不久，不可避免地会出现一些需要解决的bug和/或用户体验问题。<p>- 增加一个新功能会增加未来对整个系统进行修改的成本（例如。<p>- 有更多的代码在做更多的事情，意味着工程师升级和切换的成本增加。<p> 我们目前只是在每个季度预算中拿出一部分资金来解决技术债务和意外的bug报告，但我们发现这个比例越来越多地被不断增长的功能集所占用，而且有点难以向诉讼方证明这一点。 我们对不同功能的 \"系统复杂性 \"成本的先验预期仍然相当粗略。 有一些功能，如果我们能够预见到其带来的下游挑战，我们可能就不会将其列为优先事项。<p>谁有好的技术可以用来比较预测一个潜在的新功能的持续维护成本是多少？目前，我们的程序感觉太软弱和主观了，我怀疑这里有人找到了更好的方法。或者，这只是软件开发计划的一个固有的挑战，没有一个简单的解决方案？",
  "description_zh-Hant": "我是一個軟件工程團隊的PM。 估算實施一項新功能的成本是一個相當困難的過程，但我們的團隊在這方面已經做得相當好了。也就是說，從規範到發佈給客戶需要多少個工程師周？ <p>然而，我認為要估算支持該新功能的持續維護成本是一個更難的問題。<p>- 在發佈後不久，不可避免地會出現一些需要解決的bug和/或用戶體驗問題。<p>- 增加一個新功能會增加未來對整個系統進行修改的成本（例如。<p>- 有更多的代碼在做更多的事情，意味著工程師升級和切換的成本增加。<p> 我們目前只是在每個季度預算中拿出一部分資金來解決技術債務和意外的bug報告，但我們發現這個比例越來越多地被不斷增長的功能集所佔用，而且有點難以向訴訟方證明這一點。 我們對不同功能的 \"系統複雜性 \"成本的先驗預期仍然相當粗略。 有一些功能，如果我們能夠預見到其帶來的下游挑戰，我們可能就不會將其列為優先事項。<p>誰有好的技術可以用來比較預測一個潛在的新功能的持續維護成本是多少？目前，我們的程序感覺太軟弱和主觀了，我懷疑這裡有人找到了更好的方法。或者，這只是軟件開發計劃的一個固有的挑戰，沒有一個簡單的解決方案？"
}