{
  "@type": "NewsArticle",
  "identifier": "2022--07--17--en--askhn--HackerNews--NewsArticle--32128631",
  "url": "https://news.ycombinator.com/item?id=32128631",
  "headline": "Ask HN: Using sed/awk to bulk generate static HTML pages off of a template",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "Hypothetically, consider a social photo platform - each pic gets its own url, this page contains the image, text about the image, buttons for the user to click, related pics, and some user-specific elements (maybe notifications, etc.).<p>There are different ways of going about the frontend. In each case, elements specific to the logged-in-user and the related images get fetched via api calls and are rendered client side.<p>For rendering the rest of the page -<p>1. Everything is rendered client side - one can use a single page application to handle the routing. The page structure stays the same, and new image uri's and the associated content are fetched via api calls.<p>SEO is a priority, so pure client side rendering is suboptimal.<p>2. Server side rendering for each page with NextJS or even Express is another option.<p>3. Another way is to do a static export in something like NextJS - which will generate separate html files for each image.<p>4. Now my thought is to skip all of that and go old school with sed/awk. We'll have a template file with all the styling elements and placeholders for the image uri and its description, etc. Then a script iterates through a list of values (queried from a database) specific to each image (img source URIs, description text, etc.) and uses sed to replace the placeholders in the template file and output a separate html file.<p>Each file has the same javascript to load the user-specific components.<p>Every time someone adds a new image, the script runs with the uri of the image and the description, etc. as the variables passed to it, and adds a new html file in a flat file structure.<p>These &quot;variables&quot; are stored in a database. So whenever we change the &quot;design&quot; of the page, we repeat the same process again - regenerate each html file.<p>The flat file structure will run into limitations, which is solvable with a directory structure. Nginx remains performant  with large numbers of files.<p>Right now, we use NextJS with a mix of server side rendering and static pages, so it is all good. But I have been wondering about achieving something similar with more rudimentary (and performant) tools.<p>There's not too much additional work involved - templatizing the html file is straightforward, and this won't be difficult to script.<p>What's good and bad about this?",
  "keywords": [
    "Ask HN"
  ],
  "genre": "Ask HN",
  "author": {
    "@type": "Person",
    "name": "arunnanda",
    "url": "https://news.ycombinator.com/user?id=arunnanda"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=32128631",
  "sameAs": "https://news.ycombinator.com/item?id=32128631",
  "dateCreated": "2022-07-17T17:33:45.049Z",
  "datePublished": "2022-07-17T17:03:22.000Z",
  "dateModified": "2022-07-17T17:33:45.049Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 1
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 0
    }
  ],
  "headline_zh-Hans": "Ask HN: 使用sed/awk在模板上批量生成静态HTML页面\n",
  "headline_zh-Hant": "Ask HN: 使用sed/awk在模板上批量生成靜態HTML頁面\n",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "假设一下，考虑一个社交照片平台--每张照片都有自己的url，这个页面包含图片、关于图片的文本、供用户点击的按钮、相关的图片以及一些用户特定的元素（可能是通知等）。<p>有不同的方式来处理前端。在每一种情况下，登录用户的特定元素和相关图片都是通过api调用获取的，并在客户端呈现。<p>对于呈现页面的其余部分--<p>1. 一切都在客户端呈现 - 可以使用一个单页应用程序来处理路由。页面结构保持不变，新的图片URI和相关内容通过api调用获取。<p>SEO是一个优先事项，所以纯客户端渲染是次优的。<p>2.用NextJS甚至Express对每个页面进行服务器端渲染是另一种选择。<p>3.另一种方法是在类似NextJS的东西中做一个静态导出--这将为每个图片生成单独的html文件。<p>4.现在我的想法是跳过所有这些，用sed/awk进行老式处理。我们将有一个模板文件，其中包含所有的造型元素和图片URI及其描述的占位符，等等。然后，一个脚本遍历每个图片的特定值（从数据库中查询），并使用sed来替换模板文件中的占位符，并输出一个单独的HTML文件。 <p>每当有人添加新的图片时，脚本就会以图片的URI和描述等作为变量传递给它，并在一个平面文件结构中添加一个新的html文件。因此，每当我们改变页面的&quot;设计&quot;时，我们再次重复同样的过程--重新生成每个html文件。<p>平面文件结构将遇到限制，这可以通过目录结构来解决。Nginx在处理大量文件时仍然表现出色。<p>现在，我们使用NextJS，混合使用服务器端渲染和静态页面，所以这一切都很好。但我一直在想，用更初级（和性能）的工具来实现类似的东西。<p>没有太多的额外工作--将html文件模板化是直接的，这不会是困难的脚本。<p>这有什么好和坏？\n",
  "description_zh-Hant": "假設一下，考慮一個社交照片平臺--每張照片都有自己的url，這個頁面包含圖片、關於圖片的文本、供用戶點擊的按鈕、相關的圖片以及一些用戶特定的元素（可能是通知等）。<p>有不同的方式來處理前端。在每一種情況下，登錄用戶的特定元素和相關圖片都是通過api調用獲取的，並在客戶端呈現。<p>對於呈現頁面的其餘部分--<p>1. 一切都在客戶端呈現 - 可以使用一個單頁應用程序來處理路由。頁面結構保持不變，新的圖片URI和相關內容通過api調用獲取。<p>SEO是一個優先事項，所以純客戶端渲染是次優的。<p>2.用NextJS甚至Express對每個頁面進行服務器端渲染是另一種選擇。<p>3.另一種方法是在類似NextJS的東西中做一個靜態導出--這將為每個圖片生成單獨的html文件。<p>4.現在我的想法是跳過所有這些，用sed/awk進行老式處理。我們將有一個模板文件，其中包含所有的造型元素和圖片URI及其描述的佔位符，等等。然後，一個腳本遍歷每個圖片的特定值（從數據庫中查詢），並使用sed來替換模板文件中的佔位符，並輸出一個單獨的HTML文件。 <p>每當有人添加新的圖片時，腳本就會以圖片的URI和描述等作為變量傳遞給它，並在一個平面文件結構中添加一個新的html文件。因此，每當我們改變頁面的&quot;設計&quot;時，我們再次重複同樣的過程--重新生成每個html文件。<p>平面文件結構將遇到限制，這可以通過目錄結構來解決。Nginx在處理大量文件時仍然表現出色。<p>現在，我們使用NextJS，混合使用服務器端渲染和靜態頁面，所以這一切都很好。但我一直在想，用更初級（和性能）的工具來實現類似的東西。<p>沒有太多的額外工作--將html文件模板化是直接的，這不會是困難的腳本。<p>這有什麼好和壞？\n"
}