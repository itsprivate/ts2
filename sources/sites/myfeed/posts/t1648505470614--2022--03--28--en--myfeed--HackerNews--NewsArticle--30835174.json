{
  "@type": "NewsArticle",
  "identifier": "2022--03--28--en--myfeed--HackerNews--NewsArticle--30835174",
  "url": "https://news.ycombinator.com/item?id=30835174",
  "headline": "Async-stripe 0.14, a rust client to accept payments",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "Hi!<p>I am happy to announce version 0.14.0 of async-stripe (https://payments.rs) which introduces a number of new features. async-stripe is a client for the stripe API with a bring-your-own-runtime approach. It will work with whatever stack you use.<p>On a personal note, having worked on this project for over a year now, this is the first release where I feel like the ergonomics, features, and Stripe api coverage are finally getting 'good'.<p>Changelog: https://github.com/arlyon/async-stripe/releases/tag/v0.14.0<p>breaking - fluent client config: you can set the client id, stripe account, and strategy with a new builder-style api<p>improved the codegen to expand api coverage: we added `card` to the api!<p>added `Default` across the codebase: we added default in many more places<p>opt-in auto-retry functionality following the stripe retry headers: the client will retry failed requests<p>opt-in idempotency: manual verification and retry if needed<p>improve test coverage: we added tarpaulin and started tracking coverage. from now on new contributions will be expected to be tested properly, and we will be adding extensive examples<p>piles of examples: we have a whole load of shiny examples to look at, along with example-doc linking to put the examples straight alongside the code in docs.rs. very happy with the ergonomics here.<p>As mentioned, we also opted in to try out RFC 3123: https://rust-lang.github.io/rfcs/3123-rustdoc-scrape-examples.html which has been a dream. Some examples:<p>PaymentIntent::create: https://docs.rs/async-stripe/0.14.0/stripe/struct.PaymentIntent.html#method.create<p>AccountLink::create: https://docs.rs/async-stripe/0.14.0/stripe/struct.AccountLink.html#method.create<p>Customer::list: https://docs.rs/async-stripe/0.14.0/stripe/struct.Customer.html#method.list<p>Additionally, Stripe have begun to sponsor the project which, while the project is still not affiliated with Stripe, or considered a Stripe product, marks a very cool moment in the project history and my own career. With the support I've been able to get a domain, send out some swag to the contributors, and plan on running some rust workshops in London.<p>That said, we still have some challenges. For this project, compile time has always been a fundamental trade-off. a) there is a lot of generated code and b) there is an obscene amount of macro-expansion code (mainly serde). These together make for awful compile times. For 0.15, we plan to group the generated code into individual crates so that there are more compilation units. Additionally, we are thinking about how to reduce the reliance on macro expansion by potentially replacing serde with something more lightweight. If you have ideas and want to join the conversation, please hop in here: https://github.com/arlyon/async-stripe/discussions/77<p>Looking forward for any and all feedback or questions<p>Cheers<p>Alex<p>Conversation on /r/rust: https://www.reddit.com/r/rust/comments/tqid6w/announcing_asyncstripe_014_a_rust_client_to/",
  "keywords": [],
  "author": {
    "@type": "Person",
    "name": "arlyon",
    "url": "https://news.ycombinator.com/user?id=arlyon"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=30835174",
  "sameAs": "https://news.ycombinator.com/item?id=30835174",
  "dateCreated": "2022-03-28T22:11:10.614Z",
  "datePublished": "2022-03-28T20:28:45.000Z",
  "dateModified": "2022-03-28T22:11:10.614Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 2
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 0
    }
  ],
  "headline_zh-Hans": "Async-stripe 0.14，一个接受付款的rust客户端",
  "headline_zh-Hant": "Async-stripe 0.14，一個接受付款的rust客戶端",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "嗨！<p>我很高兴地宣布async-stripe（https://payments.rs）的0.14.0版本，它引入了许多新功能。async-stripe是一个stripe API的客户端，采用自带运行时间的方法。<p>就个人而言，在这个项目上工作了一年多之后，这是我觉得人机工程学、功能和Stripe api覆盖率终于变得'好'的第一个版本。<p>Changelog: https://github.com/arlyon/async-stripe/releases/tag/v0.14.0<p>突破性的--流畅的客户端配置：你可以通过一个新的构建器式api设置客户端id、stripe账户和策略<p>改进了代码根以扩大api覆盖率：我们将`card`加入api! <p>在整个代码库中添加了`Default'：我们在更多的地方添加了default<p>opt-in自动重试功能，遵循strippe重试头文件：客户端将重试失败的请求<p>opt-in idempotency：如果需要，手动验证和重试<p>改进测试覆盖率：我们添加了tarpaulin并开始跟踪覆盖率。从现在开始，新的贡献将被期望得到适当的测试，我们将增加大量的例子<p>成堆的例子：我们有一大堆闪亮的例子可以看，还有例子-文档链接，把例子直接放在docs.rs中的代码旁边。对这里的人体工程学非常满意。<p>如前所述，我们也选择了尝试RFC 3123：https://rust-lang.github.io/rfcs/3123-rustdoc-scrape-examples.html，这是一个梦想。一些例子：<p>PaymentIntent::create: https://docs.rs/async-stripe/0.14.0/stripe/struct.PaymentIntent.html#method.create<p>AccountLink::create: https://docs.rs/async-stripe/0.14.0/stripe/struct.AccountLink.html#method.create<p>Customer::list: https://docs.rs/async-stripe/0.14.0/stripe/struct.Customer.html#method.list<p>此外，Stripe已经开始赞助该项目，虽然该项目仍然不隶属于Stripe，也不被认为是Stripe的产品，但在项目历史和我的职业生涯中是一个非常酷的时刻。有了这些支持，我已经能够获得一个域名，向贡献者发送一些礼品，并计划在伦敦举办一些锈蚀研讨会。<p>尽管如此，我们仍然有一些挑战。对于这个项目来说，编译时间一直是一个基本的权衡。a）有大量的生成代码，b）有大量的宏扩展代码（主要是Serde）。这些因素共同导致了可怕的编译时间。在0.15版本中，我们计划将生成的代码分组到各个板块中，这样就有了更多的编译单元。此外，我们正在考虑如何减少对宏扩展的依赖，可能用更轻量级的东西取代serde。如果你有想法并想加入对话，请跳到这里：https://github.com/arlyon/async-stripe/discussions/77<p>期待任何和所有的反馈或问题<p>欢呼<p>Alex<p>在/r/rust的对话：https://www.reddit.com/r/rust/comments/tqid6w/announcing_asyncstripe_014_a_rust_client_to/",
  "description_zh-Hant": "嗨！<p>我很高興地宣佈async-stripe（https://payments.rs）的0.14.0版本，它引入了許多新功能。async-stripe是一個stripe API的客戶端，採用自帶運行時間的方法。<p>就個人而言，在這個項目上工作了一年多之後，這是我覺得人機工程學、功能和Stripe api覆蓋率終於變得'好'的第一個版本。<p>Changelog: https://github.com/arlyon/async-stripe/releases/tag/v0.14.0<p>突破性的--流暢的客戶端配置：你可以通過一個新的構建器式api設置客戶端id、stripe賬戶和策略<p>改進了代碼根以擴大api覆蓋率：我們將`card`加入api! <p>在整個代碼庫中添加了`Default'：我們在更多的地方添加了default<p>opt-in自動重試功能，遵循strippe重試頭文件：客戶端將重試失敗的請求<p>opt-in idempotency：如果需要，手動驗證和重試<p>改進測試覆蓋率：我們添加了tarpaulin並開始跟蹤覆蓋率。從現在開始，新的貢獻將被期望得到適當的測試，我們將增加大量的例子<p>成堆的例子：我們有一大堆閃亮的例子可以看，還有例子-文檔鏈接，把例子直接放在docs.rs中的代碼旁邊。對這裡的人體工程學非常滿意。<p>如前所述，我們也選擇了嘗試RFC 3123：https://rust-lang.github.io/rfcs/3123-rustdoc-scrape-examples.html，這是一個夢想。一些例子：<p>PaymentIntent::create: https://docs.rs/async-stripe/0.14.0/stripe/struct.PaymentIntent.html#method.create<p>AccountLink::create: https://docs.rs/async-stripe/0.14.0/stripe/struct.AccountLink.html#method.create<p>Customer::list: https://docs.rs/async-stripe/0.14.0/stripe/struct.Customer.html#method.list<p>此外，Stripe已經開始贊助該項目，雖然該項目仍然不隸屬於Stripe，也不被認為是Stripe的產品，但在項目歷史和我的職業生涯中是一個非常酷的時刻。有了這些支持，我已經能夠獲得一個域名，向貢獻者發送一些禮品，並計劃在倫敦舉辦一些鏽蝕研討會。<p>儘管如此，我們仍然有一些挑戰。對於這個項目來說，編譯時間一直是一個基本的權衡。a）有大量的生成代碼，b）有大量的宏擴展代碼（主要是Serde）。這些因素共同導致了可怕的編譯時間。在0.15版本中，我們計劃將生成的代碼分組到各個板塊中，這樣就有了更多的編譯單元。此外，我們正在考慮如何減少對宏擴展的依賴，可能用更輕量級的東西取代serde。如果你有想法並想加入對話，請跳到這裡：https://github.com/arlyon/async-stripe/discussions/77<p>期待任何和所有的反饋或問題<p>歡呼<p>Alex<p>在/r/rust的對話：https://www.reddit.com/r/rust/comments/tqid6w/announcing_asyncstripe_014_a_rust_client_to/"
}