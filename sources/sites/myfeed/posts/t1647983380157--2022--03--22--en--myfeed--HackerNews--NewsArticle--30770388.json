{
  "@type": "NewsArticle",
  "identifier": "2022--03--22--en--myfeed--HackerNews--NewsArticle--30770388",
  "url": "https://news.ycombinator.com/item?id=30770388",
  "headline": "Show HN: Create Matplotlib visualizations from the command-line",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "I do lots of data analyses in the command-line and I was missing a simple utility to plot the output of a command (without having to script it). I like very much the Matplotlib API but I found no CLI to pipe data into it. So, I wrote MatplotCLI, a simple CLI that reads data from the stdin and allows to easily create interactive plots from the command-line. Have a look at the README for  examples and recipes. Let me know what you think, thanks!<p>Some examples:<p><pre><code>    $ plt &quot;hist(x,30)&quot; &lt; sample.json\n\n    $ cat sample.json | plt --no-show &quot;hist(x,30); savefig('myimage.png')&quot;\n\n    $ plt --no-input &quot;\n    x = np.linspace(-1,1,2000);\n    y = x*np.sin(1/x);\n    plot(x,y);\n    axis('scaled');\n    grid(True)&quot;\n\n    $ echo '\n        {&quot;a&quot;:0, &quot;b&quot;:1}\n        {&quot;a&quot;:1, &quot;b&quot;:0}\n        {&quot;a&quot;:3, &quot;b&quot;:3}' |\n    plt &quot;plot(a,b)&quot;</code></pre>",
  "keywords": [
    "Show HN"
  ],
  "genre": "Show HN",
  "author": {
    "@type": "Person",
    "name": "dmoura",
    "url": "https://news.ycombinator.com/user?id=dmoura"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=30770388",
  "sameAs": "https://github.com/dcmoura/matplotcli",
  "dateCreated": "2022-03-22T21:09:40.157Z",
  "datePublished": "2022-03-22T19:30:01.000Z",
  "dateModified": "2022-03-22T21:09:40.157Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 2
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 0
    }
  ],
  "headline_zh-Hans": "Show HN: 从命令行创建Matplotlib的可视化内容",
  "headline_zh-Hant": "Show HN: 從命令行創建Matplotlib的可視化內容",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "我在命令行中做了很多数据分析，我缺少一个简单的工具来绘制一个命令的输出（无需编写脚本）。我非常喜欢Matplotlib的API，但我发现没有CLI可以将数据导入其中。所以，我写了MatplotCLI，一个简单的CLI，可以从stdin中读取数据，并允许从命令行中轻松创建交互式绘图。Have a look at the README for examples and recipes. Let me know what you think, thanks!<p>Some examples:<p><pre><code> $ plt &quot;hist(x,30)&quot; &lt; sample.json\n\n    $ cat sample.json | plt --no-show &quot;hist(x,30); savefig('myimage.png')&quot;\n\n    $ plt --no-input &quot;\n    x = np.linspace(-1,1,2000);\n    y = x*np.sin(1/x);\n    plot(x,y);\n    axis('scaled');\n    grid(True)&quot;\n\n    $ echo '\n        {&quot;a&quot;:0, &quot;b&quot;:1}\n        {&quot;a&quot;:1, &quot;b&quot;:0}\n        {&quot;a&quot;:3, &quot;b&quot;:3}' |\n    plt &quot;plot(a,b)&quot;</code></pre>",
  "description_zh-Hant": "我在命令行中做了很多數據分析，我缺少一個簡單的工具來繪製一個命令的輸出（無需編寫腳本）。我非常喜歡Matplotlib的API，但我發現沒有CLI可以將數據導入其中。所以，我寫了MatplotCLI，一個簡單的CLI，可以從stdin中讀取數據，並允許從命令行中輕鬆創建交互式繪圖。Have a look at the README for examples and recipes. Let me know what you think, thanks!<p>Some examples:<p><pre><code> $ plt &quot;hist(x,30)&quot; &lt; sample.json\n\n    $ cat sample.json | plt --no-show &quot;hist(x,30); savefig('myimage.png')&quot;\n\n    $ plt --no-input &quot;\n    x = np.linspace(-1,1,2000);\n    y = x*np.sin(1/x);\n    plot(x,y);\n    axis('scaled');\n    grid(True)&quot;\n\n    $ echo '\n        {&quot;a&quot;:0, &quot;b&quot;:1}\n        {&quot;a&quot;:1, &quot;b&quot;:0}\n        {&quot;a&quot;:3, &quot;b&quot;:3}' |\n    plt &quot;plot(a,b)&quot;</code></pre>"
}