{
  "@type": "NewsArticle",
  "identifier": "2022--06--28--en--myfeed--HackerNews--NewsArticle--31907719",
  "url": "https://news.ycombinator.com/item?id=31907719",
  "headline": "Show HN: Pathfind 1M agents to unique destinations in my video game",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "Try it out here: https://yesbox.itch.io/archapolis<p>Or video: https://www.youtube.com/watch?v=x0HCnQqF5K4<p>Hi HN<p>I've been working on a city builder game for the last seven months. The first bar I wanted to pass was creating an efficient and more realistic path finding engine. Finally, version 0.1.0 of my game Archapolis is released! This is a toy/tech demo, but any and all feedback is really important to me, hence I'm releasing it now (for free).<p>I'd also like to get an idea how well my code runs on a variety of machines, so if you feel like testing it out, I would love to hear from you and your results!<p>I'll talk a bit about the path finding code here:<p>- It will find all possible shortest paths between two points in nearly the same time as Dijkstra's, and store them efficiently in a (C++) vector (i.e. array) (max possible paths is the binomial coefficient formula)<p>- An agent can access/find a path in constant time (just like a hash table) using some arithmetic (since the vector index is the &quot;key&quot;).<p>- The game will generate the all pairs all possible shortest paths once you place a unit down, and update each time the road network changes.<p>- The path finding algorithm can also utilize preference weights (e.g. beauty, tourism, commercial, cultural neighborhood...) stored in roads. An agent that has a preference will take the shortest path from all possible shortest paths that match their preference.<p>- In the download, these are colored roads for now, so units that match the road color will prefer those roads.<p>- Its multi-threaded. On my machine, finding / storing all pairs all shortest possible paths in a 50 x 50 grid (with 9,800 nodes) takes 17 seconds (with six cores) and needs 2.5 GB of RAM. This is an extreme stress test. If using Manhattan block sizes, this is around 13 square miles of city, or roughly nine Cities: Skylines tiles.<p>- In game, roads will be planned first, then placed all at once so only one update is needed.<p>- I'm really happy with the results. Not only will units utilize all shortest paths between two points, the preference weights gives personality to each unit, so part of my unit AI is already done!<p>- One other note: the one way roads are faster roads (less &quot;weight&quot;), though the agents will still move the same speed over them. They just create faster/shorter paths for testing the algo.",
  "keywords": [
    "Show HN"
  ],
  "genre": "Show HN",
  "author": {
    "@type": "Person",
    "name": "YesBox",
    "url": "https://news.ycombinator.com/user?id=YesBox"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=31907719",
  "sameAs": "https://news.ycombinator.com/item?id=31907719",
  "dateCreated": "2022-06-28T14:26:18.214Z",
  "datePublished": "2022-06-28T13:56:34.000Z",
  "dateModified": "2022-06-28T14:26:18.214Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 2
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 0
    }
  ],
  "headline_zh-Hans": "Show HN: 在我的视频游戏中寻找1M个代理到独特的目的地的路径\n",
  "headline_zh-Hant": "Show HN: 在我的視頻遊戲中尋找1M個代理到獨特的目的地的路徑\n",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "在这里试试：https://yesbox.itch.io/archapolis<p>或者视频：https://www.youtube.com/watch?v=x0HCnQqF5K4<p>Hi HN<p>我在过去七个月里一直在做一个城市建设者游戏。我想通过的第一条是创建一个高效且更真实的寻路引擎。最后，我的游戏Archapolis的0.1.0版本发布了! 这是一个玩具/技术演示，但任何和所有的反馈对我来说真的很重要，因此我现在就发布了它（免费）。<p>我也想了解我的代码在各种机器上的运行情况，所以如果你觉得要测试它，我很想听听你的意见和结果 <p>我将在这里谈一谈路径查找代码：<p>- 它将在与Dijkstra代码几乎相同的时间内找到两点之间所有可能的最短路径，并将它们有效地存储在一个（C++）向量（即数组）中。数组）（最大可能路径是二项式系数公式）<p>- 代理人可以在恒定时间内（就像哈希表）使用一些算术来访问/寻找路径（因为向量索引是&quot;键&quot;）。 <p>- 一旦你放置了一个单元，游戏将生成所有对所有可能的最短路径，并在每次道路网络变化时进行更新。<p>- 寻找路径的算法也可以利用存储在道路中的偏好权重（例如，美丽、旅游、商业、文化街区...）。一个有偏好的代理将从所有可能的最短路径中选择符合其偏好的最短路径。<p>- 在下载中，这些道路暂时是彩色的，所以符合道路颜色的单位将更喜欢这些道路。在我的机器上，在一个50 x 50的网格（有9800个节点）中寻找/存储所有对所有可能的最短路径需要17秒（有六个核心），需要2.5GB的内存。这是一个极端的压力测试。如果使用曼哈顿区块大小，这大约是13平方英里的城市，或者大约是9个城市。<p>- 在游戏中，道路将首先被规划，然后一次性放置，因此只需要一次更新。<p>- 我对结果非常满意。不仅单位会利用两点之间的所有最短路径，偏好权重也赋予了每个单位个性，所以我的单位人工智能的一部分已经完成了！<p>- 还有一点要注意：单行道是更快的道路（更少的&quot;权重&quot;），尽管代理人仍然会在它们上面以同样的速度移动。他们只是为测试算法创造了更快/更短的路径。\n",
  "description_zh-Hant": "在這裡試試：https://yesbox.itch.io/archapolis<p>或者視頻：https://www.youtube.com/watch?v=x0HCnQqF5K4<p>Hi HN<p>我在過去七個月裡一直在做一個城市建設者遊戲。我想通過的第一條是創建一個高效且更真實的尋路引擎。最後，我的遊戲Archapolis的0.1.0版本發佈了! 這是一個玩具/技術演示，但任何和所有的反饋對我來說真的很重要，因此我現在就發佈了它（免費）。<p>我也想了解我的代碼在各種機器上的運行情況，所以如果你覺得要測試它，我很想聽聽你的意見和結果 <p>我將在這裡談一談路徑查找代碼：<p>- 它將在與Dijkstra代碼幾乎相同的時間內找到兩點之間所有可能的最短路徑，並將它們有效地存儲在一個（C++）向量（即數組）中。數組）（最大可能路徑是二項式係數公式）<p>- 代理人可以在恆定時間內（就像哈希表）使用一些算術來訪問/尋找路徑（因為向量索引是&quot;鍵&quot;）。 <p>- 一旦你放置了一個單元，遊戲將生成所有對所有可能的最短路徑，並在每次道路網絡變化時進行更新。<p>- 尋找路徑的算法也可以利用存儲在道路中的偏好權重（例如，美麗、旅遊、商業、文化街區...）。一個有偏好的代理將從所有可能的最短路徑中選擇符合其偏好的最短路徑。<p>- 在下載中，這些道路暫時是彩色的，所以符合道路顏色的單位將更喜歡這些道路。在我的機器上，在一個50 x 50的網格（有9800個節點）中尋找/存儲所有對所有可能的最短路徑需要17秒（有六個核心），需要2.5GB的內存。這是一個極端的壓力測試。如果使用曼哈頓區塊大小，這大約是13平方英里的城市，或者大約是9個城市。<p>- 在遊戲中，道路將首先被規劃，然後一次性放置，因此只需要一次更新。<p>- 我對結果非常滿意。不僅單位會利用兩點之間的所有最短路徑，偏好權重也賦予了每個單位個性，所以我的單位人工智能的一部分已經完成了！<p>- 還有一點要注意：單行道是更快的道路（更少的&quot;權重&quot;），儘管代理人仍然會在它們上面以同樣的速度移動。他們只是為測試算法創造了更快/更短的路徑。\n"
}