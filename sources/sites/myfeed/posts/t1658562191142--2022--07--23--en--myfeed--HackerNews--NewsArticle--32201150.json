{
  "@type": "NewsArticle",
  "identifier": "2022--07--23--en--myfeed--HackerNews--NewsArticle--32201150",
  "url": "https://news.ycombinator.com/item?id=32201150",
  "headline": "Show HN: Code in Response to “The Trouble with Symlinks.”",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "See: <a href=\"https://news.ycombinator.com/item?id=32190032\" rel=\"nofollow\">https://news.ycombinator.com/item?id=32190032</a><p>This was written in about the past hour or so; it has no documentation or test cases yet. Think twice before relying on it in production.<p>The idea is that we can perform a detailed validation of the trustworthiness of an absolute or relative path, as a simple function that can be reused anywhere: I call this function safepath_check.<p>A trustworthy path is one whose meaning cannot be changed by a third party: another user who isn't root.<p>The path is therefore immune, for instance, to TOCtoTOU security problems, like the insertion of a symbolic link or other tampering.<p>A trustworthy path is allowed to contain symbolic links. Symbolic links can be validated to be safe. To that end, safepath_check performs its own symlink resolution, to ensure that every link resolution step substitutes path material that is trustworthy.",
  "keywords": [
    "Show HN"
  ],
  "genre": "Show HN",
  "author": {
    "@type": "Person",
    "name": "kazinator",
    "url": "https://news.ycombinator.com/user?id=kazinator"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=32201150",
  "sameAs": "https://www.kylheku.com/cgit/safepath/about/",
  "dateCreated": "2022-07-23T07:43:11.142Z",
  "datePublished": "2022-07-23T07:16:37.000Z",
  "dateModified": "2022-07-23T07:43:11.142Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 2
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 0
    }
  ],
  "headline_zh-Hans": "Show HN: 回复 \"Symlinks的麻烦 \"的代码。\n",
  "headline_zh-Hant": "Show HN: 回覆 \"Symlinks的麻煩 \"的代碼。\n",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "See: <a href=\"https://news.ycombinator.com/item?id=32190032\" rel=\"nofollow\">https://news.ycombinator.com/item?id=32190032</a><p>This was written in about the past hour or so; it has no documentation or test cases yet. Think twice before relying on it in production.<p>The idea is that we can perform a detailed validation of the trustworthiness of an absolute or relative path, as a simple function that can be reused anywhere: I call this function safepath_check.<p>A trustworthy path is one whose meaning cannot be changed by a third party: another user who isn't root.<p>The path is therefore immune, for instance, to TOCtoTOU security problems, like the insertion of a symbolic link or other tampering.<p>A trustworthy path is allowed to contain symbolic links. Symbolic links can be validated to be safe. To that end, safepath_check performs its own symlink resolution, to ensure that every link resolution step substitutes path material that is trustworthy.\n",
  "description_zh-Hant": "See: <a href=\"https://news.ycombinator.com/item?id=32190032\" rel=\"nofollow\">https://news.ycombinator.com/item?id=32190032</a><p>This was written in about the past hour or so; it has no documentation or test cases yet. Think twice before relying on it in production.<p>The idea is that we can perform a detailed validation of the trustworthiness of an absolute or relative path, as a simple function that can be reused anywhere: I call this function safepath_check.<p>A trustworthy path is one whose meaning cannot be changed by a third party: another user who isn't root.<p>The path is therefore immune, for instance, to TOCtoTOU security problems, like the insertion of a symbolic link or other tampering.<p>A trustworthy path is allowed to contain symbolic links. Symbolic links can be validated to be safe. To that end, safepath_check performs its own symlink resolution, to ensure that every link resolution step substitutes path material that is trustworthy.\n"
}