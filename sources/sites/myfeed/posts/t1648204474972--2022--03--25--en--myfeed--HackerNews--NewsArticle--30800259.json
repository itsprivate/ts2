{
  "@type": "NewsArticle",
  "identifier": "2022--03--25--en--myfeed--HackerNews--NewsArticle--30800259",
  "url": "https://news.ycombinator.com/item?id=30800259",
  "headline": "How and When should we update our dependencies?",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "Having recently been tasked at work with upgrading some dependencies, I realise this is a nightmare.<p>We have unit tests, but they are not sufficient to be confident that nothing is subtly broken. This is a problem in many environments (maven, nuget, npm, etc). There was a story recently where (I think) a Ruby library subtly changed behaviour between versions and broke their payment system.<p>Our current process is to not update unless a security vulnerability is raised (we have tools to check for these), or a new version has features we want. Then automated unit testing and manual testing is done, but not to the level where, for instance, we would have caught that payments bug. We don't audit the source code of open-source libraries.<p>Is this a reasonable process? How does your company handle this? How could we do better?",
  "keywords": [],
  "author": {
    "@type": "Person",
    "name": "sporkle-feet",
    "url": "https://news.ycombinator.com/user?id=sporkle-feet"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=30800259",
  "sameAs": "https://news.ycombinator.com/item?id=30800259",
  "dateCreated": "2022-03-25T10:34:34.972Z",
  "datePublished": "2022-03-25T10:00:36.000Z",
  "dateModified": "2022-03-25T10:34:34.972Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 2
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 0
    }
  ],
  "headline_zh-Hans": "我们应该如何以及何时更新我们的依赖关系？",
  "headline_zh-Hant": "我們應該如何以及何時更新我們的依賴關係？",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "最近在工作中被要求升级一些依赖关系，我意识到这是一场噩梦。<p>我们有单元测试，但它们不足以让我们确信没有任何细微的缺陷。这在许多环境中都是一个问题（maven、nuget、npm等）。最近有一个故事，（我认为）一个Ruby库在不同版本之间巧妙地改变了行为，破坏了他们的支付系统。<p>我们目前的流程是不更新，除非出现安全漏洞（我们有工具来检查这些漏洞），或者新版本有我们想要的功能。然后进行自动化单元测试和人工测试，但并没有达到例如我们会发现支付错误的程度。我们不对开源库的源代码进行审计。<p>这是不是一个合理的过程？你们公司是如何处理的？我们怎样才能做得更好？",
  "description_zh-Hant": "最近在工作中被要求升級一些依賴關係，我意識到這是一場噩夢。<p>我們有單元測試，但它們不足以讓我們確信沒有任何細微的缺陷。這在許多環境中都是一個問題（maven、nuget、npm等）。最近有一個故事，（我認為）一個Ruby庫在不同版本之間巧妙地改變了行為，破壞了他們的支付系統。<p>我們目前的流程是不更新，除非出現安全漏洞（我們有工具來檢查這些漏洞），或者新版本有我們想要的功能。然後進行自動化單元測試和人工測試，但並沒有達到例如我們會發現支付錯誤的程度。我們不對開源庫的源代碼進行審計。<p>這是不是一個合理的過程？你們公司是如何處理的？我們怎樣才能做得更好？"
}