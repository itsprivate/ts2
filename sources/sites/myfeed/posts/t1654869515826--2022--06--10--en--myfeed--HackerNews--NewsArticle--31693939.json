{
  "@type": "NewsArticle",
  "identifier": "2022--06--10--en--myfeed--HackerNews--NewsArticle--31693939",
  "url": "https://news.ycombinator.com/item?id=31693939",
  "headline": "Separate tables or just one table to hold access control info between entities?",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "Say, I have three entity types `Senior`, `Junior_A` and `Junior_B`. Each entity specifies access control for other entities. So I can either create tables as follows:<p><pre><code>    Senior, Junior_A, Junior_B, AccessControl\n</code></pre>\nwhere `AccessControl` holds access control details between all the entities. This simplifies the code but could lead to performance issues as everything is put into one table.<p>But, then I can also create the tables as follows:<p><pre><code>    Senior, Junior_A, Junior_B, AC_Senior_Senior, AC_Senior_Junior_A, AC_Senior_Junior_B, AC_Junior_A_Junior_A, AC_Junior_A_Junior_B, AC_Junior_B_Junior_B\n\n where `AC_ABC_XYZ` is a table that holds access control information between entities `ABC` and `XYZ`. This complicates the code as the code now has to handle different tables depending on the entity types involved, but will improve performance.\n</code></pre>\nWhich design would you prefer, and why?",
  "keywords": [],
  "author": {
    "@type": "Person",
    "name": "_448",
    "url": "https://news.ycombinator.com/user?id=_448"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=31693939",
  "sameAs": "https://news.ycombinator.com/item?id=31693939",
  "dateCreated": "2022-06-10T13:58:35.826Z",
  "datePublished": "2022-06-10T13:33:37.000Z",
  "dateModified": "2022-06-10T13:58:35.826Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 2
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 1
    }
  ],
  "headline_zh-Hans": "分开的表还是只有一个表来保存实体之间的访问控制信息？\n",
  "headline_zh-Hant": "分開的表還是隻有一個表來保存實體之間的訪問控制信息？\n",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "Say, I have three entity types `Senior`, `Junior_A` and `Junior_B`. Each entity specifies access control for other entities. So I can either create tables as follows:<p><pre><code> Senior, Junior_A, Junior_B, AccessControl\n</code></pre>\nwhere `AccessControl` holds access control details between all the entities. This simplifies the code but could lead to performance issues as everything is put into one table.<p>But, then I can also create the tables as follows:<p><pre><code> Senior, Junior_A, Junior_B, AC_Senior_Senior, AC_Senior_Junior_A, AC_Senior_Junior_B, AC_Junior_A_Junior_A, AC_Junior_A_Junior_B, AC_Junior_B_Junior_B\n\n where `AC_ABC_XYZ` is a table that holds access control information between entities `ABC` and `XYZ`. This complicates the code as the code now has to handle different tables depending on the entity types involved, but will improve performance.\n</code></pre>\nWhich design would you prefer, and why?\n",
  "description_zh-Hant": "Say, I have three entity types `Senior`, `Junior_A` and `Junior_B`. Each entity specifies access control for other entities. So I can either create tables as follows:<p><pre><code> Senior, Junior_A, Junior_B, AccessControl\n</code></pre>\nwhere `AccessControl` holds access control details between all the entities. This simplifies the code but could lead to performance issues as everything is put into one table.<p>But, then I can also create the tables as follows:<p><pre><code> Senior, Junior_A, Junior_B, AC_Senior_Senior, AC_Senior_Junior_A, AC_Senior_Junior_B, AC_Junior_A_Junior_A, AC_Junior_A_Junior_B, AC_Junior_B_Junior_B\n\n where `AC_ABC_XYZ` is a table that holds access control information between entities `ABC` and `XYZ`. This complicates the code as the code now has to handle different tables depending on the entity types involved, but will improve performance.\n</code></pre>\nWhich design would you prefer, and why?\n"
}