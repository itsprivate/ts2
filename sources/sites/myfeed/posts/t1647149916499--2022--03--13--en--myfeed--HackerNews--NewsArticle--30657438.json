{
  "@type": "NewsArticle",
  "identifier": "2022--03--13--en--myfeed--HackerNews--NewsArticle--30657438",
  "url": "https://news.ycombinator.com/item?id=30657438",
  "headline": "How much CS theory should I learn for my first entry level software job?",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "Hello guys and ladies,<p>I’m a self taught programmer who has been getting software engineering interviews. I’m applying to Software Engineering jobs that require little to no experience.\nI’ve studied SICP and HtDP. I have also studied Proofs and CLRS. So as you can see I have studied almost the core of a CS degree.<p>I have build some math systems in Lisp and Python but nothing great. 600 lines of code or less. Lately I’ve been doing web dev with Django and react. I have built a full stack web with these. So I’ve built a rest api and a frontend to consume this api.<p>Should I keep applying and just practice leetcode type of problems? Or should I study OS and Software construction from ocw mit? I am also interested in compilers. Should I do these first or can I keep applying to roles? That’s my debate right now. Thanks",
  "keywords": [],
  "author": {
    "@type": "Person",
    "name": "jobhdez",
    "url": "https://news.ycombinator.com/user?id=jobhdez"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=30657438",
  "sameAs": "https://news.ycombinator.com/item?id=30657438",
  "dateCreated": "2022-03-13T05:38:36.499Z",
  "datePublished": "2022-03-13T02:56:33.000Z",
  "dateModified": "2022-03-13T05:38:36.499Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 4
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 7
    }
  ],
  "headline_zh-Hans": "对于我的第一份初级软件工作，我应该学习多少CS理论？",
  "headline_zh-Hant": "對於我的第一份初級軟件工作，我應該學習多少CS理論？",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "大家好，女士们，<p>我是一个自学成才的程序员，一直在接受软件工程面试。我正在申请那些几乎不需要任何经验的软件工程工作。\n我学过SICP和HtDP。我还学习了证明和CLRS。所以你可以看到我几乎学习了CS学位的核心内容。<p>我用Lisp和Python建立了一些数学系统，但没有什么了不起的。600行或更少的代码。最近，我一直在用Django和react做网络开发。我已经用这些建立了一个全栈式的网络。所以我建立了一个rest api和一个前端来消费这个api。<p>我是否应该继续申请并只是练习leetcode类型的问题？或者我应该从OCW mit学习操作系统和软件构建？我还对编译器感兴趣。我应该先做这些还是可以继续申请角色？这就是我现在的辩论。谢谢",
  "description_zh-Hant": "大家好，女士們，<p>我是一個自學成才的程序員，一直在接受軟件工程面試。我正在申請那些幾乎不需要任何經驗的軟件工程工作。\n我學過SICP和HtDP。我還學習了證明和CLRS。所以你可以看到我幾乎學習了CS學位的核心內容。<p>我用Lisp和Python建立了一些數學系統，但沒有什麼了不起的。600行或更少的代碼。最近，我一直在用Django和react做網絡開發。我已經用這些建立了一個全棧式的網絡。所以我建立了一個rest api和一個前端來消費這個api。<p>我是否應該繼續申請並只是練習leetcode類型的問題？或者我應該從OCW mit學習操作系統和軟件構建？我還對編譯器感興趣。我應該先做這些還是可以繼續申請角色？這就是我現在的辯論。謝謝"
}