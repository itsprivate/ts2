{
  "@type": "NewsArticle",
  "identifier": "2022--06--07--en--myfeed--HackerNews--NewsArticle--31656473",
  "url": "https://news.ycombinator.com/item?id=31656473",
  "headline": "Is a DB that doesn't need indexes attractive to DBAs?",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "I have worked a few jobs that required some DB tuning in order to get queries to run faster. One of the first things to do is to create and maintain indexes on relational tables. You spend time analyzing queries to determine what columns need indexes and what kind of index each one needs. Once the queries get fast enough, someone comes up with a new query that is slow because it filters on a column without an index and your nose is right back at the grindstone.<p>I created a new DB architecture that is radically different than anything I have seen. It is a set of performant key-value stores that can be grouped together to form relational tables. The data within each store is optimized for search so you have just one copy of each data point (no separate indexes). It can handle large tables (100 million+ rows and 2000+ columns) and has a flexible schema so it can handle data like Json that includes arrays for each column. The system is in open beta at &lt;www.Didgets.com&gt; so anyone can download and try it.<p>Since I never liked the grunt work of creating and maintaining indexes (along with the performance hit they cause for inserts, updates, and deletes); I thought that other database experts would be really interested in a new system that does not require them. Queries on my system are faster than on other highly-tuned DBs. But so far I have gotten a collective yawn from many people I show it to.<p>Am I missing something? Do others really like creating and maintaining DB indexes, even though I did not?",
  "keywords": [],
  "author": {
    "@type": "Person",
    "name": "didgetmaster",
    "url": "https://news.ycombinator.com/user?id=didgetmaster"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=31656473",
  "sameAs": "https://news.ycombinator.com/item?id=31656473",
  "dateCreated": "2022-06-07T17:10:36.137Z",
  "datePublished": "2022-06-07T16:12:02.000Z",
  "dateModified": "2022-06-07T17:10:36.137Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 2
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 4
    }
  ],
  "headline_zh-Hans": "一个不需要索引的数据库对DBA们来说有吸引力吗？\n",
  "headline_zh-Hant": "一個不需要索引的數據庫對DBA們來說有吸引力嗎？\n",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "我曾做过一些工作，需要对数据库进行一些调整，以使查询运行得更快。首先要做的一件事是在关系表上创建和维护索引。你花时间分析查询，以确定哪些列需要索引，以及每个列需要什么样的索引。一旦查询的速度足够快，有人就会想出一个新的查询，因为它在没有索引的列上进行过滤，所以速度很慢，而你的鼻子又回到了磨刀石上。<p>我创建了一个新的数据库架构，与我所见过的任何架构都完全不同。它是一组高性能的键值存储，可以被分组以形成关系表。每个存储空间中的数据都为搜索进行了优化，因此你只有每个数据点的一个副本（没有单独的索引）。它可以处理大型表格（1亿多行和2000多列），并有一个灵活的模式，所以它可以处理像Json这样的数据，其中包括每列的数组。该系统在&lt;www.Didgets.com&gt;上处于开放测试阶段，因此任何人都可以下载并试用。<p>由于我从不喜欢创建和维护索引的繁琐工作（以及它们对插入、更新和删除造成的性能影响）；我认为其他数据库专家会对一个不需要索引的新系统真正感兴趣。在我的系统上的查询比在其他高度调整的数据库上要快。但是到目前为止，我给很多人看的时候都是集体打哈欠。<p>我是不是错过了什么？其他人真的喜欢创建和维护 DB 索引吗，尽管我没有？\n",
  "description_zh-Hant": "我曾做過一些工作，需要對數據庫進行一些調整，以使查詢運行得更快。首先要做的一件事是在關係表上創建和維護索引。你花時間分析查詢，以確定哪些列需要索引，以及每個列需要什麼樣的索引。一旦查詢的速度足夠快，有人就會想出一個新的查詢，因為它在沒有索引的列上進行過濾，所以速度很慢，而你的鼻子又回到了磨刀石上。<p>我創建了一個新的數據庫架構，與我所見過的任何架構都完全不同。它是一組高性能的鍵值存儲，可以被分組以形成關係表。每個存儲空間中的數據都為搜索進行了優化，因此你只有每個數據點的一個副本（沒有單獨的索引）。它可以處理大型表格（1億多行和2000多列），並有一個靈活的模式，所以它可以處理像Json這樣的數據，其中包括每列的數組。該系統在&lt;www.Didgets.com&gt;上處於開放測試階段，因此任何人都可以下載並試用。<p>由於我從不喜歡創建和維護索引的繁瑣工作（以及它們對插入、更新和刪除造成的性能影響）；我認為其他數據庫專家會對一個不需要索引的新系統真正感興趣。在我的系統上的查詢比在其他高度調整的數據庫上要快。但是到目前為止，我給很多人看的時候都是集體打哈欠。<p>我是不是錯過了什麼？其他人真的喜歡創建和維護 DB 索引嗎，儘管我沒有？\n"
}