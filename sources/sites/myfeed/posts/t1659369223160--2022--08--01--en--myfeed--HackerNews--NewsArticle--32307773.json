{
  "@type": "NewsArticle",
  "identifier": "2022--08--01--en--myfeed--HackerNews--NewsArticle--32307773",
  "url": "https://news.ycombinator.com/item?id=32307773",
  "headline": "Launch HN: Polymath Robotics (YC S22) – General autonomy for industrial vehicles",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "Hey HN,<p>I’m Stefan, one of the founders of Polymath Robotics (<a href=\"https://www.polymathrobotics.com\" rel=\"nofollow\">https://www.polymathrobotics.com</a>) and formerly of Starsky Robotics (YC S16). My co-founder is Ilia Baranov, a career roboticist. We’re building general autonomy software for industrial vehicles.<p>We’ve just come out of stealth with a full autonomy stack freely available in sim online. Whether it’s a tractor on a farm or a 400t dump truck in a mine, we make it easy for you to make it driverless. Where before you would need an industrial vehicle, $25-150k in sensors + compute, and 6-18 months of building time, now you can start building applications that command autonomous robots right away.<p>See a demo here: <a href=\"https://www.loom.com/share/852d54744d45452d926b9016f61f5e43\" rel=\"nofollow\">https://www.loom.com/share/852d54744d45452d926b9016f61f5e43</a>.<p>Two big things are hard about automating industrial vehicles: first, robotics is deceptively hard. But also, industry is nitpicky. These two together are too much for most startups. That is, if you put all your energy into the first—the noble effort of getting the robots to actually work— the second will end up killing you. We learned this the hard way at Starsky, and what we’re currently working on at Polymath is a way out of this dilemma.<p>At Starsky, we were working on autonomous trucks. We knew that was a hard product to build, but I didn’t really have perspective until I went and hung out with SaaS companies afterward. My SaaS friends use horizontal services at every layer of the stack. Payments? Just plug in Stripe. Messaging? Twilio. Libraries and tools exist for everything. Your thing goes a lot faster when you can just buy the rest of the stack.<p>Contrast that with Starsky, where we were building our own robotics stack completely from scratch. That meant the autonomy itself (our actual product, and really complicated on its own), but also custom teleop, a drive-by-wire system, hardware abstraction layer, and fleet management system to orchestrate all the trucks via an API. Each of those things could be a company in itself! Imagine trying to debug a stack like that when something’s not working.<p>That’s sort of just how robotics is today. Like software in the 80s, everyone’s rebuilding the whole stack for each new project. So the tech gets super complex, brittle, and unadaptable. In fact, an open secret in the robotics world is that most demo videos you see are “cooked,” because the robots are so unreliable in the field.<p>I got to know many of the folks building industrial autonomy vehicles from 2016 onwards, and saw a depressing pattern. Brilliant, mission-driven engineers would get a start with a healthy seed round from investors who thought it was “just” an execution problem. After 18-30 months the teams would have a prototype that somewhat worked, but what they <i>wouldn’t</i> have yet was the commercial traction needed to justify more fundraising.<p>That brings us to the other half of the dilemma: industrial customers are nitpicky. When it comes to scaling an autonomous vehicle POC (proof of concept) with a large industrial company, they’re surprisingly unimpressed with autonomy. Sure - the first time they see a driverless vehicle their jaws drop and they ask about safety. But like everyone else, they quickly assume it “just works” and start asking whether it will integrate with their Oracle instance. Then they start nitpicking the specific way the tractor drives across the field / the luggage tow stops on the apron / the dump truck pulls up to the processor / etc etc.<p>In other words, after the initial POC, industrial autonomy stops being sexy-super-hard-technical and starts looking like Enterprise SaaS. Except by then the team has spent 2 years heads down making autonomy (the hard part!) actually work rather than talking to customers. As a result, they’re not up on the top 20 things customers care about and they don’t end up with product market fit. Few startups make it out of that pincer squeeze.<p>All this to say … what we’re building at Polymath is a shortcut to autonomy for industrial vehicles. We make it so you spend less time building / maintaining undifferentiated basics, and focus instead on the 5-10% of the application that’s hyper specific to your industry / vehicle / customer. Just like our friends in SaaS.<p>Since we’re <i>just</i> building the autonomy layer, we can focus on getting the tech reliable, stable, and scalable. Our users can build their own custom behaviors, or integrate with apps, or whatever it is that makes their robot actually useful, on top of the Polymath autonomy core.<p>The software can be installed on virtually any large outdoor vehicle, as long as it operates in a controlled environment. Focusing exclusively on closed environments is partially a cheat code. It lets us assume the vehicle can come to an immediate stop if there’s trouble, or be teleoperated by a human in dicey situations—all the constraints that mean we <i>don’t</i> have to be Waymo or Cruise.<p>Polymath autonomy includes localization, navigation, controls tuning, obstacle avoidance, and a safety layer. Importantly, we also built a hardware abstraction layer, which lets the whole thing work across different vehicles and sensors.\nOne thing we’re doing differently this time around is buying (rather than building) parts of our solution wherever possible. Again, part of that “make robotics more like software” thing. So we’re using Formant for teleop, Gazebo for sim, and for customers that need hardware installation, we have a partner called Sygnal that does awesome integration and retrofit work. (And, almost obviously, we’re built on top of ROS [Robot Operating System, the standard framework for building robots).<p>We also have our own demo vehicle, a tractor affectionately nicknamed ‘Farmonacci’, that we use to run unmanned testing daily. You can see a shiny demo video of it here: <a href=\"https://youtu.be/bP0mNG53bVw\" rel=\"nofollow\">https://youtu.be/bP0mNG53bVw</a>\nAnd now the part I’m most excited about… You can start building on top of Polymath autonomy today, for free, in sim, with a tool we built called Caladan (yes, the name is Dune-inspired).<p>Caladan is a set of simulated vehicles and environments where you can interact with Polymath’s autonomy via Rest API. That means you can build autonomous vehicle behaviors and applications in your preferred programming language, without having to touch ROS. So, even non-roboticists can build an autonomous vehicle application pretty easily. To my knowledge, we’re the first to build an autonomy product that’s this accessible, and especially something that you can use for free (it’s funny that roboticists, a group least interested in talking to sales people, is super forced to).<p>We built Caladan by bringing our autonomy code into a standardized Gazebo environment, with a Rest API that allows you to command it in any language (without needing to know anything about ROS).<p>The cool thing is, you can transfer the same code you write with Caladan to a real vehicle. We’ve tested it out with Farmonacci, and we’ll select people who are hacking on top of our simulated vehicles and give them testing time on Farmonacci as well. Part of the idea for Polymath is to take robotics off of ‘hard mode,’ and help teams build robots that are stable and reliable right from day one.<p>For now, it’s entirely free to use Caladan.  Since each instance is a cloud-GPU, in the next couple of weeks we’ll ask people to pay if they want consistent access (but there will always be a free version).  We want to make our money automating your actual robots, and we’ll also charge if we have to do too much custom stuff for you in sim. But, of course, we have startup-friendly pricing if you talk to us.<p>So please, sign up for Caladan at polymathrobotics.com and mention that you came through HackerNews (we’ll prioritize spinning up your instance if you do). We can’t wait to see what you all build. We’ll be around in the thread and look forward to your comments, ideas, and feedback!",
  "keywords": [],
  "author": {
    "@type": "Person",
    "name": "stefan8r",
    "url": "https://news.ycombinator.com/user?id=stefan8r"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=32307773",
  "sameAs": "https://news.ycombinator.com/item?id=32307773",
  "dateCreated": "2022-08-01T15:53:43.160Z",
  "datePublished": "2022-08-01T15:49:01.000Z",
  "dateModified": "2022-08-01T15:53:43.160Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 4
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 0
    }
  ],
  "headline_zh-Hans": "发射HN：Polymath Robotics（YC S22）--工业车辆的一般自主性\n",
  "headline_zh-Hant": "發射HN：Polymath Robotics（YC S22）--工業車輛的一般自主性\n",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "Hey HN,<p>I’m Stefan, one of the founders of Polymath Robotics (<a href=\"https://www.polymathrobotics.com\" rel=\"nofollow\">https://www.polymathrobotics.com</a>) and formerly of Starsky Robotics (YC S16). My co-founder is Ilia Baranov, a career roboticist. We’re building general autonomy software for industrial vehicles.<p>We’ve just come out of stealth with a full autonomy stack freely available in sim online. Whether it’s a tractor on a farm or a 400t dump truck in a mine, we make it easy for you to make it driverless. Where before you would need an industrial vehicle, $25-150k in sensors + compute, and 6-18 months of building time, now you can start building applications that command autonomous robots right away.<p>See a demo here: <a href=\"https://www.loom.com/share/852d54744d45452d926b9016f61f5e43\" rel=\"nofollow\">https://www.loom.com/share/852d54744d45452d926b9016f61f5e43</a>.<p>Two big things are hard about automating industrial vehicles: first, robotics is deceptively hard. But also, industry is nitpicky. These two together are too much for most startups. That is, if you put all your energy into the first—the noble effort of getting the robots to actually work— the second will end up killing you. We learned this the hard way at Starsky, and what we’re currently working on at Polymath is a way out of this dilemma.<p>At Starsky, we were working on autonomous trucks. 我们知道那是一个很难建立的产品，但我没有真正的观点，直到我后来去和SaaS公司混在一起。我的SaaS朋友在堆栈的每一层都使用水平服务。支付？只要插入Stripe。信息传递？Twilio。一切都有库和工具。当你可以直接购买堆栈的其余部分时，你的事情会进行得更快。<p>与Starsky相比，我们完全从头开始建立自己的机器人堆栈。这意味着自主权本身（我们的实际产品，它本身真的很复杂），但也有定制的远程操作、线控驱动系统、硬件抽象层和车队管理系统，通过API协调所有的卡车。这些东西中的每一个本身都可能是一个公司! 想象一下，当某些东西不工作的时候，要尝试调试这样的堆栈。<p>这就是今天的机器人技术的情况。就像80年代的软件一样，每个人都在为每个新项目重新构建整个堆栈。因此，技术变得超级复杂、易碎，而且无法适应。In fact, an open secret in the robotics world is that most demo videos you see are “cooked,” because the robots are so unreliable in the field.<p>I got to know many of the folks building industrial autonomy vehicles from 2016 onwards, and saw a depressing pattern. Brilliant, mission-driven engineers would get a start with a healthy seed round from investors who thought it was “just” an execution problem. After 18-30 months the teams would have a prototype that somewhat worked, but what they <i>wouldn’t</i> have yet was the commercial traction needed to justify more fundraising.<p>That brings us to the other half of the dilemma: industrial customers are nitpicky. When it comes to scaling an autonomous vehicle POC (proof of concept) with a large industrial company, they’re surprisingly unimpressed with autonomy. Sure - the first time they see a driverless vehicle their jaws drop and they ask about safety. But like everyone else, they quickly assume it “just works” and start asking whether it will integrate with their Oracle instance. Then they start nitpicking the specific way the tractor drives across the field / the luggage tow stops on the apron / the dump truck pulls up to the processor / etc etc.<p>In other words, after the initial POC, industrial autonomy stops being sexy-super-hard-technical and starts looking like Enterprise SaaS. Except by then the team has spent 2 years heads down making autonomy (the hard part!) actually work rather than talking to customers. As a result, they’re not up on the top 20 things customers care about and they don’t end up with product market fit. Few startups make it out of that pincer squeeze.<p>All this to say … what we’re building at Polymath is a shortcut to autonomy for industrial vehicles. We make it so you spend less time building / maintaining undifferentiated basics, and focus instead on the 5-10% of the application that’s hyper specific to your industry / vehicle / customer. Just like our friends in SaaS.<p>Since we’re <i>just</i> building the autonomy layer, we can focus on getting the tech reliable, stable\n",
  "description_zh-Hant": "Hey HN,<p>I’m Stefan, one of the founders of Polymath Robotics (<a href=\"https://www.polymathrobotics.com\" rel=\"nofollow\">https://www.polymathrobotics.com</a>) and formerly of Starsky Robotics (YC S16). My co-founder is Ilia Baranov, a career roboticist. We’re building general autonomy software for industrial vehicles.<p>We’ve just come out of stealth with a full autonomy stack freely available in sim online. Whether it’s a tractor on a farm or a 400t dump truck in a mine, we make it easy for you to make it driverless. Where before you would need an industrial vehicle, $25-150k in sensors + compute, and 6-18 months of building time, now you can start building applications that command autonomous robots right away.<p>See a demo here: <a href=\"https://www.loom.com/share/852d54744d45452d926b9016f61f5e43\" rel=\"nofollow\">https://www.loom.com/share/852d54744d45452d926b9016f61f5e43</a>.<p>Two big things are hard about automating industrial vehicles: first, robotics is deceptively hard. But also, industry is nitpicky. These two together are too much for most startups. That is, if you put all your energy into the first—the noble effort of getting the robots to actually work— the second will end up killing you. We learned this the hard way at Starsky, and what we’re currently working on at Polymath is a way out of this dilemma.<p>At Starsky, we were working on autonomous trucks. 我們知道那是一個很難建立的產品，但我沒有真正的觀點，直到我後來去和SaaS公司混在一起。我的SaaS朋友在堆棧的每一層都使用水平服務。支付？只要插入Stripe。信息傳遞？Twilio。一切都有庫和工具。當你可以直接購買堆棧的其餘部分時，你的事情會進行得更快。<p>與Starsky相比，我們完全從頭開始建立自己的機器人堆棧。這意味著自主權本身（我們的實際產品，它本身真的很複雜），但也有定製的遠程操作、線控驅動系統、硬件抽象層和車隊管理系統，通過API協調所有的卡車。這些東西中的每一個本身都可能是一個公司! 想象一下，當某些東西不工作的時候，要嘗試調試這樣的堆棧。<p>這就是今天的機器人技術的情況。就像80年代的軟件一樣，每個人都在為每個新項目重新構建整個堆棧。因此，技術變得超級複雜、易碎，而且無法適應。In fact, an open secret in the robotics world is that most demo videos you see are “cooked,” because the robots are so unreliable in the field.<p>I got to know many of the folks building industrial autonomy vehicles from 2016 onwards, and saw a depressing pattern. Brilliant, mission-driven engineers would get a start with a healthy seed round from investors who thought it was “just” an execution problem. After 18-30 months the teams would have a prototype that somewhat worked, but what they <i>wouldn’t</i> have yet was the commercial traction needed to justify more fundraising.<p>That brings us to the other half of the dilemma: industrial customers are nitpicky. When it comes to scaling an autonomous vehicle POC (proof of concept) with a large industrial company, they’re surprisingly unimpressed with autonomy. Sure - the first time they see a driverless vehicle their jaws drop and they ask about safety. But like everyone else, they quickly assume it “just works” and start asking whether it will integrate with their Oracle instance. Then they start nitpicking the specific way the tractor drives across the field / the luggage tow stops on the apron / the dump truck pulls up to the processor / etc etc.<p>In other words, after the initial POC, industrial autonomy stops being sexy-super-hard-technical and starts looking like Enterprise SaaS. Except by then the team has spent 2 years heads down making autonomy (the hard part!) actually work rather than talking to customers. As a result, they’re not up on the top 20 things customers care about and they don’t end up with product market fit. Few startups make it out of that pincer squeeze.<p>All this to say … what we’re building at Polymath is a shortcut to autonomy for industrial vehicles. We make it so you spend less time building / maintaining undifferentiated basics, and focus instead on the 5-10% of the application that’s hyper specific to your industry / vehicle / customer. Just like our friends in SaaS.<p>Since we’re <i>just</i> building the autonomy layer, we can focus on getting the tech reliable, stable\n"
}