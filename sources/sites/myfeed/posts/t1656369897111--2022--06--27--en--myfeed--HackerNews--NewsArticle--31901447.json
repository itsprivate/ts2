{
  "@type": "NewsArticle",
  "identifier": "2022--06--27--en--myfeed--HackerNews--NewsArticle--31901447",
  "url": "https://news.ycombinator.com/item?id=31901447",
  "headline": "Resources to become a better Software Engineer besides coding?",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "Hi all. I'm looking for resources, be it courses or books, on how to get better at my job.<p>I already know plenty of resources on how to make better code. But besides programming, I'm looking to become a better professional by itself. That is, being more reliable, to come up with better and more structured procedures, and to provide good services despite less than ideal contexts (which is, almost every company software project)<p>For starters, I got the book &quot;How to Work Effectively With Legacy Code&quot; for the technical part.\nMy guess is to read about scrum and agile.\nThen about git flow and collaborative software projects.\nThen a bit about devops so I know what platforms support the product I'm trying to make.<p>Am I missing something?<p>Thanks in advance",
  "keywords": [],
  "author": {
    "@type": "Person",
    "name": "frostwarrior",
    "url": "https://news.ycombinator.com/user?id=frostwarrior"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=31901447",
  "sameAs": "https://news.ycombinator.com/item?id=31901447",
  "dateCreated": "2022-06-27T22:44:57.111Z",
  "datePublished": "2022-06-27T22:03:49.000Z",
  "dateModified": "2022-06-27T22:44:57.111Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 2
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 0
    }
  ],
  "headline_zh-Hans": "除了编码之外，成为一个更好的软件工程师的资源？\n",
  "headline_zh-Hant": "除了編碼之外，成為一個更好的軟件工程師的資源？\n",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "大家好。我正在寻找关于如何在工作中变得更好的资源，无论是课程还是书籍。<p>我已经知道很多关于如何做出更好的代码的资源。但除了编程，我还想通过自己的努力成为一个更好的专业人士。也就是说，要更可靠，要想出更好、更有条理的程序，要在不太理想的情况下提供好的服务（也就是，几乎每一个公司的软件项目）<p>对于初学者来说，我得到了&quot;如何有效地使用遗留代码&quot;这本书的技术部分。\n我的猜测是阅读关于Scrum和Agile的内容。\n然后是关于git流程和协作式软件项目。\n然后再读一点关于devops的内容，这样我就知道哪些平台支持我想做的产品了。\n",
  "description_zh-Hant": "大家好。我正在尋找關於如何在工作中變得更好的資源，無論是課程還是書籍。<p>我已經知道很多關於如何做出更好的代碼的資源。但除了編程，我還想通過自己的努力成為一個更好的專業人士。也就是說，要更可靠，要想出更好、更有條理的程序，要在不太理想的情況下提供好的服務（也就是，幾乎每一個公司的軟件項目）<p>對於初學者來說，我得到了&quot;如何有效地使用遺留代碼&quot;這本書的技術部分。\n我的猜測是閱讀關於Scrum和Agile的內容。\n然後是關於git流程和協作式軟件項目。\n然後再讀一點關於devops的內容，這樣我就知道哪些平臺支持我想做的產品了。\n"
}