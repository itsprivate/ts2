{
  "@type": "NewsArticle",
  "identifier": "2022--07--14--en--myfeed--HackerNews--NewsArticle--32098767",
  "url": "https://news.ycombinator.com/item?id=32098767",
  "headline": "Go refusing to make structs in maps mutable since 2012",
  "publisher": {
    "@type": "Organization",
    "name": "HackerNews",
    "url": "https://news.ycombinator.com",
    "logo": "https://hn.buzzing.cc/avatar.png"
  },
  "description": "I've recently asked if it's time to revisit the decision to make structs in maps in Go mutable, and was politely declined, with a reference to this being a refusted proposal since 2012:<p>https://github.com/golang/go/issues/53857<p>Since arrays work fine, if a is a slice or an array:<p>a[10].field = 42<p>it seems bogus that maps don't; this doesn't compile in Go if m is a map:<p>m[10].field = 42<p>In both cases, the address of the struct is calculated at runtime, as it must be known to access the field.<p>Instead of leaving this as a rant, let's make it a question: what's your &quot;what is this insanity?&quot; peeve with your favourite language?",
  "keywords": [],
  "author": {
    "@type": "Person",
    "name": "ivoras",
    "url": "https://news.ycombinator.com/user?id=ivoras"
  },
  "discussionUrl": "https://news.ycombinator.com/item?id=32098767",
  "sameAs": "https://news.ycombinator.com/item?id=32098767",
  "dateCreated": "2022-07-14T17:53:14.340Z",
  "datePublished": "2022-07-14T17:10:14.000Z",
  "dateModified": "2022-07-14T17:53:14.340Z",
  "interactionStatistic": [
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "LikeAction"
      },
      "userInteractionCount": 2
    },
    {
      "@type": "InteractionCounter",
      "interactionType": {
        "@type": "CommentAction"
      },
      "userInteractionCount": 0
    }
  ],
  "headline_zh-Hans": "自2012年以来，Go拒绝让地图中的结构变得可变。\n",
  "headline_zh-Hant": "自2012年以來，Go拒絕讓地圖中的結構變得可變。\n",
  "@context": [
    "https://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "headline_zh-Hans": {
        "@id": "headline",
        "@language": "zh-Hans"
      },
      "headline_zh-Hant": {
        "@id": "headline",
        "@language": "zh-Hant"
      },
      "@version": 1.1,
      "description_zh-Hans": {
        "@id": "description",
        "@language": "zh-Hans"
      },
      "description_zh-Hant": {
        "@id": "description",
        "@language": "zh-Hant"
      }
    }
  ],
  "description_zh-Hans": "我最近问到，是否是时候重新审视Go中地图中的结构体可变的决定了，并被礼貌地拒绝了，并提到这是自2012年以来的一个被拒绝的提议：<p>https://github.com/golang/go/issues/53857<p>由于数组工作正常，如果a是一个片断或一个数组：<p>a[10].field = 42<p>这似乎是假的，而地图则不是。 <p>在这两种情况下，结构体的地址都是在运行时计算出来的，因为必须知道它才能访问该字段。<p>与其把它作为一个咆哮，不如把它变成一个问题：你对你最喜欢的语言的&quot;这种疯狂是什么?&quot;的不满是什么?\n",
  "description_zh-Hant": "我最近問到，是否是時候重新審視Go中地圖中的結構體可變的決定了，並被禮貌地拒絕了，並提到這是自2012年以來的一個被拒絕的提議：<p>https://github.com/golang/go/issues/53857<p>由於數組工作正常，如果a是一個片斷或一個數組：<p>a[10].field = 42<p>這似乎是假的，而地圖則不是。 <p>在這兩種情況下，結構體的地址都是在運行時計算出來的，因為必須知道它才能訪問該字段。<p>與其把它作為一個咆哮，不如把它變成一個問題：你對你最喜歡的語言的&quot;這種瘋狂是什麼?&quot;的不滿是什麼?\n"
}