import { TARGET_LANGUAGES, TRANSLATED_FIELDS } from "../common/constant.ts";
import { parseIdentifier, getPathIdentifierByIdentifier, writeJson, get, getFinalHeadline, getDataFilePath, } from "../common/util.ts";
import set from "https://deno.land/x/lodash@4.17.15-es/set.js";
import { parse } from "https://deno.land/std@0.121.0/path/mod.ts";
import puppeteer from "https://deno.land/x/puppeteer@9.0.2/mod.ts";
import d from "./d.js";
import zhToHant from "./zh-to-hant.ts";
const homepage = "https://www.deepl.com/translator";
const isDev = Deno.env.get("ENV") === "dev";
export default async function (files) {
    const results = [];
    let browser = null;
    let page = null;
    const getBrowser = async () => {
        if (browser)
            return browser;
        browser = await puppeteer.launch({
            devtools: false,
            headless: !isDev,
            defaultViewport: { width: 1370, height: 1200 },
            args: ["--lang=zh-Hans,zh", "--disable-gpu"],
        });
        browser.on("disconnected", () => (browser = null));
        return browser;
    };
    const getNewPage = async (force) => {
        if (page)
            return page;
        browser = await getBrowser();
        const pages = await browser.pages();
        if (pages[0] && !force) {
            page = pages[0];
        }
        else {
            page = await browser.newPage();
        }
        await page.setUserAgent("Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36");
        await page.goto(homepage, { waitUntil: "domcontentloaded" });
        await page.waitForTimeout(2000);
        return page;
    };
    let currentHandledFiles = 0;
    for (let fileIndex = 0; fileIndex < files.length; fileIndex++) {
        if (!isDev) {
            if (currentHandledFiles > 100) {
                currentHandledFiles = 1;
                browser = await getBrowser();
                const pages = await browser.pages();
                if (pages.length > 1 && page) {
                    page.close();
                }
                page = null;
                page = await getNewPage(true);
            }
            else {
                currentHandledFiles++;
                page = await getNewPage(false);
            }
        }
        const file = files[fileIndex];
        const parsedFilePath = parse(file);
        const identifier = parsedFilePath.name;
        const pathIdentifier = getPathIdentifierByIdentifier(identifier);
        const data = await Deno.readTextFile(file);
        const item = JSON.parse(data);
        const finalItem = await translateItem(item, page);
        await writeJson(getDataFilePath(`changed/${pathIdentifier}.json`), finalItem);
        console.log("remove raw file: ", file);
        await Deno.remove(file);
        results.push(true);
    }
    if (page) {
        await page.close();
    }
    if (browser) {
        await browser.close();
    }
    return results;
}
export async function translateItem(item, page) {
    if (!(item && item.identifier)) {
        throw new Error("Invalid item, item must have identifier");
    }
    const identifier = item.identifier;
    const parsedIdentifier = parseIdentifier(identifier);
    const sourceLanguage = parsedIdentifier.language;
    let context = {
        "@vocab": "https://schema.org/",
        "@language": sourceLanguage,
    };
    for (const targetLanguage of TARGET_LANGUAGES) {
        for (const translatedKey of TRANSLATED_FIELDS) {
            const translatedValue = get(item, translatedKey);
            const translatedTargetKey = `${translatedKey}_${targetLanguage}`;
            const translatedTargetValue = get(item, translatedTargetKey);
            if (translatedValue && translatedTargetValue === undefined) {
                const dTargetLanguage = toDLanguage(targetLanguage);
                const translated = await d(page, translatedValue, sourceLanguage, dTargetLanguage, {
                    mock: isDev || page === null,
                });
                console.log("source", translatedKey, parsedIdentifier.language, item.headline);
                console.log("translated", translatedTargetKey, dTargetLanguage, translated.result);
                const targetHant = targetLanguage === "zh-Hans" ? "zh-Hant" : undefined;
                if (translated.result) {
                    item = set(item, translatedKey, getFinalHeadline(item, translatedValue));
                    item = set(item, translatedTargetKey, getFinalHeadline(item, translated.result));
                    context = set(context, getContextKey(translatedTargetKey), {
                        "@id": getContextKey(translatedKey),
                        "@language": targetLanguage,
                    });
                    if (targetHant) {
                        const translatedTargetHantKey = `${translatedKey}_${targetHant}`;
                        item = set(item, translatedTargetHantKey, getFinalHeadline(item, zhToHant(translated.result)));
                        context = set(context, getContextKey(translatedTargetHantKey), {
                            "@id": getContextKey(translatedKey),
                            "@language": targetHant,
                        });
                    }
                }
                else {
                    throw new Error(translated.result);
                }
            }
            else {
                console.log("translated result exists, skip", translatedKey, translatedTargetKey);
            }
        }
    }
    context["@version"] = 1.1;
    item["@context"] = ["https://schema.org", context];
    return item;
}
function toDLanguage(lang) {
    if (lang === "zh-Hans") {
        return "zh-ZH";
    }
    else {
        return lang;
    }
}
function getContextKey(key) {
    const lastDotIndex = key.lastIndexOf(".");
    const isIncludeNest = lastDotIndex > 0;
    const translatedContextTargetKey = key.substring(isIncludeNest ? lastDotIndex + 1 : 0, key.length);
    return translatedContextTargetKey;
}
//# sourceMappingURL=data:application/json;base64,