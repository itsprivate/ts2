import { getDataFilePath, stringifyIdentifier, parseIdentifier, getPathIdentifierByIdentifier, } from "../../../common/util.ts";
import { titleCase } from "https://esm.sh/title-case";
import { ensureDir } from "https://deno.land/std@0.121.0/fs/mod.ts";
export default async function (item) {
    const type = "NewsArticle";
    const publisherName = "HackerNews";
    const siteIdentifier = "showhn";
    const publisherUrl = `https://news.ycombinator.com`;
    const publisherLogo = "https://hn.buzzing.cc/avatar.png";
    const publisher = {
        "@type": "Organization",
        name: publisherName,
        url: publisherUrl,
        logo: publisherLogo,
    };
    const sourceLanguage = "en";
    let genre;
    if (item._tags && item._tags.length > 3) {
        const tag4 = item._tags[3];
        if (tag4 !== "front_page" && tag4 !== undefined) {
            const tag4Arr = tag4.split("_");
            if (tag4Arr.length === 2) {
                genre = `${titleCase(tag4Arr[0])} ${tag4Arr[1].toUpperCase()}`;
            }
        }
    }
    let headline = item.title;
    if (genre && item.title.startsWith(genre)) {
        headline = item.title.substring(genre.length + 1).trim();
    }
    const postsDirPath = getDataFilePath(`sites/${siteIdentifier}/posts`);
    await ensureDir(postsDirPath);
    const fileNames = [];
    const now = new Date();
    let dateCreated = now;
    const identifier = stringifyIdentifier(now, sourceLanguage, publisherName, siteIdentifier, type, item.objectID);
    const pathIdentifier = getPathIdentifierByIdentifier(identifier);
    const path = `raw/${pathIdentifier}.json`;
    for await (const dirEntry of Deno.readDir(postsDirPath)) {
        if (dirEntry.isFile && dirEntry.name.endsWith(".json")) {
            const fileName = dirEntry.name.slice(0, -5);
            const parsedIdentifier = parseIdentifier(fileName);
            if (parsedIdentifier.originalId === item.objectID &&
                parsedIdentifier.dateCreated) {
                console.log(`Found duplicate ${item.objectID}`, parsedIdentifier.dateCreated);
                const filePath = getDataFilePath(`sites/${siteIdentifier}/posts/${fileName}.json`);
                const fileData = await Deno.readTextFile(filePath);
                const json = JSON.parse(fileData);
                dateCreated = parsedIdentifier.dateCreated;
                json.interactionStatistic = [
                    {
                        "@type": "InteractionCounter",
                        interactionType: {
                            "@type": "LikeAction",
                        },
                        userInteractionCount: item.points,
                    },
                    {
                        "@type": "InteractionCounter",
                        interactionType: {
                            "@type": "CommentAction",
                        },
                        userInteractionCount: item.num_comments,
                    },
                ];
                return {
                    item: json,
                    path: getDataFilePath(path),
                };
            }
            fileNames.push(dirEntry.name);
        }
    }
    const nowISO = now.toISOString();
    const datePublished = item.created_at;
    const discussionUrl = `${publisherUrl}/item?id=${item.objectID}`;
    const url = discussionUrl;
    const keywords = [];
    if (genre) {
        keywords.push(genre);
    }
    const sameAs = item.url || discussionUrl;
    const author = {
        "@type": "Person",
        name: item.author,
        url: `${publisherUrl}/user?id=${item.author}`,
    };
    const newItem = {
        "@type": type,
        identifier,
        url,
        headline,
        publisher,
        description: "",
        keywords,
        genre,
        author,
        discussionUrl,
        sameAs,
        dateCreated: dateCreated.toISOString(),
        datePublished: datePublished,
        dateModified: nowISO,
        interactionStatistic: [
            {
                "@type": "InteractionCounter",
                interactionType: {
                    "@type": "LikeAction",
                },
                userInteractionCount: item.points,
            },
            {
                "@type": "InteractionCounter",
                interactionType: {
                    "@type": "CommentAction",
                },
                userInteractionCount: item.num_comments,
            },
        ],
    };
    return {
        item: newItem,
        path: getDataFilePath(path),
    };
}
//# sourceMappingURL=data:application/json;base64,