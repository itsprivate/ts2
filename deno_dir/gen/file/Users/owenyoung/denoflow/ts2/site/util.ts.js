import { join } from "https://deno.land/std@0.121.0/path/mod.ts";
import { DateTimeFormatter } from "https://deno.land/std@0.121.0/datetime/formatter.ts";
export const getSitePath = (relativePath) => {
    return join("site", relativePath);
};
export const getAppPath = (siteIdentifier, relativePath) => {
    return join("apps", siteIdentifier, relativePath);
};
export const formatUtc = (date, formatString) => {
    const formatter = new DateTimeFormatter(formatString);
    return formatter.format(date, {
        timeZone: "UTC",
    });
};
const formatBeijing = (date, formatString) => {
    date = new Date(date.getTime() + 8 * 60 * 60 * 1000);
    const formatter = new DateTimeFormatter(formatString);
    return formatter.format(date, {
        timeZone: "UTC",
    });
};
export const formatDate = (date) => {
    const now = new Date();
    const nowDate = formatBeijing(now, "yyyy-MM-dd");
    const dateDate = formatBeijing(date, "yyyy-MM-dd");
    const isToday = nowDate === dateDate;
    const nowYear = formatBeijing(now, "yyyy");
    const dateYear = formatBeijing(date, "yyyy");
    const isThisYear = nowYear === dateYear;
    if (isToday) {
        return formatBeijing(date, "HH:mm");
    }
    else if (isThisYear) {
        return formatBeijing(date, "MM-dd");
    }
    else {
        return formatBeijing(date, "yy-MM-dd");
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBRWpFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHFEQUFxRCxDQUFDO0FBRXhGLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxDQUFDLFlBQW9CLEVBQUUsRUFBRTtJQUNsRCxPQUFPLElBQUksQ0FBQyxNQUFNLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFDcEMsQ0FBQyxDQUFDO0FBQ0YsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsY0FBc0IsRUFBRSxZQUFvQixFQUFFLEVBQUU7SUFDekUsT0FBTyxJQUFJLENBQUMsTUFBTSxFQUFFLGNBQWMsRUFBRSxZQUFZLENBQUMsQ0FBQztBQUNwRCxDQUFDLENBQUM7QUFDRixNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FBQyxJQUFVLEVBQUUsWUFBb0IsRUFBRSxFQUFFO0lBQzVELE1BQU0sU0FBUyxHQUFHLElBQUksaUJBQWlCLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDdEQsT0FBTyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRTtRQUM1QixRQUFRLEVBQUUsS0FBSztLQUNoQixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUM7QUFDRixNQUFNLGFBQWEsR0FBRyxDQUFDLElBQVUsRUFBRSxZQUFvQixFQUFFLEVBQUU7SUFDekQsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUNyRCxNQUFNLFNBQVMsR0FBRyxJQUFJLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3RELE9BQU8sU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUU7UUFDNUIsUUFBUSxFQUFFLEtBQUs7S0FDaEIsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDO0FBQ0YsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsSUFBVSxFQUFFLEVBQUU7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztJQUN2QixNQUFNLE9BQU8sR0FBRyxhQUFhLENBQUMsR0FBRyxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ2pELE1BQU0sUUFBUSxHQUFHLGFBQWEsQ0FBQyxJQUFJLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDbkQsTUFBTSxPQUFPLEdBQUcsT0FBTyxLQUFLLFFBQVEsQ0FBQztJQUVyQyxNQUFNLE9BQU8sR0FBRyxhQUFhLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzNDLE1BQU0sUUFBUSxHQUFHLGFBQWEsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDN0MsTUFBTSxVQUFVLEdBQUcsT0FBTyxLQUFLLFFBQVEsQ0FBQztJQUV4QyxJQUFJLE9BQU8sRUFBRTtRQUNYLE9BQU8sYUFBYSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztLQUNyQztTQUFNLElBQUksVUFBVSxFQUFFO1FBQ3JCLE9BQU8sYUFBYSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztLQUNyQztTQUFNO1FBQ0wsT0FBTyxhQUFhLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0tBQ3hDO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgam9pbiB9IGZyb20gXCJodHRwczovL2Rlbm8ubGFuZC9zdGRAMC4xMjEuMC9wYXRoL21vZC50c1wiO1xuXG5pbXBvcnQgeyBEYXRlVGltZUZvcm1hdHRlciB9IGZyb20gXCJodHRwczovL2Rlbm8ubGFuZC9zdGRAMC4xMjEuMC9kYXRldGltZS9mb3JtYXR0ZXIudHNcIjtcblxuZXhwb3J0IGNvbnN0IGdldFNpdGVQYXRoID0gKHJlbGF0aXZlUGF0aDogc3RyaW5nKSA9PiB7XG4gIHJldHVybiBqb2luKFwic2l0ZVwiLCByZWxhdGl2ZVBhdGgpO1xufTtcbmV4cG9ydCBjb25zdCBnZXRBcHBQYXRoID0gKHNpdGVJZGVudGlmaWVyOiBzdHJpbmcsIHJlbGF0aXZlUGF0aDogc3RyaW5nKSA9PiB7XG4gIHJldHVybiBqb2luKFwiYXBwc1wiLCBzaXRlSWRlbnRpZmllciwgcmVsYXRpdmVQYXRoKTtcbn07XG5leHBvcnQgY29uc3QgZm9ybWF0VXRjID0gKGRhdGU6IERhdGUsIGZvcm1hdFN0cmluZzogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IGZvcm1hdHRlciA9IG5ldyBEYXRlVGltZUZvcm1hdHRlcihmb3JtYXRTdHJpbmcpO1xuICByZXR1cm4gZm9ybWF0dGVyLmZvcm1hdChkYXRlLCB7XG4gICAgdGltZVpvbmU6IFwiVVRDXCIsXG4gIH0pO1xufTtcbmNvbnN0IGZvcm1hdEJlaWppbmcgPSAoZGF0ZTogRGF0ZSwgZm9ybWF0U3RyaW5nOiBzdHJpbmcpID0+IHtcbiAgZGF0ZSA9IG5ldyBEYXRlKGRhdGUuZ2V0VGltZSgpICsgOCAqIDYwICogNjAgKiAxMDAwKTtcbiAgY29uc3QgZm9ybWF0dGVyID0gbmV3IERhdGVUaW1lRm9ybWF0dGVyKGZvcm1hdFN0cmluZyk7XG4gIHJldHVybiBmb3JtYXR0ZXIuZm9ybWF0KGRhdGUsIHtcbiAgICB0aW1lWm9uZTogXCJVVENcIixcbiAgfSk7XG59O1xuZXhwb3J0IGNvbnN0IGZvcm1hdERhdGUgPSAoZGF0ZTogRGF0ZSkgPT4ge1xuICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICBjb25zdCBub3dEYXRlID0gZm9ybWF0QmVpamluZyhub3csIFwieXl5eS1NTS1kZFwiKTtcbiAgY29uc3QgZGF0ZURhdGUgPSBmb3JtYXRCZWlqaW5nKGRhdGUsIFwieXl5eS1NTS1kZFwiKTtcbiAgY29uc3QgaXNUb2RheSA9IG5vd0RhdGUgPT09IGRhdGVEYXRlO1xuXG4gIGNvbnN0IG5vd1llYXIgPSBmb3JtYXRCZWlqaW5nKG5vdywgXCJ5eXl5XCIpO1xuICBjb25zdCBkYXRlWWVhciA9IGZvcm1hdEJlaWppbmcoZGF0ZSwgXCJ5eXl5XCIpO1xuICBjb25zdCBpc1RoaXNZZWFyID0gbm93WWVhciA9PT0gZGF0ZVllYXI7XG5cbiAgaWYgKGlzVG9kYXkpIHtcbiAgICByZXR1cm4gZm9ybWF0QmVpamluZyhkYXRlLCBcIkhIOm1tXCIpO1xuICB9IGVsc2UgaWYgKGlzVGhpc1llYXIpIHtcbiAgICByZXR1cm4gZm9ybWF0QmVpamluZyhkYXRlLCBcIk1NLWRkXCIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmb3JtYXRCZWlqaW5nKGRhdGUsIFwieXktTU0tZGRcIik7XG4gIH1cbn07XG4iXX0=