import { sprintf } from "../../fmt/printf.ts";
import { inspect } from "../util.ts";
let debugImpls;
let testEnabled;
function initializeDebugEnv(debugEnv) {
    debugImpls = Object.create(null);
    if (debugEnv) {
        debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, "\\$&")
            .replaceAll("*", ".*")
            .replaceAll(",", "$|^");
        const debugEnvRegex = new RegExp(`^${debugEnv}$`, "i");
        testEnabled = (str) => debugEnvRegex.exec(str) !== null;
    }
    else {
        testEnabled = () => false;
    }
}
function emitWarningIfNeeded(set) {
    if ("HTTP" === set || "HTTP2" === set) {
        console.warn("Setting the NODE_DEBUG environment variable " +
            "to '" + set.toLowerCase() + "' can expose sensitive " +
            "data (such as passwords, tokens and authentication headers) " +
            "in the resulting log.");
    }
}
const noop = () => { };
function debuglogImpl(enabled, set) {
    if (debugImpls[set] === undefined) {
        if (enabled) {
            emitWarningIfNeeded(set);
            debugImpls[set] = function debug(...args) {
                const msg = args.map((arg) => inspect(arg)).join(" ");
                console.error(sprintf("%s %s: %s\n", set, String(Deno.pid), msg));
            };
        }
        else {
            debugImpls[set] = noop;
        }
    }
    return debugImpls[set];
}
function debuglog(set, cb) {
    function init() {
        set = set.toUpperCase();
        enabled = testEnabled(set);
    }
    let debug = (...args) => {
        init();
        debug = debuglogImpl(enabled, set);
        if (typeof cb === "function") {
            cb(debug);
        }
        return debug(...args);
    };
    let enabled;
    let test = () => {
        init();
        test = () => enabled;
        return enabled;
    };
    const logger = (...args) => debug(...args);
    Object.defineProperty(logger, "enabled", {
        get() {
            return test();
        },
        configurable: true,
        enumerable: true,
    });
    return logger;
}
let state = "";
if (Deno.permissions) {
    state = (await Deno.permissions.query({
        name: "env",
        variable: "NODE_DEBUG",
    })).state;
}
if (state === "granted") {
    initializeDebugEnv(Deno.env.get("NODE_DEBUG") ?? "");
}
else {
    initializeDebugEnv("");
}
export default { debuglog };
export { debuglog };
//# sourceMappingURL=data:application/json;base64,