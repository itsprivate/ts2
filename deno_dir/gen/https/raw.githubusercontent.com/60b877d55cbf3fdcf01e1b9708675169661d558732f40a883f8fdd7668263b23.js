import { getSourceItemUniqueKey } from "./get-source-items-from-result.ts";
export function markSourceItems(ctx) {
    if (Array.isArray(ctx.public.items)) {
        const sourceOptions = ctx.sourcesOptions[ctx.public.sourceIndex];
        ctx.public.items = ctx.public.items.map((item) => {
            const key = getSourceItemUniqueKey(item, ctx.public.sourceIndex, sourceOptions);
            Object.defineProperty(item, "@denoflowKey", {
                value: key,
                enumerable: false,
                writable: false,
            });
            Object.defineProperty(item, "@denoflowSourceIndex", {
                value: ctx.public.sourceIndex,
                enumerable: false,
                writable: false,
            });
            return item;
        });
        ctx.public.result = ctx.public.items;
    }
    return ctx;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFyay1zb3VyY2UtaXRlbXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJtYXJrLXNvdXJjZS1pdGVtcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUUzRSxNQUFNLFVBQVUsZUFBZSxDQUM3QixHQUFZO0lBRVosSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDbkMsTUFBTSxhQUFhLEdBQUcsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFdBQVksQ0FBQyxDQUFDO1FBQ2xFLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1lBQy9DLE1BQU0sR0FBRyxHQUFHLHNCQUFzQixDQUNoQyxJQUFJLEVBQ0osR0FBRyxDQUFDLE1BQU0sQ0FBQyxXQUFZLEVBQ3ZCLGFBQWEsQ0FDZCxDQUFDO1lBRUYsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsY0FBYyxFQUFFO2dCQUMxQyxLQUFLLEVBQUUsR0FBRztnQkFDVixVQUFVLEVBQUUsS0FBSztnQkFDakIsUUFBUSxFQUFFLEtBQUs7YUFDaEIsQ0FBQyxDQUFDO1lBQ0gsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsc0JBQXNCLEVBQUU7Z0JBQ2xELEtBQUssRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLFdBQVk7Z0JBQzlCLFVBQVUsRUFBRSxLQUFLO2dCQUNqQixRQUFRLEVBQUUsS0FBSzthQUNoQixDQUFDLENBQUM7WUFDSCxPQUFPLElBQUksQ0FBQztRQUNkLENBQUMsQ0FBQyxDQUFDO1FBQ0gsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7S0FDdEM7SUFDRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb250ZXh0IH0gZnJvbSBcIi4vaW50ZXJuYWwtaW50ZXJmYWNlLnRzXCI7XG5pbXBvcnQgeyBnZXRTb3VyY2VJdGVtVW5pcXVlS2V5IH0gZnJvbSBcIi4vZ2V0LXNvdXJjZS1pdGVtcy1mcm9tLXJlc3VsdC50c1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gbWFya1NvdXJjZUl0ZW1zKFxuICBjdHg6IENvbnRleHQsXG4pOiBDb250ZXh0IHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoY3R4LnB1YmxpYy5pdGVtcykpIHtcbiAgICBjb25zdCBzb3VyY2VPcHRpb25zID0gY3R4LnNvdXJjZXNPcHRpb25zW2N0eC5wdWJsaWMuc291cmNlSW5kZXghXTtcbiAgICBjdHgucHVibGljLml0ZW1zID0gY3R4LnB1YmxpYy5pdGVtcy5tYXAoKGl0ZW0pID0+IHtcbiAgICAgIGNvbnN0IGtleSA9IGdldFNvdXJjZUl0ZW1VbmlxdWVLZXkoXG4gICAgICAgIGl0ZW0sXG4gICAgICAgIGN0eC5wdWJsaWMuc291cmNlSW5kZXghLFxuICAgICAgICBzb3VyY2VPcHRpb25zLFxuICAgICAgKTtcbiAgICAgIC8vIEFkZCBzb3VyY2UgaW5kZXggYW5kIGl0ZW0ga2V5IHRvIGl0ZW1cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpdGVtLCBcIkBkZW5vZmxvd0tleVwiLCB7XG4gICAgICAgIHZhbHVlOiBrZXksXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpdGVtLCBcIkBkZW5vZmxvd1NvdXJjZUluZGV4XCIsIHtcbiAgICAgICAgdmFsdWU6IGN0eC5wdWJsaWMuc291cmNlSW5kZXghLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gaXRlbTtcbiAgICB9KTtcbiAgICBjdHgucHVibGljLnJlc3VsdCA9IGN0eC5wdWJsaWMuaXRlbXM7XG4gIH1cbiAgcmV0dXJuIGN0eDtcbn1cbiJdfQ==