import { cac } from "./deps.ts";
import { run } from "./src/core/run-workflows.ts";
function main() {
    const cli = cac("denoflow");
    cli
        .command("run [...files]", "Run workflows")
        .option("--force", "Force run workflow files, if true, will ignore to read/save state").option("--debug", "Debug mode, will print more info").option("--database", "Database uri, default json://data").option("--limit", "max items for workflow every runs").option("--sleep", "sleep time between sources, filter, steps, unit seconds")
        .action((files, options) => {
        run({
            ...options,
            files: files,
        }).catch((e) => {
            throw e;
        });
    });
    cli
        .command("[SUB COMMAND] [...files] [OPTIONS]", "")
        .action(() => {
        cli.outputHelp();
    });
    cli.help();
    cli.version("0.0.0");
    cli.parse();
}
if (import.meta.main) {
    main();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2xpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDaEMsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ2xELFNBQVMsSUFBSTtJQUNYLE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM1QixHQUFHO1NBQ0EsT0FBTyxDQUFDLGdCQUFnQixFQUFFLGVBQWUsQ0FBQztTQUMxQyxNQUFNLENBQ0wsU0FBUyxFQUNULG1FQUFtRSxDQUNwRSxDQUFDLE1BQU0sQ0FDTixTQUFTLEVBQ1Qsa0NBQWtDLENBQ25DLENBQUMsTUFBTSxDQUNOLFlBQVksRUFDWixtQ0FBbUMsQ0FDcEMsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLG1DQUFtQyxDQUFDLENBQUMsTUFBTSxDQUM3RCxTQUFTLEVBQ1QseURBQXlELENBQzFEO1NBQ0EsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxFQUFFO1FBR3pCLEdBQUcsQ0FBQztZQUNGLEdBQUcsT0FBTztZQUNWLEtBQUssRUFBRSxLQUFLO1NBQ2IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO1lBQ2IsTUFBTSxDQUFDLENBQUM7UUFDVixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUwsR0FBRztTQUVBLE9BQU8sQ0FBQyxvQ0FBb0MsRUFBRSxFQUFFLENBQUM7U0FDakQsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNYLEdBQUcsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNuQixDQUFDLENBQUMsQ0FBQztJQUVMLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUdYLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFckIsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2QsQ0FBQztBQUVELElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7SUFDcEIsSUFBSSxFQUFFLENBQUM7Q0FDUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNhYyB9IGZyb20gXCIuL2RlcHMudHNcIjtcbmltcG9ydCB7IHJ1biB9IGZyb20gXCIuL3NyYy9jb3JlL3J1bi13b3JrZmxvd3MudHNcIjtcbmZ1bmN0aW9uIG1haW4oKSB7XG4gIGNvbnN0IGNsaSA9IGNhYyhcImRlbm9mbG93XCIpO1xuICBjbGlcbiAgICAuY29tbWFuZChcInJ1biBbLi4uZmlsZXNdXCIsIFwiUnVuIHdvcmtmbG93c1wiKVxuICAgIC5vcHRpb24oXG4gICAgICBcIi0tZm9yY2VcIixcbiAgICAgIFwiRm9yY2UgcnVuIHdvcmtmbG93IGZpbGVzLCBpZiB0cnVlLCB3aWxsIGlnbm9yZSB0byByZWFkL3NhdmUgc3RhdGVcIixcbiAgICApLm9wdGlvbihcbiAgICAgIFwiLS1kZWJ1Z1wiLFxuICAgICAgXCJEZWJ1ZyBtb2RlLCB3aWxsIHByaW50IG1vcmUgaW5mb1wiLFxuICAgICkub3B0aW9uKFxuICAgICAgXCItLWRhdGFiYXNlXCIsXG4gICAgICBcIkRhdGFiYXNlIHVyaSwgZGVmYXVsdCBqc29uOi8vZGF0YVwiLFxuICAgICkub3B0aW9uKFwiLS1saW1pdFwiLCBcIm1heCBpdGVtcyBmb3Igd29ya2Zsb3cgZXZlcnkgcnVuc1wiKS5vcHRpb24oXG4gICAgICBcIi0tc2xlZXBcIixcbiAgICAgIFwic2xlZXAgdGltZSBiZXR3ZWVuIHNvdXJjZXMsIGZpbHRlciwgc3RlcHMsIHVuaXQgc2Vjb25kc1wiLFxuICAgIClcbiAgICAuYWN0aW9uKChmaWxlcywgb3B0aW9ucykgPT4ge1xuICAgICAgLy8gLi4uXG5cbiAgICAgIHJ1bih7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIGZpbGVzOiBmaWxlcyxcbiAgICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgLy8gZGVmYXVsdCBjb21tYW5kXG4gIGNsaVxuICAgIC8vIFNpbXBseSBvbWl0IHRoZSBjb21tYW5kIG5hbWUsIGp1c3QgYnJhY2tldHNcbiAgICAuY29tbWFuZChcIltTVUIgQ09NTUFORF0gWy4uLmZpbGVzXSBbT1BUSU9OU11cIiwgXCJcIilcbiAgICAuYWN0aW9uKCgpID0+IHtcbiAgICAgIGNsaS5vdXRwdXRIZWxwKCk7XG4gICAgfSk7XG5cbiAgY2xpLmhlbHAoKTtcbiAgLy8gRGlzcGxheSB2ZXJzaW9uIG51bWJlciB3aGVuIGAtdmAgb3IgYC0tdmVyc2lvbmAgYXBwZWFyc1xuICAvLyBJdCdzIGFsc28gdXNlZCBpbiBoZWxwIG1lc3NhZ2VcbiAgY2xpLnZlcnNpb24oXCIwLjAuMFwiKTtcblxuICBjbGkucGFyc2UoKTtcbn1cblxuaWYgKGltcG9ydC5tZXRhLm1haW4pIHtcbiAgbWFpbigpO1xufVxuIl19