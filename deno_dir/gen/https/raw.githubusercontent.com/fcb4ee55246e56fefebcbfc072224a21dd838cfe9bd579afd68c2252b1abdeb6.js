import { StepType } from "./internal-interface.ts";
import { get } from "./utils/get.ts";
import { getFrom } from "./get-from.ts";
import { runScript } from "./utils/run-script.ts";
export function getStepResponse(ctx) {
    return {
        result: ctx.public.result,
        ok: ctx.public.ok,
        isRealOk: ctx.public.isRealOk,
        error: ctx.public.error,
        cmdResult: ctx.public.cmdResult,
        cmdCode: ctx.public.cmdCode,
        cmdOk: ctx.public.cmdOk,
        cmdError: ctx.public.cmdError,
    };
}
export function setOkResult(ctx, stepResult) {
    ctx.public.result = stepResult;
    ctx.public.ok = true;
    ctx.public.isRealOk = true;
    ctx.public.error = undefined;
    return ctx;
}
export function setErrorResult(ctx, error) {
    ctx.public.result = undefined;
    ctx.public.error = error;
    ctx.public.isRealOk = false;
    ctx.public.ok = false;
    if (error.code !== undefined) {
        ctx.public.cmdCode = error.code;
        ctx.public.cmdError = error.message;
        ctx.public.cmdOk = false;
        ctx.public.cmdResult = undefined;
    }
    return ctx;
}
export async function runStep(ctx, step) {
    const currentStepType = ctx.currentStepType;
    const { reporter } = step;
    if (currentStepType === StepType.Source) {
        reporter.debug(`Source Options: ${JSON.stringify(step, null, 2)}`);
    }
    else if (currentStepType === StepType.Filter) {
        reporter.debug(`Filter Options: ${JSON.stringify(step, null, 2)}`);
    }
    else if (currentStepType === StepType.Step) {
        reporter.debug(`Step receive item: ${JSON.stringify(ctx.public.item, null, 2)}`);
        reporter.debug(`Step Options: ${JSON.stringify(step, null, 2)}`);
    }
    if (step.env) {
        for (const key in step.env) {
            const value = step.env[key];
            if (typeof value === "string") {
                Deno.env.set(key, value);
            }
        }
    }
    let stepResult;
    try {
        const from = step.from;
        let use;
        if (from) {
            const lib = await getFrom(ctx, from, reporter);
            use = get(lib, step.use ?? "default");
        }
        else if (step.use &&
            typeof globalThis[step.use] === "function") {
            use = globalThis[step.use];
        }
        else if (step.use && step.use.startsWith("Deno.")) {
            const denoApiMethod = step.use.replace("Deno.", "");
            use = get(Deno, denoApiMethod);
        }
        else if (step.use) {
            throw new Error(`${step.use} is not a function`);
        }
        const args = step.args || [];
        if (typeof use === "function") {
            reporter.debug(`Run ${use.name} with args: ${JSON.stringify(args, null, 2)}`);
            stepResult = await use(...args);
            ctx = setOkResult(ctx, stepResult);
            reporter.debug(`use: result: ${typeof stepResult === "string"
                ? stepResult
                : JSON.stringify(stepResult, null, 2)}`);
        }
        else if (use !== undefined) {
            const e = "`use` must be a function, but got " + typeof use;
            throw new Error(e);
        }
    }
    catch (e) {
        reporter.warning(`Failed to run use`);
        throw new Error(e);
    }
    if (step.run) {
        try {
            const scriptResult = await runScript(step.run, {
                ctx: ctx.public,
            });
            stepResult = scriptResult.result;
            ctx = setOkResult(ctx, stepResult);
            ctx.public.state = scriptResult.ctx.state;
            reporter.debug(`Run script result: ${typeof stepResult === "string"
                ? stepResult
                : JSON.stringify(stepResult, null, 2)}`);
        }
        catch (e) {
            reporter.warning(`Failed to run script`);
            throw new Error(e);
        }
    }
    ctx.public.ok = true;
    return ctx;
}
//# sourceMappingURL=data:application/json;base64,