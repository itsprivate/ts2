import { Store } from "./json-store.ts";
import { Adapters, Keydb } from "../../../deps.ts";
export class JsonStoreAdapter {
    namespaces = new Map();
    path = "data";
    constructor(path) {
        this.path = path ?? this.path;
    }
    checkNamespace(ns) {
        if (this.namespaces.has(ns)) {
            return;
        }
        else {
            this.namespaces.set(ns, new Store({
                name: `${ns}.json`,
                path: `${this.path}`,
            }));
        }
    }
    ns(ns) {
        if (ns === "") {
            ns = "default-data";
        }
        this.checkNamespace(ns);
        return this.namespaces.get(ns);
    }
    async set(k, v, ns = "", ttl = 0) {
        const n = this.ns(ns);
        await n.set(k, { value: v, ttl });
        return this;
    }
    async get(k, ns = "") {
        const n = this.ns(ns);
        const v = await n?.get(k);
        return !v ? undefined : {
            key: k,
            ns,
            value: v.value,
            ttl: v.ttl,
        };
    }
    async has(k, ns = "") {
        const n = this.ns(ns);
        return await n.has(k) ?? false;
    }
    async delete(k, ns = "") {
        const n = this.ns(ns);
        return await n?.delete(k) ?? false;
    }
    async keys(ns = "") {
        const n = this.ns(ns);
        const obj = await n.toObject();
        return [...(Object.keys(obj) ?? [])];
    }
    async clear(ns = "") {
        const n = this.ns(ns);
        await n.clear();
        return this;
    }
    async deleteExpired(ns = "") {
        const obj = await this.ns(ns).toObject();
        const n = this.ns(ns);
        for (const k of Object.keys(obj)) {
            const v = obj[k];
            if ((v.ttl) !== 0 && Date.now() > v.ttl) {
                delete obj[k];
            }
        }
        await n.set(obj);
    }
}
Adapters.register({
    protocol: "json",
    init(uri) {
        let path = uri.toString().slice(5);
        if (path.startsWith("//"))
            path = path.slice(2);
        const store = new JsonStoreAdapter(path);
        return store;
    },
});
export { Keydb };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbi1zdG9yZS1hZGFwdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsianNvbi1zdG9yZS1hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV4QyxPQUFPLEVBQVcsUUFBUSxFQUFFLEtBQUssRUFBZSxNQUFNLGtCQUFrQixDQUFDO0FBRXpFLE1BQU0sT0FBTyxnQkFBZ0I7SUFDM0IsVUFBVSxHQUdOLElBQUksR0FBRyxFQUFFLENBQUM7SUFDZCxJQUFJLEdBQUcsTUFBTSxDQUFDO0lBQ2QsWUFBWSxJQUFhO1FBQ3ZCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDaEMsQ0FBQztJQUVELGNBQWMsQ0FBQyxFQUFVO1FBQ3ZCLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDM0IsT0FBTztTQUNSO2FBQU07WUFDTCxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FDakIsRUFBRSxFQUNGLElBQUksS0FBSyxDQUFDO2dCQUNSLElBQUksRUFBRSxHQUFHLEVBQUUsT0FBTztnQkFDbEIsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRTthQUNyQixDQUFDLENBQ0gsQ0FBQztTQUNIO0lBQ0gsQ0FBQztJQUVELEVBQUUsQ0FBQyxFQUFVO1FBQ1gsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ2IsRUFBRSxHQUFHLGNBQWMsQ0FBQztTQUNyQjtRQUNELElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDeEIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQVUsQ0FBQztJQUMxQyxDQUFDO0lBR0QsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFTLEVBQUUsQ0FBTSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUs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QUFRLEVBQUUsTUFBTTtJQUNoQixJQUFJLENBQUMsR0FBRztRQUNOLElBQUksSUFBSSxHQUF1QixHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZELElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7WUFBRSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoRCxNQUFNLEtBQUssR0FBRyxJQUFJLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pDLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztDQUNGLENBQUMsQ0FBQztBQUNILE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0b3JlIH0gZnJvbSBcIi4vanNvbi1zdG9yZS50c1wiO1xuXG5pbXBvcnQgeyBBZGFwdGVyLCBBZGFwdGVycywgS2V5ZGIsIEtleWRiRmllbGRzIH0gZnJvbSBcIi4uLy4uLy4uL2RlcHMudHNcIjtcblxuZXhwb3J0IGNsYXNzIEpzb25TdG9yZUFkYXB0ZXIgaW1wbGVtZW50cyBBZGFwdGVyIHtcbiAgbmFtZXNwYWNlczogTWFwPFxuICAgIHN0cmluZyxcbiAgICBTdG9yZVxuICA+ID0gbmV3IE1hcCgpO1xuICBwYXRoID0gXCJkYXRhXCI7XG4gIGNvbnN0cnVjdG9yKHBhdGg/OiBzdHJpbmcpIHtcbiAgICB0aGlzLnBhdGggPSBwYXRoID8/IHRoaXMucGF0aDtcbiAgfVxuXG4gIGNoZWNrTmFtZXNwYWNlKG5zOiBzdHJpbmcpIHtcbiAgICBpZiAodGhpcy5uYW1lc3BhY2VzLmhhcyhucykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5uYW1lc3BhY2VzLnNldChcbiAgICAgICAgbnMsXG4gICAgICAgIG5ldyBTdG9yZSh7XG4gICAgICAgICAgbmFtZTogYCR7bnN9Lmpzb25gLFxuICAgICAgICAgIHBhdGg6IGAke3RoaXMucGF0aH1gLFxuICAgICAgICB9KSxcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgbnMobnM6IHN0cmluZyk6IFN0b3JlIHtcbiAgICBpZiAobnMgPT09IFwiXCIpIHtcbiAgICAgIG5zID0gXCJkZWZhdWx0LWRhdGFcIjtcbiAgICB9XG4gICAgdGhpcy5jaGVja05hbWVzcGFjZShucyk7XG4gICAgcmV0dXJuIHRoaXMubmFtZXNwYWNlcy5nZXQobnMpIGFzIFN0b3JlO1xuICB9XG5cbiAgLy8gZGVuby1saW50LWlnbm9yZSBuby1leHBsaWNpdC1hbnlcbiAgYXN5bmMgc2V0KGs6IHN0cmluZywgdjogYW55LCBucyA9IFwiXCIsIHR0bCA9IDApIHtcbiAgICBjb25zdCBuID0gdGhpcy5ucyhucyk7XG4gICAgYXdhaXQgbi5zZXQoaywgeyB2YWx1ZTogdiwgdHRsIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgYXN5bmMgZ2V0KGs6IHN0cmluZywgbnMgPSBcIlwiKTogUHJvbWlzZTxLZXlkYkZpZWxkcyB8IHVuZGVmaW5lZD4ge1xuICAgIGNvbnN0IG4gPSB0aGlzLm5zKG5zKTtcbiAgICBjb25zdCB2ID0gYXdhaXQgbj8uZ2V0KGspO1xuICAgIHJldHVybiAhdiA/IHVuZGVmaW5lZCA6IHtcbiAgICAgIGtleTogayxcbiAgICAgIG5zLFxuICAgICAgdmFsdWU6ICh2IGFzIEtleWRiRmllbGRzKS52YWx1ZSxcbiAgICAgIHR0bDogKHYgYXMgS2V5ZGJGaWVsZHMpLnR0bCxcbiAgICB9O1xuICB9XG5cbiAgYXN5bmMgaGFzKGs6IHN0cmluZywgbnMgPSBcIlwiKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgY29uc3QgbiA9IHRoaXMubnMobnMpO1xuXG4gICAgcmV0dXJuIGF3YWl0IG4uaGFzKGspID8/IGZhbHNlO1xuICB9XG5cbiAgYXN5bmMgZGVsZXRlKGs6IHN0cmluZywgbnMgPSBcIlwiKSB7XG4gICAgY29uc3QgbiA9IHRoaXMubnMobnMpO1xuICAgIHJldHVybiBhd2FpdCBuPy5kZWxldGUoaykgPz8gZmFsc2U7XG4gIH1cblxuICBhc3luYyBrZXlzKG5zID0gXCJcIik6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICBjb25zdCBuID0gdGhpcy5ucyhucyk7XG4gICAgY29uc3Qgb2JqID0gYXdhaXQgbi50b09iamVjdCgpO1xuICAgIHJldHVybiBbLi4uKE9iamVjdC5rZXlzKG9iaikgPz8gW10pXTtcbiAgfVxuXG4gIGFzeW5jIGNsZWFyKG5zID0gXCJcIikge1xuICAgIGNvbnN0IG4gPSB0aGlzLm5zKG5zKTtcbiAgICBhd2FpdCBuLmNsZWFyKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBhc3luYyBkZWxldGVFeHBpcmVkKG5zID0gXCJcIikge1xuICAgIGNvbnN0IG9iaiA9IGF3YWl0IHRoaXMubnMobnMpLnRvT2JqZWN0KCk7XG4gICAgY29uc3QgbiA9IHRoaXMubnMobnMpO1xuICAgIGZvciAoY29uc3QgayBvZiBPYmplY3Qua2V5cyhvYmopKSB7XG4gICAgICBjb25zdCB2ID0gb2JqW2tdIGFzIEtleWRiRmllbGRzO1xuICAgICAgaWYgKCh2LnR0bCkgIT09IDAgJiYgRGF0ZS5ub3coKSA+IHYudHRsKSB7XG4gICAgICAgIGRlbGV0ZSBvYmpba107XG4gICAgICB9XG4gICAgfVxuICAgIGF3YWl0IG4uc2V0KG9iaik7XG4gIH1cbn1cbkFkYXB0ZXJzLnJlZ2lzdGVyKHtcbiAgcHJvdG9jb2w6IFwianNvblwiLFxuICBpbml0KHVyaSkge1xuICAgIGxldCBwYXRoOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1cmkudG9TdHJpbmcoKS5zbGljZSg1KTtcbiAgICBpZiAocGF0aC5zdGFydHNXaXRoKFwiLy9cIikpIHBhdGggPSBwYXRoLnNsaWNlKDIpO1xuICAgIGNvbnN0IHN0b3JlID0gbmV3IEpzb25TdG9yZUFkYXB0ZXIocGF0aCk7XG4gICAgcmV0dXJuIHN0b3JlO1xuICB9LFxufSk7XG5leHBvcnQgeyBLZXlkYiB9O1xuIl19